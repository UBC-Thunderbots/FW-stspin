
EVSPIN32F02Q1S1_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000678c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e10  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800765c  0800765c  00020388  2**0
                  CONTENTS
  4 .ARM          00000000  0800765c  0800765c  00020388  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800765c  0800765c  00020388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800765c  0800765c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007660  08007660  00017660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  08007664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000388  080079ec  00020388  2**2
                  ALLOC
 10 ._user_heap_stack 00000484  20000834  080079ec  00020834  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY
 13 .debug_line   00036482  00000000  00000000  000203f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000099  00000000  00000000  00056875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000323bd  00000000  00000000  0005690e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006b5b  00000000  00000000  00088ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001700  00000000  00000000  0008f828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086409  00000000  00000000  00090f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000242e  00000000  00000000  00117331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00013f4e  00000000  00000000  0011975f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0001a005  00000000  00000000  0012d6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003f0c  00000000  00000000  001476b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000388 	.word	0x20000388
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006834 	.word	0x08006834

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000038c 	.word	0x2000038c
 8000104:	08006834 	.word	0x08006834

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_fmul>:
 80003f4:	0243      	lsls	r3, r0, #9
 80003f6:	0a5b      	lsrs	r3, r3, #9
 80003f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fa:	464f      	mov	r7, r9
 80003fc:	4646      	mov	r6, r8
 80003fe:	4699      	mov	r9, r3
 8000400:	46d6      	mov	lr, sl
 8000402:	0fc3      	lsrs	r3, r0, #31
 8000404:	0045      	lsls	r5, r0, #1
 8000406:	4698      	mov	r8, r3
 8000408:	b5c0      	push	{r6, r7, lr}
 800040a:	464b      	mov	r3, r9
 800040c:	1c0f      	adds	r7, r1, #0
 800040e:	0e2d      	lsrs	r5, r5, #24
 8000410:	d100      	bne.n	8000414 <__aeabi_fmul+0x20>
 8000412:	e0cb      	b.n	80005ac <__aeabi_fmul+0x1b8>
 8000414:	2dff      	cmp	r5, #255	; 0xff
 8000416:	d100      	bne.n	800041a <__aeabi_fmul+0x26>
 8000418:	e0cf      	b.n	80005ba <__aeabi_fmul+0x1c6>
 800041a:	2280      	movs	r2, #128	; 0x80
 800041c:	00db      	lsls	r3, r3, #3
 800041e:	04d2      	lsls	r2, r2, #19
 8000420:	431a      	orrs	r2, r3
 8000422:	2300      	movs	r3, #0
 8000424:	4691      	mov	r9, r2
 8000426:	2600      	movs	r6, #0
 8000428:	469a      	mov	sl, r3
 800042a:	3d7f      	subs	r5, #127	; 0x7f
 800042c:	027c      	lsls	r4, r7, #9
 800042e:	007b      	lsls	r3, r7, #1
 8000430:	0a64      	lsrs	r4, r4, #9
 8000432:	0e1b      	lsrs	r3, r3, #24
 8000434:	0fff      	lsrs	r7, r7, #31
 8000436:	2b00      	cmp	r3, #0
 8000438:	d100      	bne.n	800043c <__aeabi_fmul+0x48>
 800043a:	e0a9      	b.n	8000590 <__aeabi_fmul+0x19c>
 800043c:	2bff      	cmp	r3, #255	; 0xff
 800043e:	d011      	beq.n	8000464 <__aeabi_fmul+0x70>
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	00e4      	lsls	r4, r4, #3
 8000444:	04d2      	lsls	r2, r2, #19
 8000446:	4314      	orrs	r4, r2
 8000448:	4642      	mov	r2, r8
 800044a:	3b7f      	subs	r3, #127	; 0x7f
 800044c:	195b      	adds	r3, r3, r5
 800044e:	407a      	eors	r2, r7
 8000450:	2000      	movs	r0, #0
 8000452:	b2d2      	uxtb	r2, r2
 8000454:	1c5d      	adds	r5, r3, #1
 8000456:	2e0a      	cmp	r6, #10
 8000458:	dd13      	ble.n	8000482 <__aeabi_fmul+0x8e>
 800045a:	003a      	movs	r2, r7
 800045c:	2e0b      	cmp	r6, #11
 800045e:	d047      	beq.n	80004f0 <__aeabi_fmul+0xfc>
 8000460:	4647      	mov	r7, r8
 8000462:	e03f      	b.n	80004e4 <__aeabi_fmul+0xf0>
 8000464:	002b      	movs	r3, r5
 8000466:	33ff      	adds	r3, #255	; 0xff
 8000468:	2c00      	cmp	r4, #0
 800046a:	d11e      	bne.n	80004aa <__aeabi_fmul+0xb6>
 800046c:	2202      	movs	r2, #2
 800046e:	4316      	orrs	r6, r2
 8000470:	4642      	mov	r2, r8
 8000472:	3501      	adds	r5, #1
 8000474:	407a      	eors	r2, r7
 8000476:	b2d2      	uxtb	r2, r2
 8000478:	35ff      	adds	r5, #255	; 0xff
 800047a:	2e0a      	cmp	r6, #10
 800047c:	dd00      	ble.n	8000480 <__aeabi_fmul+0x8c>
 800047e:	e0e4      	b.n	800064a <__aeabi_fmul+0x256>
 8000480:	2002      	movs	r0, #2
 8000482:	2e02      	cmp	r6, #2
 8000484:	dc1c      	bgt.n	80004c0 <__aeabi_fmul+0xcc>
 8000486:	3e01      	subs	r6, #1
 8000488:	2e01      	cmp	r6, #1
 800048a:	d842      	bhi.n	8000512 <__aeabi_fmul+0x11e>
 800048c:	2802      	cmp	r0, #2
 800048e:	d03d      	beq.n	800050c <__aeabi_fmul+0x118>
 8000490:	2801      	cmp	r0, #1
 8000492:	d166      	bne.n	8000562 <__aeabi_fmul+0x16e>
 8000494:	2000      	movs	r0, #0
 8000496:	2100      	movs	r1, #0
 8000498:	05c0      	lsls	r0, r0, #23
 800049a:	4308      	orrs	r0, r1
 800049c:	07d2      	lsls	r2, r2, #31
 800049e:	4310      	orrs	r0, r2
 80004a0:	bce0      	pop	{r5, r6, r7}
 80004a2:	46ba      	mov	sl, r7
 80004a4:	46b1      	mov	r9, r6
 80004a6:	46a8      	mov	r8, r5
 80004a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004aa:	2203      	movs	r2, #3
 80004ac:	4316      	orrs	r6, r2
 80004ae:	4642      	mov	r2, r8
 80004b0:	3501      	adds	r5, #1
 80004b2:	407a      	eors	r2, r7
 80004b4:	b2d2      	uxtb	r2, r2
 80004b6:	35ff      	adds	r5, #255	; 0xff
 80004b8:	2e0a      	cmp	r6, #10
 80004ba:	dd00      	ble.n	80004be <__aeabi_fmul+0xca>
 80004bc:	e0e4      	b.n	8000688 <__aeabi_fmul+0x294>
 80004be:	2003      	movs	r0, #3
 80004c0:	2101      	movs	r1, #1
 80004c2:	40b1      	lsls	r1, r6
 80004c4:	26a6      	movs	r6, #166	; 0xa6
 80004c6:	00f6      	lsls	r6, r6, #3
 80004c8:	4231      	tst	r1, r6
 80004ca:	d10a      	bne.n	80004e2 <__aeabi_fmul+0xee>
 80004cc:	2690      	movs	r6, #144	; 0x90
 80004ce:	00b6      	lsls	r6, r6, #2
 80004d0:	4231      	tst	r1, r6
 80004d2:	d116      	bne.n	8000502 <__aeabi_fmul+0x10e>
 80004d4:	3eb9      	subs	r6, #185	; 0xb9
 80004d6:	3eff      	subs	r6, #255	; 0xff
 80004d8:	420e      	tst	r6, r1
 80004da:	d01a      	beq.n	8000512 <__aeabi_fmul+0x11e>
 80004dc:	46a1      	mov	r9, r4
 80004de:	4682      	mov	sl, r0
 80004e0:	e000      	b.n	80004e4 <__aeabi_fmul+0xf0>
 80004e2:	0017      	movs	r7, r2
 80004e4:	4653      	mov	r3, sl
 80004e6:	003a      	movs	r2, r7
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d00f      	beq.n	800050c <__aeabi_fmul+0x118>
 80004ec:	464c      	mov	r4, r9
 80004ee:	4650      	mov	r0, sl
 80004f0:	2803      	cmp	r0, #3
 80004f2:	d1cd      	bne.n	8000490 <__aeabi_fmul+0x9c>
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	03c9      	lsls	r1, r1, #15
 80004f8:	4321      	orrs	r1, r4
 80004fa:	0249      	lsls	r1, r1, #9
 80004fc:	20ff      	movs	r0, #255	; 0xff
 80004fe:	0a49      	lsrs	r1, r1, #9
 8000500:	e7ca      	b.n	8000498 <__aeabi_fmul+0xa4>
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	2200      	movs	r2, #0
 8000506:	20ff      	movs	r0, #255	; 0xff
 8000508:	03c9      	lsls	r1, r1, #15
 800050a:	e7c5      	b.n	8000498 <__aeabi_fmul+0xa4>
 800050c:	20ff      	movs	r0, #255	; 0xff
 800050e:	2100      	movs	r1, #0
 8000510:	e7c2      	b.n	8000498 <__aeabi_fmul+0xa4>
 8000512:	0c20      	lsrs	r0, r4, #16
 8000514:	4649      	mov	r1, r9
 8000516:	0424      	lsls	r4, r4, #16
 8000518:	0c24      	lsrs	r4, r4, #16
 800051a:	0027      	movs	r7, r4
 800051c:	0c0e      	lsrs	r6, r1, #16
 800051e:	0409      	lsls	r1, r1, #16
 8000520:	0c09      	lsrs	r1, r1, #16
 8000522:	4374      	muls	r4, r6
 8000524:	434f      	muls	r7, r1
 8000526:	4346      	muls	r6, r0
 8000528:	4348      	muls	r0, r1
 800052a:	0c39      	lsrs	r1, r7, #16
 800052c:	1900      	adds	r0, r0, r4
 800052e:	1809      	adds	r1, r1, r0
 8000530:	428c      	cmp	r4, r1
 8000532:	d903      	bls.n	800053c <__aeabi_fmul+0x148>
 8000534:	2080      	movs	r0, #128	; 0x80
 8000536:	0240      	lsls	r0, r0, #9
 8000538:	4684      	mov	ip, r0
 800053a:	4466      	add	r6, ip
 800053c:	043f      	lsls	r7, r7, #16
 800053e:	0408      	lsls	r0, r1, #16
 8000540:	0c3f      	lsrs	r7, r7, #16
 8000542:	19c0      	adds	r0, r0, r7
 8000544:	0184      	lsls	r4, r0, #6
 8000546:	1e67      	subs	r7, r4, #1
 8000548:	41bc      	sbcs	r4, r7
 800054a:	0c09      	lsrs	r1, r1, #16
 800054c:	0e80      	lsrs	r0, r0, #26
 800054e:	1989      	adds	r1, r1, r6
 8000550:	4304      	orrs	r4, r0
 8000552:	0189      	lsls	r1, r1, #6
 8000554:	430c      	orrs	r4, r1
 8000556:	0109      	lsls	r1, r1, #4
 8000558:	d571      	bpl.n	800063e <__aeabi_fmul+0x24a>
 800055a:	2301      	movs	r3, #1
 800055c:	0861      	lsrs	r1, r4, #1
 800055e:	401c      	ands	r4, r3
 8000560:	430c      	orrs	r4, r1
 8000562:	002b      	movs	r3, r5
 8000564:	337f      	adds	r3, #127	; 0x7f
 8000566:	2b00      	cmp	r3, #0
 8000568:	dd51      	ble.n	800060e <__aeabi_fmul+0x21a>
 800056a:	0761      	lsls	r1, r4, #29
 800056c:	d004      	beq.n	8000578 <__aeabi_fmul+0x184>
 800056e:	210f      	movs	r1, #15
 8000570:	4021      	ands	r1, r4
 8000572:	2904      	cmp	r1, #4
 8000574:	d000      	beq.n	8000578 <__aeabi_fmul+0x184>
 8000576:	3404      	adds	r4, #4
 8000578:	0121      	lsls	r1, r4, #4
 800057a:	d503      	bpl.n	8000584 <__aeabi_fmul+0x190>
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <__aeabi_fmul+0x298>)
 800057e:	401c      	ands	r4, r3
 8000580:	002b      	movs	r3, r5
 8000582:	3380      	adds	r3, #128	; 0x80
 8000584:	2bfe      	cmp	r3, #254	; 0xfe
 8000586:	dcc1      	bgt.n	800050c <__aeabi_fmul+0x118>
 8000588:	01a1      	lsls	r1, r4, #6
 800058a:	0a49      	lsrs	r1, r1, #9
 800058c:	b2d8      	uxtb	r0, r3
 800058e:	e783      	b.n	8000498 <__aeabi_fmul+0xa4>
 8000590:	2c00      	cmp	r4, #0
 8000592:	d12c      	bne.n	80005ee <__aeabi_fmul+0x1fa>
 8000594:	2301      	movs	r3, #1
 8000596:	4642      	mov	r2, r8
 8000598:	431e      	orrs	r6, r3
 800059a:	002b      	movs	r3, r5
 800059c:	407a      	eors	r2, r7
 800059e:	2001      	movs	r0, #1
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	1c5d      	adds	r5, r3, #1
 80005a4:	2e0a      	cmp	r6, #10
 80005a6:	dd00      	ble.n	80005aa <__aeabi_fmul+0x1b6>
 80005a8:	e757      	b.n	800045a <__aeabi_fmul+0x66>
 80005aa:	e76a      	b.n	8000482 <__aeabi_fmul+0x8e>
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d110      	bne.n	80005d2 <__aeabi_fmul+0x1de>
 80005b0:	2301      	movs	r3, #1
 80005b2:	2604      	movs	r6, #4
 80005b4:	2500      	movs	r5, #0
 80005b6:	469a      	mov	sl, r3
 80005b8:	e738      	b.n	800042c <__aeabi_fmul+0x38>
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d104      	bne.n	80005c8 <__aeabi_fmul+0x1d4>
 80005be:	2302      	movs	r3, #2
 80005c0:	2608      	movs	r6, #8
 80005c2:	25ff      	movs	r5, #255	; 0xff
 80005c4:	469a      	mov	sl, r3
 80005c6:	e731      	b.n	800042c <__aeabi_fmul+0x38>
 80005c8:	2303      	movs	r3, #3
 80005ca:	260c      	movs	r6, #12
 80005cc:	25ff      	movs	r5, #255	; 0xff
 80005ce:	469a      	mov	sl, r3
 80005d0:	e72c      	b.n	800042c <__aeabi_fmul+0x38>
 80005d2:	4648      	mov	r0, r9
 80005d4:	f000 f8f6 	bl	80007c4 <__clzsi2>
 80005d8:	464a      	mov	r2, r9
 80005da:	1f43      	subs	r3, r0, #5
 80005dc:	2576      	movs	r5, #118	; 0x76
 80005de:	409a      	lsls	r2, r3
 80005e0:	2300      	movs	r3, #0
 80005e2:	426d      	negs	r5, r5
 80005e4:	4691      	mov	r9, r2
 80005e6:	2600      	movs	r6, #0
 80005e8:	469a      	mov	sl, r3
 80005ea:	1a2d      	subs	r5, r5, r0
 80005ec:	e71e      	b.n	800042c <__aeabi_fmul+0x38>
 80005ee:	0020      	movs	r0, r4
 80005f0:	f000 f8e8 	bl	80007c4 <__clzsi2>
 80005f4:	4642      	mov	r2, r8
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	409c      	lsls	r4, r3
 80005fa:	1a2b      	subs	r3, r5, r0
 80005fc:	3b76      	subs	r3, #118	; 0x76
 80005fe:	407a      	eors	r2, r7
 8000600:	2000      	movs	r0, #0
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	1c5d      	adds	r5, r3, #1
 8000606:	2e0a      	cmp	r6, #10
 8000608:	dd00      	ble.n	800060c <__aeabi_fmul+0x218>
 800060a:	e726      	b.n	800045a <__aeabi_fmul+0x66>
 800060c:	e739      	b.n	8000482 <__aeabi_fmul+0x8e>
 800060e:	2101      	movs	r1, #1
 8000610:	1acb      	subs	r3, r1, r3
 8000612:	2b1b      	cmp	r3, #27
 8000614:	dd00      	ble.n	8000618 <__aeabi_fmul+0x224>
 8000616:	e73d      	b.n	8000494 <__aeabi_fmul+0xa0>
 8000618:	359e      	adds	r5, #158	; 0x9e
 800061a:	0021      	movs	r1, r4
 800061c:	40ac      	lsls	r4, r5
 800061e:	40d9      	lsrs	r1, r3
 8000620:	1e63      	subs	r3, r4, #1
 8000622:	419c      	sbcs	r4, r3
 8000624:	4321      	orrs	r1, r4
 8000626:	074b      	lsls	r3, r1, #29
 8000628:	d004      	beq.n	8000634 <__aeabi_fmul+0x240>
 800062a:	230f      	movs	r3, #15
 800062c:	400b      	ands	r3, r1
 800062e:	2b04      	cmp	r3, #4
 8000630:	d000      	beq.n	8000634 <__aeabi_fmul+0x240>
 8000632:	3104      	adds	r1, #4
 8000634:	014b      	lsls	r3, r1, #5
 8000636:	d504      	bpl.n	8000642 <__aeabi_fmul+0x24e>
 8000638:	2001      	movs	r0, #1
 800063a:	2100      	movs	r1, #0
 800063c:	e72c      	b.n	8000498 <__aeabi_fmul+0xa4>
 800063e:	001d      	movs	r5, r3
 8000640:	e78f      	b.n	8000562 <__aeabi_fmul+0x16e>
 8000642:	0189      	lsls	r1, r1, #6
 8000644:	2000      	movs	r0, #0
 8000646:	0a49      	lsrs	r1, r1, #9
 8000648:	e726      	b.n	8000498 <__aeabi_fmul+0xa4>
 800064a:	2302      	movs	r3, #2
 800064c:	2e0f      	cmp	r6, #15
 800064e:	d10c      	bne.n	800066a <__aeabi_fmul+0x276>
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	464b      	mov	r3, r9
 8000654:	03c9      	lsls	r1, r1, #15
 8000656:	420b      	tst	r3, r1
 8000658:	d00d      	beq.n	8000676 <__aeabi_fmul+0x282>
 800065a:	420c      	tst	r4, r1
 800065c:	d10b      	bne.n	8000676 <__aeabi_fmul+0x282>
 800065e:	4321      	orrs	r1, r4
 8000660:	0249      	lsls	r1, r1, #9
 8000662:	003a      	movs	r2, r7
 8000664:	20ff      	movs	r0, #255	; 0xff
 8000666:	0a49      	lsrs	r1, r1, #9
 8000668:	e716      	b.n	8000498 <__aeabi_fmul+0xa4>
 800066a:	2e0b      	cmp	r6, #11
 800066c:	d000      	beq.n	8000670 <__aeabi_fmul+0x27c>
 800066e:	e6f7      	b.n	8000460 <__aeabi_fmul+0x6c>
 8000670:	46a1      	mov	r9, r4
 8000672:	469a      	mov	sl, r3
 8000674:	e736      	b.n	80004e4 <__aeabi_fmul+0xf0>
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	464b      	mov	r3, r9
 800067a:	03c9      	lsls	r1, r1, #15
 800067c:	4319      	orrs	r1, r3
 800067e:	0249      	lsls	r1, r1, #9
 8000680:	4642      	mov	r2, r8
 8000682:	20ff      	movs	r0, #255	; 0xff
 8000684:	0a49      	lsrs	r1, r1, #9
 8000686:	e707      	b.n	8000498 <__aeabi_fmul+0xa4>
 8000688:	2303      	movs	r3, #3
 800068a:	e7df      	b.n	800064c <__aeabi_fmul+0x258>
 800068c:	f7ffffff 	.word	0xf7ffffff

08000690 <__aeabi_i2f>:
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	2800      	cmp	r0, #0
 8000694:	d013      	beq.n	80006be <__aeabi_i2f+0x2e>
 8000696:	17c3      	asrs	r3, r0, #31
 8000698:	18c5      	adds	r5, r0, r3
 800069a:	405d      	eors	r5, r3
 800069c:	0fc4      	lsrs	r4, r0, #31
 800069e:	0028      	movs	r0, r5
 80006a0:	f000 f890 	bl	80007c4 <__clzsi2>
 80006a4:	239e      	movs	r3, #158	; 0x9e
 80006a6:	0001      	movs	r1, r0
 80006a8:	1a1b      	subs	r3, r3, r0
 80006aa:	2b96      	cmp	r3, #150	; 0x96
 80006ac:	dc0f      	bgt.n	80006ce <__aeabi_i2f+0x3e>
 80006ae:	2808      	cmp	r0, #8
 80006b0:	d031      	beq.n	8000716 <__aeabi_i2f+0x86>
 80006b2:	3908      	subs	r1, #8
 80006b4:	408d      	lsls	r5, r1
 80006b6:	026d      	lsls	r5, r5, #9
 80006b8:	0a6d      	lsrs	r5, r5, #9
 80006ba:	b2d8      	uxtb	r0, r3
 80006bc:	e002      	b.n	80006c4 <__aeabi_i2f+0x34>
 80006be:	2400      	movs	r4, #0
 80006c0:	2000      	movs	r0, #0
 80006c2:	2500      	movs	r5, #0
 80006c4:	05c0      	lsls	r0, r0, #23
 80006c6:	4328      	orrs	r0, r5
 80006c8:	07e4      	lsls	r4, r4, #31
 80006ca:	4320      	orrs	r0, r4
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	2b99      	cmp	r3, #153	; 0x99
 80006d0:	dd0c      	ble.n	80006ec <__aeabi_i2f+0x5c>
 80006d2:	2205      	movs	r2, #5
 80006d4:	1a12      	subs	r2, r2, r0
 80006d6:	0028      	movs	r0, r5
 80006d8:	40d0      	lsrs	r0, r2
 80006da:	0002      	movs	r2, r0
 80006dc:	0008      	movs	r0, r1
 80006de:	301b      	adds	r0, #27
 80006e0:	4085      	lsls	r5, r0
 80006e2:	0028      	movs	r0, r5
 80006e4:	1e45      	subs	r5, r0, #1
 80006e6:	41a8      	sbcs	r0, r5
 80006e8:	4302      	orrs	r2, r0
 80006ea:	0015      	movs	r5, r2
 80006ec:	2905      	cmp	r1, #5
 80006ee:	dc16      	bgt.n	800071e <__aeabi_i2f+0x8e>
 80006f0:	002a      	movs	r2, r5
 80006f2:	480f      	ldr	r0, [pc, #60]	; (8000730 <__aeabi_i2f+0xa0>)
 80006f4:	4002      	ands	r2, r0
 80006f6:	076e      	lsls	r6, r5, #29
 80006f8:	d009      	beq.n	800070e <__aeabi_i2f+0x7e>
 80006fa:	260f      	movs	r6, #15
 80006fc:	4035      	ands	r5, r6
 80006fe:	2d04      	cmp	r5, #4
 8000700:	d005      	beq.n	800070e <__aeabi_i2f+0x7e>
 8000702:	3204      	adds	r2, #4
 8000704:	0155      	lsls	r5, r2, #5
 8000706:	d502      	bpl.n	800070e <__aeabi_i2f+0x7e>
 8000708:	239f      	movs	r3, #159	; 0x9f
 800070a:	4002      	ands	r2, r0
 800070c:	1a5b      	subs	r3, r3, r1
 800070e:	0192      	lsls	r2, r2, #6
 8000710:	0a55      	lsrs	r5, r2, #9
 8000712:	b2d8      	uxtb	r0, r3
 8000714:	e7d6      	b.n	80006c4 <__aeabi_i2f+0x34>
 8000716:	026d      	lsls	r5, r5, #9
 8000718:	2096      	movs	r0, #150	; 0x96
 800071a:	0a6d      	lsrs	r5, r5, #9
 800071c:	e7d2      	b.n	80006c4 <__aeabi_i2f+0x34>
 800071e:	1f4a      	subs	r2, r1, #5
 8000720:	4095      	lsls	r5, r2
 8000722:	002a      	movs	r2, r5
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <__aeabi_i2f+0xa0>)
 8000726:	4002      	ands	r2, r0
 8000728:	076e      	lsls	r6, r5, #29
 800072a:	d0f0      	beq.n	800070e <__aeabi_i2f+0x7e>
 800072c:	e7e5      	b.n	80006fa <__aeabi_i2f+0x6a>
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	fbffffff 	.word	0xfbffffff

08000734 <__aeabi_ui2f>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	1e04      	subs	r4, r0, #0
 8000738:	d00e      	beq.n	8000758 <__aeabi_ui2f+0x24>
 800073a:	f000 f843 	bl	80007c4 <__clzsi2>
 800073e:	239e      	movs	r3, #158	; 0x9e
 8000740:	0001      	movs	r1, r0
 8000742:	1a1b      	subs	r3, r3, r0
 8000744:	2b96      	cmp	r3, #150	; 0x96
 8000746:	dc0c      	bgt.n	8000762 <__aeabi_ui2f+0x2e>
 8000748:	2808      	cmp	r0, #8
 800074a:	d02c      	beq.n	80007a6 <__aeabi_ui2f+0x72>
 800074c:	3908      	subs	r1, #8
 800074e:	408c      	lsls	r4, r1
 8000750:	0264      	lsls	r4, r4, #9
 8000752:	0a64      	lsrs	r4, r4, #9
 8000754:	b2d8      	uxtb	r0, r3
 8000756:	e001      	b.n	800075c <__aeabi_ui2f+0x28>
 8000758:	2000      	movs	r0, #0
 800075a:	2400      	movs	r4, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	4320      	orrs	r0, r4
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	2b99      	cmp	r3, #153	; 0x99
 8000764:	dd0a      	ble.n	800077c <__aeabi_ui2f+0x48>
 8000766:	0002      	movs	r2, r0
 8000768:	0020      	movs	r0, r4
 800076a:	321b      	adds	r2, #27
 800076c:	4090      	lsls	r0, r2
 800076e:	0002      	movs	r2, r0
 8000770:	1e50      	subs	r0, r2, #1
 8000772:	4182      	sbcs	r2, r0
 8000774:	2005      	movs	r0, #5
 8000776:	1a40      	subs	r0, r0, r1
 8000778:	40c4      	lsrs	r4, r0
 800077a:	4314      	orrs	r4, r2
 800077c:	2905      	cmp	r1, #5
 800077e:	dc16      	bgt.n	80007ae <__aeabi_ui2f+0x7a>
 8000780:	0022      	movs	r2, r4
 8000782:	480f      	ldr	r0, [pc, #60]	; (80007c0 <__aeabi_ui2f+0x8c>)
 8000784:	4002      	ands	r2, r0
 8000786:	0765      	lsls	r5, r4, #29
 8000788:	d009      	beq.n	800079e <__aeabi_ui2f+0x6a>
 800078a:	250f      	movs	r5, #15
 800078c:	402c      	ands	r4, r5
 800078e:	2c04      	cmp	r4, #4
 8000790:	d005      	beq.n	800079e <__aeabi_ui2f+0x6a>
 8000792:	3204      	adds	r2, #4
 8000794:	0154      	lsls	r4, r2, #5
 8000796:	d502      	bpl.n	800079e <__aeabi_ui2f+0x6a>
 8000798:	239f      	movs	r3, #159	; 0x9f
 800079a:	4002      	ands	r2, r0
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	0192      	lsls	r2, r2, #6
 80007a0:	0a54      	lsrs	r4, r2, #9
 80007a2:	b2d8      	uxtb	r0, r3
 80007a4:	e7da      	b.n	800075c <__aeabi_ui2f+0x28>
 80007a6:	0264      	lsls	r4, r4, #9
 80007a8:	2096      	movs	r0, #150	; 0x96
 80007aa:	0a64      	lsrs	r4, r4, #9
 80007ac:	e7d6      	b.n	800075c <__aeabi_ui2f+0x28>
 80007ae:	1f4a      	subs	r2, r1, #5
 80007b0:	4094      	lsls	r4, r2
 80007b2:	0022      	movs	r2, r4
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <__aeabi_ui2f+0x8c>)
 80007b6:	4002      	ands	r2, r0
 80007b8:	0765      	lsls	r5, r4, #29
 80007ba:	d0f0      	beq.n	800079e <__aeabi_ui2f+0x6a>
 80007bc:	e7e5      	b.n	800078a <__aeabi_ui2f+0x56>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	fbffffff 	.word	0xfbffffff

080007c4 <__clzsi2>:
 80007c4:	211c      	movs	r1, #28
 80007c6:	2301      	movs	r3, #1
 80007c8:	041b      	lsls	r3, r3, #16
 80007ca:	4298      	cmp	r0, r3
 80007cc:	d301      	bcc.n	80007d2 <__clzsi2+0xe>
 80007ce:	0c00      	lsrs	r0, r0, #16
 80007d0:	3910      	subs	r1, #16
 80007d2:	0a1b      	lsrs	r3, r3, #8
 80007d4:	4298      	cmp	r0, r3
 80007d6:	d301      	bcc.n	80007dc <__clzsi2+0x18>
 80007d8:	0a00      	lsrs	r0, r0, #8
 80007da:	3908      	subs	r1, #8
 80007dc:	091b      	lsrs	r3, r3, #4
 80007de:	4298      	cmp	r0, r3
 80007e0:	d301      	bcc.n	80007e6 <__clzsi2+0x22>
 80007e2:	0900      	lsrs	r0, r0, #4
 80007e4:	3904      	subs	r1, #4
 80007e6:	a202      	add	r2, pc, #8	; (adr r2, 80007f0 <__clzsi2+0x2c>)
 80007e8:	5c10      	ldrb	r0, [r2, r0]
 80007ea:	1840      	adds	r0, r0, r1
 80007ec:	4770      	bx	lr
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	02020304 	.word	0x02020304
 80007f4:	01010101 	.word	0x01010101
	...

08000800 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000802:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000804:	f003 ff34 	bl	8004670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <LoopForever+0x6>)
  ldr r1, =_edata
 800080a:	490d      	ldr	r1, [pc, #52]	; (8000840 <LoopForever+0xa>)
  ldr r2, =_sidata
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <LoopForever+0xe>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000820:	4c0a      	ldr	r4, [pc, #40]	; (800084c <LoopForever+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800082e:	f005 ffd3 	bl	80067d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000832:	f000 fbab 	bl	8000f8c <main>

08000836 <LoopForever>:

LoopForever:
    b LoopForever
 8000836:	e7fe      	b.n	8000836 <LoopForever>
  ldr   r0, =_estack
 8000838:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000388 	.word	0x20000388
  ldr r2, =_sidata
 8000844:	08007664 	.word	0x08007664
  ldr r2, =_sbss
 8000848:	20000388 	.word	0x20000388
  ldr r4, =_ebss
 800084c:	20000834 	.word	0x20000834

08000850 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_IRQHandler>
	...

08000854 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000854:	b510      	push	{r4, lr}
 8000856:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800085a:	6940      	ldr	r0, [r0, #20]
 800085c:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 800085e:	2200      	movs	r2, #0
 8000860:	234c      	movs	r3, #76	; 0x4c
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000862:	0021      	movs	r1, r4
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000864:	52e2      	strh	r2, [r4, r3]
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000866:	3b04      	subs	r3, #4
 8000868:	54e2      	strb	r2, [r4, r3]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800086a:	6960      	ldr	r0, [r4, #20]
 800086c:	2204      	movs	r2, #4
 800086e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000870:	311c      	adds	r1, #28
 8000872:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000874:	bd10      	pop	{r4, pc}
 8000876:	46c0      	nop			; (mov r8, r8)

08000878 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000878:	b570      	push	{r4, r5, r6, lr}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800087a:	780a      	ldrb	r2, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 800087c:	790b      	ldrb	r3, [r1, #4]
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800087e:	01d2      	lsls	r2, r2, #7
             | (((uint32_t)capabilities->version) << 4U)
 8000880:	011b      	lsls	r3, r3, #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000882:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000884:	784a      	ldrb	r2, [r1, #1]
{
 8000886:	0004      	movs	r4, r0
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000888:	0212      	lsls	r2, r2, #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800088a:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800088c:	788a      	ldrb	r2, [r1, #2]
  header &= 0x0fffffffU;
 800088e:	2005      	movs	r0, #5
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000890:	0392      	lsls	r2, r2, #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000892:	4313      	orrs	r3, r2
 8000894:	78ca      	ldrb	r2, [r1, #3]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000896:	21ff      	movs	r1, #255	; 0xff
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000898:	0552      	lsls	r2, r2, #21
 800089a:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800089c:	4d16      	ldr	r5, [pc, #88]	; (80008f8 <ASPEP_sendBeacon+0x80>)
 800089e:	4019      	ands	r1, r3
 80008a0:	4301      	orrs	r1, r0
  header &= 0x0fffffffU;
 80008a2:	011a      	lsls	r2, r3, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008a4:	5c69      	ldrb	r1, [r5, r1]
 80008a6:	0b16      	lsrs	r6, r2, #12
 80008a8:	4071      	eors	r1, r6
 80008aa:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008ac:	5c69      	ldrb	r1, [r5, r1]
 80008ae:	0d16      	lsrs	r6, r2, #20
 80008b0:	4071      	eors	r1, r6
 80008b2:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008b4:	5c69      	ldrb	r1, [r5, r1]
 80008b6:	0f12      	lsrs	r2, r2, #28
 80008b8:	404a      	eors	r2, r1
 80008ba:	4910      	ldr	r1, [pc, #64]	; (80008fc <ASPEP_sendBeacon+0x84>)
  *headerPtr |= (uint32_t)crc << 28;
 80008bc:	5c8a      	ldrb	r2, [r1, r2]
 80008be:	0712      	lsls	r2, r2, #28
 80008c0:	4313      	orrs	r3, r2
 80008c2:	4303      	orrs	r3, r0
 80008c4:	6223      	str	r3, [r4, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c6:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80008c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d007      	beq.n	80008de <ASPEP_sendBeacon+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 80008ce:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80008d0:	2324      	movs	r3, #36	; 0x24
 80008d2:	5ce2      	ldrb	r2, [r4, r3]
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	d101      	bne.n	80008dc <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80008d8:	3202      	adds	r2, #2
 80008da:	54e2      	strb	r2, [r4, r3]
}
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80008de:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 80008e0:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80008e2:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 80008e4:	3324      	adds	r3, #36	; 0x24
 80008e6:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80008e8:	6321      	str	r1, [r4, #48]	; 0x30
 80008ea:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80008ec:	6960      	ldr	r0, [r4, #20]
 80008ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008f0:	3201      	adds	r2, #1
 80008f2:	4798      	blx	r3
 80008f4:	e7f2      	b.n	80008dc <ASPEP_sendBeacon+0x64>
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	0800685c 	.word	0x0800685c
 80008fc:	0800684c 	.word	0x0800684c

08000900 <ASPEP_sendPing>:
{
 8000900:	000b      	movs	r3, r1
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000902:	2148      	movs	r1, #72	; 0x48
{
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	0004      	movs	r4, r0
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000908:	5c41      	ldrb	r1, [r0, r1]
                   | (uint32_t)((uint32_t)Nbit << 6U)
 800090a:	2001      	movs	r0, #1
 800090c:	4008      	ands	r0, r1
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 800090e:	0119      	lsls	r1, r3, #4
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000910:	015b      	lsls	r3, r3, #5
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000912:	4319      	orrs	r1, r3
 8000914:	0313      	lsls	r3, r2, #12
 8000916:	430b      	orrs	r3, r1
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000918:	0182      	lsls	r2, r0, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800091a:	4313      	orrs	r3, r2
    uint8_t ipID = pHandle->liid & 0xFU;
 800091c:	224b      	movs	r2, #75	; 0x4b
 800091e:	5ca1      	ldrb	r1, [r4, r2]
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000920:	3a3c      	subs	r2, #60	; 0x3c
                   | (uint32_t)((uint32_t)Nbit << 7U)
 8000922:	01c0      	lsls	r0, r0, #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000924:	400a      	ands	r2, r1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000926:	4303      	orrs	r3, r0
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000928:	0212      	lsls	r2, r2, #8
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800092a:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800092c:	22ff      	movs	r2, #255	; 0xff
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800092e:	2506      	movs	r5, #6
 8000930:	0018      	movs	r0, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000932:	4916      	ldr	r1, [pc, #88]	; (800098c <ASPEP_sendPing+0x8c>)
 8000934:	401a      	ands	r2, r3
 8000936:	432a      	orrs	r2, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000938:	5c8a      	ldrb	r2, [r1, r2]
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800093a:	4328      	orrs	r0, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800093c:	0a1d      	lsrs	r5, r3, #8
 800093e:	406a      	eors	r2, r5
 8000940:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000942:	5c8a      	ldrb	r2, [r1, r2]
 8000944:	0c1d      	lsrs	r5, r3, #16
 8000946:	406a      	eors	r2, r5
 8000948:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800094a:	5c8a      	ldrb	r2, [r1, r2]
 800094c:	0e1b      	lsrs	r3, r3, #24
 800094e:	4053      	eors	r3, r2
 8000950:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <ASPEP_sendPing+0x90>)
  *headerPtr |= (uint32_t)crc << 28;
 8000952:	5cd3      	ldrb	r3, [r2, r3]
 8000954:	071b      	lsls	r3, r3, #28
 8000956:	4303      	orrs	r3, r0
 8000958:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800095a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800095c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800095e:	2b00      	cmp	r3, #0
 8000960:	d007      	beq.n	8000972 <ASPEP_sendPing+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 8000962:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000964:	2324      	movs	r3, #36	; 0x24
 8000966:	5ce2      	ldrb	r2, [r4, r3]
 8000968:	2a00      	cmp	r2, #0
 800096a:	d101      	bne.n	8000970 <ASPEP_sendPing+0x70>
          pHandle->ctrlBuffer.state = pending;
 800096c:	3202      	adds	r2, #2
 800096e:	54e2      	strb	r2, [r4, r3]
}
 8000970:	bd70      	pop	{r4, r5, r6, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000972:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000974:	2203      	movs	r2, #3
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000976:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000978:	3324      	adds	r3, #36	; 0x24
 800097a:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800097c:	6321      	str	r1, [r4, #48]	; 0x30
 800097e:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000980:	6960      	ldr	r0, [r4, #20]
 8000982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000984:	3201      	adds	r2, #1
 8000986:	4798      	blx	r3
 8000988:	e7f2      	b.n	8000970 <ASPEP_sendPing+0x70>
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	0800685c 	.word	0x0800685c
 8000990:	0800684c 	.word	0x0800684c

08000994 <ASPEP_getBuffer>:
{
 8000994:	0003      	movs	r3, r0
 8000996:	b510      	push	{r4, lr}
     result = false; /* Async packets are not supported */
 8000998:	2000      	movs	r0, #0
    if (MCTL_SYNC == syncAsync)
 800099a:	2a0a      	cmp	r2, #10
 800099c:	d000      	beq.n	80009a0 <ASPEP_getBuffer+0xc>
}
 800099e:	bd10      	pop	{r4, pc}
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80009a0:	3224      	adds	r2, #36	; 0x24
 80009a2:	5c9c      	ldrb	r4, [r3, r2]
 80009a4:	2c01      	cmp	r4, #1
 80009a6:	d8fa      	bhi.n	800099e <ASPEP_getBuffer+0xa>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80009a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009aa:	3004      	adds	r0, #4
 80009ac:	6008      	str	r0, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80009ae:	2101      	movs	r1, #1
  bool result = true;
 80009b0:	2001      	movs	r0, #1
        pHandle->syncBuffer.state = writeLock;
 80009b2:	5499      	strb	r1, [r3, r2]
 80009b4:	e7f3      	b.n	800099e <ASPEP_getBuffer+0xa>
 80009b6:	46c0      	nop			; (mov r8, r8)

080009b8 <ASPEP_sendPacket>:
{
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	0004      	movs	r4, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80009bc:	204c      	movs	r0, #76	; 0x4c
{
 80009be:	46c6      	mov	lr, r8
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80009c0:	5c25      	ldrb	r5, [r4, r0]
{
 80009c2:	b500      	push	{lr}
      result = ASPEP_NOT_CONNECTED;
 80009c4:	384a      	subs	r0, #74	; 0x4a
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80009c6:	2d02      	cmp	r5, #2
 80009c8:	d002      	beq.n	80009d0 <ASPEP_sendPacket+0x18>
}
 80009ca:	bc80      	pop	{r7}
 80009cc:	46b8      	mov	r8, r7
 80009ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80009d0:	0110      	lsls	r0, r2, #4
 80009d2:	4318      	orrs	r0, r3
      *header = tmpHeader;
 80009d4:	1f0e      	subs	r6, r1, #4
 80009d6:	6030      	str	r0, [r6, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80009d8:	2054      	movs	r0, #84	; 0x54
 80009da:	5c20      	ldrb	r0, [r4, r0]
 80009dc:	2801      	cmp	r0, #1
 80009de:	d106      	bne.n	80009ee <ASPEP_sendPacket+0x36>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80009e0:	30c9      	adds	r0, #201	; 0xc9
 80009e2:	5488      	strb	r0, [r1, r2]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80009e4:	1889      	adds	r1, r1, r2
 80009e6:	3034      	adds	r0, #52	; 0x34
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80009e8:	3202      	adds	r2, #2
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80009ea:	7048      	strb	r0, [r1, #1]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80009ec:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 80009ee:	2b0a      	cmp	r3, #10
 80009f0:	d105      	bne.n	80009fe <ASPEP_sendPacket+0x46>
        if (pSupHandle->MCP_PacketAvailable)
 80009f2:	7c21      	ldrb	r1, [r4, #16]
          result = MCTL_SYNC_NOT_EXPECTED;
 80009f4:	2001      	movs	r0, #1
        if (pSupHandle->MCP_PacketAvailable)
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d0e7      	beq.n	80009ca <ASPEP_sendPacket+0x12>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 80009fa:	2100      	movs	r1, #0
 80009fc:	7421      	strb	r1, [r4, #16]
  uint32_t header = *headerPtr;
 80009fe:	6837      	ldr	r7, [r6, #0]
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000a00:	3204      	adds	r2, #4
  header &= 0x0fffffffU;
 8000a02:	0138      	lsls	r0, r7, #4
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000a04:	b292      	uxth	r2, r2
 8000a06:	4694      	mov	ip, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000a08:	21ff      	movs	r1, #255	; 0xff
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a0a:	0b02      	lsrs	r2, r0, #12
 8000a0c:	4690      	mov	r8, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000a0e:	4d24      	ldr	r5, [pc, #144]	; (8000aa0 <ASPEP_sendPacket+0xe8>)
 8000a10:	4039      	ands	r1, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a12:	002a      	movs	r2, r5
 8000a14:	5c69      	ldrb	r1, [r5, r1]
 8000a16:	4645      	mov	r5, r8
 8000a18:	4069      	eors	r1, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a1a:	0d05      	lsrs	r5, r0, #20
 8000a1c:	46a8      	mov	r8, r5
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000a1e:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000a20:	5c55      	ldrb	r5, [r2, r1]
 8000a22:	4641      	mov	r1, r8
 8000a24:	404d      	eors	r5, r1
 8000a26:	b2ed      	uxtb	r5, r5
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000a28:	5d51      	ldrb	r1, [r2, r5]
 8000a2a:	0f00      	lsrs	r0, r0, #28
 8000a2c:	4041      	eors	r1, r0
 8000a2e:	481d      	ldr	r0, [pc, #116]	; (8000aa4 <ASPEP_sendPacket+0xec>)
  *headerPtr |= (uint32_t)crc << 28;
 8000a30:	5c40      	ldrb	r0, [r0, r1]
 8000a32:	0700      	lsls	r0, r0, #28
 8000a34:	4338      	orrs	r0, r7
 8000a36:	6030      	str	r0, [r6, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000a3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	d017      	beq.n	8000a70 <ASPEP_sendPacket+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a40:	b662      	cpsie	i
      if (MCTL_SYNC == dataType)
 8000a42:	2b0a      	cmp	r3, #10
 8000a44:	d009      	beq.n	8000a5a <ASPEP_sendPacket+0xa2>
  uint8_t result = ASPEP_OK;
 8000a46:	2000      	movs	r0, #0
      else if(ASPEP_CTRL == dataType)
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1be      	bne.n	80009ca <ASPEP_sendPacket+0x12>
        if (pHandle->ctrlBuffer.state != available)
 8000a4c:	3324      	adds	r3, #36	; 0x24
 8000a4e:	5ce0      	ldrb	r0, [r4, r3]
 8000a50:	2800      	cmp	r0, #0
 8000a52:	d123      	bne.n	8000a9c <ASPEP_sendPacket+0xe4>
          pHandle->ctrlBuffer.state = pending;
 8000a54:	2202      	movs	r2, #2
 8000a56:	54e2      	strb	r2, [r4, r3]
 8000a58:	e7b7      	b.n	80009ca <ASPEP_sendPacket+0x12>
        if (pHandle -> syncBuffer.state != writeLock)
 8000a5a:	3324      	adds	r3, #36	; 0x24
 8000a5c:	5ce1      	ldrb	r1, [r4, r3]
          result = ASPEP_BUFFER_ERROR;
 8000a5e:	2003      	movs	r0, #3
        if (pHandle -> syncBuffer.state != writeLock)
 8000a60:	2901      	cmp	r1, #1
 8000a62:	d1b2      	bne.n	80009ca <ASPEP_sendPacket+0x12>
          pHandle->syncBuffer.state = pending;
 8000a64:	3101      	adds	r1, #1
 8000a66:	54e1      	strb	r1, [r4, r3]
          pHandle->syncBuffer.length = bufferLength;
 8000a68:	4663      	mov	r3, ip
  uint8_t result = ASPEP_OK;
 8000a6a:	2000      	movs	r0, #0
          pHandle->syncBuffer.length = bufferLength;
 8000a6c:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8000a6e:	e7ac      	b.n	80009ca <ASPEP_sendPacket+0x12>
      if (MCTL_SYNC == dataType)
 8000a70:	2b0a      	cmp	r3, #10
 8000a72:	d00d      	beq.n	8000a90 <ASPEP_sendPacket+0xd8>
        pHandle->ctrlBuffer.state = readLock;
 8000a74:	2324      	movs	r3, #36	; 0x24
 8000a76:	2103      	movs	r1, #3
 8000a78:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000a7a:	0023      	movs	r3, r4
 8000a7c:	3320      	adds	r3, #32
 8000a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8000a80:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000a82:	4662      	mov	r2, ip
 8000a84:	0031      	movs	r1, r6
 8000a86:	6960      	ldr	r0, [r4, #20]
 8000a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a8a:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	e79c      	b.n	80009ca <ASPEP_sendPacket+0x12>
        pHandle->syncBuffer.state = readLock;
 8000a90:	3324      	adds	r3, #36	; 0x24
 8000a92:	3103      	adds	r1, #3
 8000a94:	54e1      	strb	r1, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000a96:	0023      	movs	r3, r4
 8000a98:	3328      	adds	r3, #40	; 0x28
 8000a9a:	e7f0      	b.n	8000a7e <ASPEP_sendPacket+0xc6>
          result = ASPEP_BUFFER_ERROR;
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	e794      	b.n	80009ca <ASPEP_sendPacket+0x12>
 8000aa0:	0800685c 	.word	0x0800685c
 8000aa4:	0800684c 	.word	0x0800684c

08000aa8 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000aa8:	b570      	push	{r4, r5, r6, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000aaa:	2524      	movs	r5, #36	; 0x24
 8000aac:	5d43      	ldrb	r3, [r0, r5]
{
 8000aae:	0004      	movs	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d012      	beq.n	8000ada <ASPEP_HWDataTransmittedIT+0x32>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000ab8:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000aba:	222e      	movs	r2, #46	; 0x2e
 8000abc:	5c82      	ldrb	r2, [r0, r2]
 8000abe:	2a02      	cmp	r2, #2
 8000ac0:	d011      	beq.n	8000ae6 <ASPEP_HWDataTransmittedIT+0x3e>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d11b      	bne.n	8000afe <ASPEP_HWDataTransmittedIT+0x56>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000ac6:	0001      	movs	r1, r0
 8000ac8:	3120      	adds	r1, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000aca:	6c23      	ldr	r3, [r4, #64]	; 0x40
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000acc:	6301      	str	r1, [r0, #48]	; 0x30
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000ace:	2204      	movs	r2, #4
 8000ad0:	6940      	ldr	r0, [r0, #20]
 8000ad2:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	5563      	strb	r3, [r4, r5]
      pHandle->lockBuffer = NULL;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000ad8:	bd70      	pop	{r4, r5, r6, pc}
      pHandle->ctrlBuffer.state = available;
 8000ada:	2300      	movs	r3, #0
 8000adc:	5543      	strb	r3, [r0, r5]
    if (pHandle->syncBuffer.state == pending)
 8000ade:	332e      	adds	r3, #46	; 0x2e
 8000ae0:	5cc3      	ldrb	r3, [r0, r3]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d10b      	bne.n	8000afe <ASPEP_HWDataTransmittedIT+0x56>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000ae6:	0023      	movs	r3, r4
 8000ae8:	3328      	adds	r3, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000aea:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000aec:	6323      	str	r3, [r4, #48]	; 0x30
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000aee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000af0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000af2:	6960      	ldr	r0, [r4, #20]
 8000af4:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000af6:	232e      	movs	r3, #46	; 0x2e
 8000af8:	2203      	movs	r2, #3
 8000afa:	54e2      	strb	r2, [r4, r3]
 8000afc:	e7ec      	b.n	8000ad8 <ASPEP_HWDataTransmittedIT+0x30>
      pHandle->lockBuffer = NULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	6323      	str	r3, [r4, #48]	; 0x30
}
 8000b02:	e7e9      	b.n	8000ad8 <ASPEP_HWDataTransmittedIT+0x30>

08000b04 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b06:	46de      	mov	lr, fp
 8000b08:	4657      	mov	r7, sl
 8000b0a:	464e      	mov	r6, r9
 8000b0c:	4645      	mov	r5, r8
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
 8000b0e:	2200      	movs	r2, #0
{
 8000b10:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000b12:	69c3      	ldr	r3, [r0, #28]
    *packetLength = 0;
 8000b14:	800a      	strh	r2, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000b16:	3249      	adds	r2, #73	; 0x49
{
 8000b18:	0004      	movs	r4, r0
    if (pHandle->NewPacketAvailable)
 8000b1a:	5c80      	ldrb	r0, [r0, r2]
{
 8000b1c:	b085      	sub	sp, #20
    if (pHandle->NewPacketAvailable)
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d018      	beq.n	8000b54 <ASPEP_RXframeProcess+0x50>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000b22:	2000      	movs	r0, #0
      switch (pHandle->ASPEP_State)
 8000b24:	264c      	movs	r6, #76	; 0x4c
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000b26:	54a0      	strb	r0, [r4, r2]
      switch (pHandle->ASPEP_State)
 8000b28:	5da2      	ldrb	r2, [r4, r6]
 8000b2a:	2a01      	cmp	r2, #1
 8000b2c:	d05e      	beq.n	8000bec <ASPEP_RXframeProcess+0xe8>
 8000b2e:	2a02      	cmp	r2, #2
 8000b30:	d047      	beq.n	8000bc2 <ASPEP_RXframeProcess+0xbe>
 8000b32:	2500      	movs	r5, #0
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	d038      	beq.n	8000baa <ASPEP_RXframeProcess+0xa6>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b38:	0021      	movs	r1, r4
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	6960      	ldr	r0, [r4, #20]
 8000b3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b40:	311c      	adds	r1, #28
 8000b42:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000b44:	0028      	movs	r0, r5
 8000b46:	b005      	add	sp, #20
 8000b48:	bcf0      	pop	{r4, r5, r6, r7}
 8000b4a:	46bb      	mov	fp, r7
 8000b4c:	46b2      	mov	sl, r6
 8000b4e:	46a9      	mov	r9, r5
 8000b50:	46a0      	mov	r8, r4
 8000b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000b54:	234a      	movs	r3, #74	; 0x4a
 8000b56:	5ce3      	ldrb	r3, [r4, r3]
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000b58:	2500      	movs	r5, #0
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f2      	beq.n	8000b44 <ASPEP_RXframeProcess+0x40>
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b5e:	2509      	movs	r5, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000b60:	200f      	movs	r0, #15
 8000b62:	021a      	lsls	r2, r3, #8
 8000b64:	041b      	lsls	r3, r3, #16
 8000b66:	4313      	orrs	r3, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b68:	0a1a      	lsrs	r2, r3, #8
 8000b6a:	49b6      	ldr	r1, [pc, #728]	; (8000e44 <ASPEP_RXframeProcess+0x340>)
 8000b6c:	406a      	eors	r2, r5
 8000b6e:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b70:	5c8a      	ldrb	r2, [r1, r2]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000b72:	4318      	orrs	r0, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b74:	0c1b      	lsrs	r3, r3, #16
 8000b76:	4053      	eors	r3, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000b78:	5ccb      	ldrb	r3, [r1, r3]
 8000b7a:	4ab3      	ldr	r2, [pc, #716]	; (8000e48 <ASPEP_RXframeProcess+0x344>)
  *headerPtr |= (uint32_t)crc << 28;
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	071b      	lsls	r3, r3, #28
 8000b80:	4303      	orrs	r3, r0
 8000b82:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000b86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d03e      	beq.n	8000c0a <ASPEP_RXframeProcess+0x106>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b8c:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000b8e:	2324      	movs	r3, #36	; 0x24
 8000b90:	5ce2      	ldrb	r2, [r4, r3]
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d101      	bne.n	8000b9a <ASPEP_RXframeProcess+0x96>
          pHandle->ctrlBuffer.state = pending;
 8000b96:	3202      	adds	r2, #2
 8000b98:	54e2      	strb	r2, [r4, r3]
      pHandle->badPacketFlag = ASPEP_OK;
 8000b9a:	234a      	movs	r3, #74	; 0x4a
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	54e2      	strb	r2, [r4, r3]
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000ba0:	6960      	ldr	r0, [r4, #20]
 8000ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ba4:	4798      	blx	r3
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000ba6:	2500      	movs	r5, #0
 8000ba8:	e7cc      	b.n	8000b44 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 8000baa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000bac:	2a05      	cmp	r2, #5
 8000bae:	d038      	beq.n	8000c22 <ASPEP_RXframeProcess+0x11e>
          else if (PING == pHandle->rxPacketType)
 8000bb0:	2a06      	cmp	r2, #6
 8000bb2:	d1c1      	bne.n	8000b38 <ASPEP_RXframeProcess+0x34>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000bb4:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	0020      	movs	r0, r4
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f7ff fea0 	bl	8000900 <ASPEP_sendPing>
 8000bc0:	e7ba      	b.n	8000b38 <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 8000bc2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000bc4:	2a05      	cmp	r2, #5
 8000bc6:	d100      	bne.n	8000bca <ASPEP_RXframeProcess+0xc6>
 8000bc8:	e0ac      	b.n	8000d24 <ASPEP_RXframeProcess+0x220>
          else if (PING == pHandle->rxPacketType)
 8000bca:	2a06      	cmp	r2, #6
 8000bcc:	d100      	bne.n	8000bd0 <ASPEP_RXframeProcess+0xcc>
 8000bce:	e0f1      	b.n	8000db4 <ASPEP_RXframeProcess+0x2b0>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000bd0:	2500      	movs	r5, #0
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000bd2:	2a09      	cmp	r2, #9
 8000bd4:	d1b0      	bne.n	8000b38 <ASPEP_RXframeProcess+0x34>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000bd6:	323f      	adds	r2, #63	; 0x3f
 8000bd8:	5ca3      	ldrb	r3, [r4, r2]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	54a3      	strb	r3, [r4, r2]
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000bde:	2301      	movs	r3, #1
 8000be0:	7423      	strb	r3, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000be2:	3343      	adds	r3, #67	; 0x43
 8000be4:	5ae3      	ldrh	r3, [r4, r3]
              result = pHandle->rxBuffer;
 8000be6:	69a5      	ldr	r5, [r4, #24]
              *packetLength = pHandle->rxLength;
 8000be8:	800b      	strh	r3, [r1, #0]
              result = pHandle->rxBuffer;
 8000bea:	e7a5      	b.n	8000b38 <ASPEP_RXframeProcess+0x34>
          if (BEACON == pHandle->rxPacketType)
 8000bec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000bee:	2a05      	cmp	r2, #5
 8000bf0:	d05c      	beq.n	8000cac <ASPEP_RXframeProcess+0x1a8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000bf2:	2500      	movs	r5, #0
          else if (PING == pHandle->rxPacketType)
 8000bf4:	2a06      	cmp	r2, #6
 8000bf6:	d19f      	bne.n	8000b38 <ASPEP_RXframeProcess+0x34>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 8000bf8:	0b1b      	lsrs	r3, r3, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f7ff fe7e 	bl	8000900 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000c04:	2302      	movs	r3, #2
 8000c06:	55a3      	strb	r3, [r4, r6]
 8000c08:	e796      	b.n	8000b38 <ASPEP_RXframeProcess+0x34>
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c0a:	0021      	movs	r1, r4
        pHandle->ctrlBuffer.state = readLock;
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	3324      	adds	r3, #36	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c10:	3120      	adds	r1, #32
        pHandle->ctrlBuffer.state = readLock;
 8000c12:	54e2      	strb	r2, [r4, r3]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c14:	6321      	str	r1, [r4, #48]	; 0x30
 8000c16:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c18:	6960      	ldr	r0, [r4, #20]
 8000c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c1c:	3201      	adds	r2, #1
 8000c1e:	4798      	blx	r3
 8000c20:	e7bb      	b.n	8000b9a <ASPEP_RXframeProcess+0x96>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c22:	213f      	movs	r1, #63	; 0x3f
 8000c24:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c26:	357f      	adds	r5, #127	; 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c28:	4011      	ands	r1, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c2a:	0b98      	lsrs	r0, r3, #14
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c2c:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000c2e:	4028      	ands	r0, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000c30:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c32:	2254      	movs	r2, #84	; 0x54
 8000c34:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000c36:	468c      	mov	ip, r1
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c38:	4690      	mov	r8, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c3a:	2255      	movs	r2, #85	; 0x55
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c3c:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c3e:	5ca1      	ldrb	r1, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000c40:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c42:	1c0a      	adds	r2, r1, #0
 8000c44:	4561      	cmp	r1, ip
 8000c46:	d900      	bls.n	8000c4a <ASPEP_RXframeProcess+0x146>
 8000c48:	4662      	mov	r2, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c4a:	2156      	movs	r1, #86	; 0x56
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	9201      	str	r2, [sp, #4]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c50:	5c62      	ldrb	r2, [r4, r1]
 8000c52:	1c01      	adds	r1, r0, #0
 8000c54:	4691      	mov	r9, r2
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d900      	bls.n	8000c5c <ASPEP_RXframeProcess+0x158>
 8000c5a:	1c11      	adds	r1, r2, #0
 8000c5c:	b2ca      	uxtb	r2, r1
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c5e:	2157      	movs	r1, #87	; 0x57
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000c60:	9202      	str	r2, [sp, #8]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000c62:	5c62      	ldrb	r2, [r4, r1]
 8000c64:	1c29      	adds	r1, r5, #0
 8000c66:	4692      	mov	sl, r2
 8000c68:	4295      	cmp	r5, r2
 8000c6a:	d900      	bls.n	8000c6e <ASPEP_RXframeProcess+0x16a>
 8000c6c:	1c11      	adds	r1, r2, #0
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	9203      	str	r2, [sp, #12]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000c72:	1c31      	adds	r1, r6, #0
 8000c74:	4546      	cmp	r6, r8
 8000c76:	d900      	bls.n	8000c7a <ASPEP_RXframeProcess+0x176>
 8000c78:	4641      	mov	r1, r8
 8000c7a:	9a01      	ldr	r2, [sp, #4]
 8000c7c:	0217      	lsls	r7, r2, #8
 8000c7e:	b2ca      	uxtb	r2, r1
 8000c80:	4693      	mov	fp, r2
 8000c82:	9a02      	ldr	r2, [sp, #8]
 8000c84:	0411      	lsls	r1, r2, #16
 8000c86:	465a      	mov	r2, fp
 8000c88:	433a      	orrs	r2, r7
 8000c8a:	4693      	mov	fp, r2
 8000c8c:	9a03      	ldr	r2, [sp, #12]
 8000c8e:	0617      	lsls	r7, r2, #24
 8000c90:	465a      	mov	r2, fp
 8000c92:	4311      	orrs	r1, r2
 8000c94:	4339      	orrs	r1, r7
 8000c96:	6561      	str	r1, [r4, #84]	; 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000c98:	4546      	cmp	r6, r8
 8000c9a:	d800      	bhi.n	8000c9e <ASPEP_RXframeProcess+0x19a>
 8000c9c:	e091      	b.n	8000dc2 <ASPEP_RXframeProcess+0x2be>
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	0020      	movs	r0, r4
 8000ca2:	3154      	adds	r1, #84	; 0x54
 8000ca4:	f7ff fde8 	bl	8000878 <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000ca8:	2500      	movs	r5, #0
 8000caa:	e745      	b.n	8000b38 <ASPEP_RXframeProcess+0x34>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cac:	213f      	movs	r1, #63	; 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000cae:	257f      	movs	r5, #127	; 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cb0:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000cb2:	7f26      	ldrb	r6, [r4, #28]
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000cb4:	4011      	ands	r1, r2
 8000cb6:	468c      	mov	ip, r1
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000cb8:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000cba:	0b99      	lsrs	r1, r3, #14
 8000cbc:	4029      	ands	r1, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000cbe:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cc0:	2254      	movs	r2, #84	; 0x54
 8000cc2:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000cc4:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cc6:	4690      	mov	r8, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000cc8:	2255      	movs	r2, #85	; 0x55
 8000cca:	5ca2      	ldrb	r2, [r4, r2]
 8000ccc:	1c17      	adds	r7, r2, #0
 8000cce:	4562      	cmp	r2, ip
 8000cd0:	d900      	bls.n	8000cd4 <ASPEP_RXframeProcess+0x1d0>
 8000cd2:	4667      	mov	r7, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000cd4:	2256      	movs	r2, #86	; 0x56
 8000cd6:	5ca2      	ldrb	r2, [r4, r2]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000cd8:	b2ff      	uxtb	r7, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000cda:	4691      	mov	r9, r2
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000cdc:	2257      	movs	r2, #87	; 0x57
 8000cde:	5ca2      	ldrb	r2, [r4, r2]
 8000ce0:	4692      	mov	sl, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ce2:	1c32      	adds	r2, r6, #0
 8000ce4:	4546      	cmp	r6, r8
 8000ce6:	d900      	bls.n	8000cea <ASPEP_RXframeProcess+0x1e6>
 8000ce8:	4642      	mov	r2, r8
 8000cea:	0238      	lsls	r0, r7, #8
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	4302      	orrs	r2, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000cf0:	1c08      	adds	r0, r1, #0
 8000cf2:	4549      	cmp	r1, r9
 8000cf4:	d900      	bls.n	8000cf8 <ASPEP_RXframeProcess+0x1f4>
 8000cf6:	4648      	mov	r0, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000cf8:	b2c0      	uxtb	r0, r0
 8000cfa:	0400      	lsls	r0, r0, #16
 8000cfc:	9001      	str	r0, [sp, #4]
 8000cfe:	4853      	ldr	r0, [pc, #332]	; (8000e4c <ASPEP_RXframeProcess+0x348>)
 8000d00:	4002      	ands	r2, r0
 8000d02:	9801      	ldr	r0, [sp, #4]
 8000d04:	4302      	orrs	r2, r0
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d06:	1c28      	adds	r0, r5, #0
 8000d08:	4555      	cmp	r5, sl
 8000d0a:	d900      	bls.n	8000d0e <ASPEP_RXframeProcess+0x20a>
 8000d0c:	4650      	mov	r0, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d0e:	0212      	lsls	r2, r2, #8
 8000d10:	0600      	lsls	r0, r0, #24
 8000d12:	0a12      	lsrs	r2, r2, #8
 8000d14:	4302      	orrs	r2, r0
 8000d16:	6562      	str	r2, [r4, #84]	; 0x54
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000d18:	4546      	cmp	r6, r8
 8000d1a:	d974      	bls.n	8000e06 <ASPEP_RXframeProcess+0x302>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000d1c:	234c      	movs	r3, #76	; 0x4c
 8000d1e:	2200      	movs	r2, #0
 8000d20:	54e2      	strb	r2, [r4, r3]
 8000d22:	e7bc      	b.n	8000c9e <ASPEP_RXframeProcess+0x19a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d24:	213f      	movs	r1, #63	; 0x3f
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d26:	257f      	movs	r5, #127	; 0x7f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d28:	7f62      	ldrb	r2, [r4, #29]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d2a:	0b98      	lsrs	r0, r3, #14
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000d2c:	4011      	ands	r1, r2
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d2e:	0d5a      	lsrs	r2, r3, #21
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000d30:	4028      	ands	r0, r5
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000d32:	4015      	ands	r5, r2
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d34:	2254      	movs	r2, #84	; 0x54
 8000d36:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d38:	7f26      	ldrb	r6, [r4, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d3a:	4694      	mov	ip, r2
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d3c:	2255      	movs	r2, #85	; 0x55
 8000d3e:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000d40:	09f6      	lsrs	r6, r6, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000d42:	1c17      	adds	r7, r2, #0
 8000d44:	428a      	cmp	r2, r1
 8000d46:	d900      	bls.n	8000d4a <ASPEP_RXframeProcess+0x246>
 8000d48:	1c0f      	adds	r7, r1, #0
 8000d4a:	b2fa      	uxtb	r2, r7
 8000d4c:	9201      	str	r2, [sp, #4]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d4e:	2256      	movs	r2, #86	; 0x56
 8000d50:	5ca2      	ldrb	r2, [r4, r2]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d52:	46b3      	mov	fp, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d54:	4690      	mov	r8, r2
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d56:	2257      	movs	r2, #87	; 0x57
 8000d58:	5ca2      	ldrb	r2, [r4, r2]
 8000d5a:	4691      	mov	r9, r2
 8000d5c:	2254      	movs	r2, #84	; 0x54
 8000d5e:	4692      	mov	sl, r2
 8000d60:	44a2      	add	sl, r4
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d62:	4566      	cmp	r6, ip
 8000d64:	d900      	bls.n	8000d68 <ASPEP_RXframeProcess+0x264>
 8000d66:	46e3      	mov	fp, ip
 8000d68:	465f      	mov	r7, fp
 8000d6a:	9a01      	ldr	r2, [sp, #4]
 8000d6c:	b2ff      	uxtb	r7, r7
 8000d6e:	0212      	lsls	r2, r2, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d70:	4683      	mov	fp, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d72:	433a      	orrs	r2, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000d74:	4540      	cmp	r0, r8
 8000d76:	d900      	bls.n	8000d7a <ASPEP_RXframeProcess+0x276>
 8000d78:	46c3      	mov	fp, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d7a:	465f      	mov	r7, fp
 8000d7c:	b2ff      	uxtb	r7, r7
 8000d7e:	043f      	lsls	r7, r7, #16
 8000d80:	46bb      	mov	fp, r7
 8000d82:	4f32      	ldr	r7, [pc, #200]	; (8000e4c <ASPEP_RXframeProcess+0x348>)
 8000d84:	403a      	ands	r2, r7
 8000d86:	465f      	mov	r7, fp
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d88:	46ab      	mov	fp, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d8a:	433a      	orrs	r2, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000d8c:	454d      	cmp	r5, r9
 8000d8e:	d900      	bls.n	8000d92 <ASPEP_RXframeProcess+0x28e>
 8000d90:	46cb      	mov	fp, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000d92:	465f      	mov	r7, fp
 8000d94:	0212      	lsls	r2, r2, #8
 8000d96:	063f      	lsls	r7, r7, #24
 8000d98:	0a12      	lsrs	r2, r2, #8
 8000d9a:	433a      	orrs	r2, r7
 8000d9c:	6562      	str	r2, [r4, #84]	; 0x54
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000d9e:	2200      	movs	r2, #0
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000da0:	4566      	cmp	r6, ip
 8000da2:	d93e      	bls.n	8000e22 <ASPEP_RXframeProcess+0x31e>
 8000da4:	234c      	movs	r3, #76	; 0x4c
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000da6:	4651      	mov	r1, sl
 8000da8:	0020      	movs	r0, r4
 8000daa:	54e2      	strb	r2, [r4, r3]
 8000dac:	f7ff fd64 	bl	8000878 <ASPEP_sendBeacon>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000db0:	2500      	movs	r5, #0
 8000db2:	e6c1      	b.n	8000b38 <ASPEP_RXframeProcess+0x34>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000db4:	2101      	movs	r1, #1
 8000db6:	0020      	movs	r0, r4
 8000db8:	7f62      	ldrb	r2, [r4, #29]
 8000dba:	f7ff fda1 	bl	8000900 <ASPEP_sendPing>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000dbe:	2500      	movs	r5, #0
 8000dc0:	e6ba      	b.n	8000b38 <ASPEP_RXframeProcess+0x34>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000dc2:	9a01      	ldr	r2, [sp, #4]
 8000dc4:	4594      	cmp	ip, r2
 8000dc6:	d900      	bls.n	8000dca <ASPEP_RXframeProcess+0x2c6>
 8000dc8:	e769      	b.n	8000c9e <ASPEP_RXframeProcess+0x19a>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000dca:	4548      	cmp	r0, r9
 8000dcc:	d900      	bls.n	8000dd0 <ASPEP_RXframeProcess+0x2cc>
 8000dce:	e766      	b.n	8000c9e <ASPEP_RXframeProcess+0x19a>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000dd0:	4555      	cmp	r5, sl
 8000dd2:	d900      	bls.n	8000dd6 <ASPEP_RXframeProcess+0x2d2>
 8000dd4:	e763      	b.n	8000c9e <ASPEP_RXframeProcess+0x19a>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000dd6:	2158      	movs	r1, #88	; 0x58
 8000dd8:	5c61      	ldrb	r1, [r4, r1]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000dda:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000ddc:	0f5b      	lsrs	r3, r3, #29
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d000      	beq.n	8000de4 <ASPEP_RXframeProcess+0x2e0>
 8000de2:	e75c      	b.n	8000c9e <ASPEP_RXframeProcess+0x19a>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000de4:	9b02      	ldr	r3, [sp, #8]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000de6:	3201      	adds	r2, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000de8:	3301      	adds	r3, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	015b      	lsls	r3, r3, #5
 8000dee:	81a3      	strh	r3, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000df0:	9b03      	ldr	r3, [sp, #12]
 8000df2:	019b      	lsls	r3, r3, #6
 8000df4:	81e3      	strh	r3, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000df6:	b2d3      	uxtb	r3, r2
 8000df8:	2246      	movs	r2, #70	; 0x46
 8000dfa:	015b      	lsls	r3, r3, #5
 8000dfc:	52a3      	strh	r3, [r4, r2]
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000dfe:	234c      	movs	r3, #76	; 0x4c
 8000e00:	3a45      	subs	r2, #69	; 0x45
 8000e02:	54e2      	strb	r2, [r4, r3]
 8000e04:	e74b      	b.n	8000c9e <ASPEP_RXframeProcess+0x19a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000e06:	45bc      	cmp	ip, r7
 8000e08:	d888      	bhi.n	8000d1c <ASPEP_RXframeProcess+0x218>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000e0a:	4549      	cmp	r1, r9
 8000e0c:	d886      	bhi.n	8000d1c <ASPEP_RXframeProcess+0x218>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000e0e:	4555      	cmp	r5, sl
 8000e10:	d884      	bhi.n	8000d1c <ASPEP_RXframeProcess+0x218>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e12:	2258      	movs	r2, #88	; 0x58
 8000e14:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000e16:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e18:	0f5b      	lsrs	r3, r3, #29
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d000      	beq.n	8000e20 <ASPEP_RXframeProcess+0x31c>
 8000e1e:	e77d      	b.n	8000d1c <ASPEP_RXframeProcess+0x218>
 8000e20:	e73d      	b.n	8000c9e <ASPEP_RXframeProcess+0x19a>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000e22:	9e01      	ldr	r6, [sp, #4]
 8000e24:	42b1      	cmp	r1, r6
 8000e26:	d8bd      	bhi.n	8000da4 <ASPEP_RXframeProcess+0x2a0>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000e28:	4540      	cmp	r0, r8
 8000e2a:	d8bb      	bhi.n	8000da4 <ASPEP_RXframeProcess+0x2a0>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000e2c:	454d      	cmp	r5, r9
 8000e2e:	d8b9      	bhi.n	8000da4 <ASPEP_RXframeProcess+0x2a0>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e30:	3258      	adds	r2, #88	; 0x58
 8000e32:	5ca2      	ldrb	r2, [r4, r2]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000e34:	065b      	lsls	r3, r3, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000e36:	0f5b      	lsrs	r3, r3, #29
 8000e38:	1ad2      	subs	r2, r2, r3
 8000e3a:	4253      	negs	r3, r2
 8000e3c:	415a      	adcs	r2, r3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	e7b0      	b.n	8000da4 <ASPEP_RXframeProcess+0x2a0>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	0800685c 	.word	0x0800685c
 8000e48:	0800684c 	.word	0x0800684c
 8000e4c:	ff00ffff 	.word	0xff00ffff

08000e50 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000e50:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000e52:	254d      	movs	r5, #77	; 0x4d
 8000e54:	5d43      	ldrb	r3, [r0, r5]
{
 8000e56:	0004      	movs	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <ASPEP_HWDataReceivedIT+0x1a>
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d103      	bne.n	8000e68 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000e60:	2200      	movs	r2, #0
 8000e62:	5542      	strb	r2, [r0, r5]
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000e64:	3249      	adds	r2, #73	; 0x49
 8000e66:	5483      	strb	r3, [r0, r2]
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000e68:	bd70      	pop	{r4, r5, r6, pc}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <ASPEP_HWDataReceivedIT+0x98>)
 8000e6c:	7f01      	ldrb	r1, [r0, #28]
 8000e6e:	69c2      	ldr	r2, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000e70:	5c59      	ldrb	r1, [r3, r1]
 8000e72:	0a10      	lsrs	r0, r2, #8
 8000e74:	4041      	eors	r1, r0
 8000e76:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000e78:	5c59      	ldrb	r1, [r3, r1]
 8000e7a:	0c10      	lsrs	r0, r2, #16
 8000e7c:	4041      	eors	r1, r0
 8000e7e:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000e80:	5c59      	ldrb	r1, [r3, r1]
 8000e82:	0e12      	lsrs	r2, r2, #24
 8000e84:	404a      	eors	r2, r1
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000e86:	5c9b      	ldrb	r3, [r3, r2]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d10b      	bne.n	8000ea4 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000e8c:	7f22      	ldrb	r2, [r4, #28]
 8000e8e:	330f      	adds	r3, #15
 8000e90:	4013      	ands	r3, r2
 8000e92:	6523      	str	r3, [r4, #80]	; 0x50
          switch (pHandle->rxPacketType)
 8000e94:	2b06      	cmp	r3, #6
 8000e96:	d809      	bhi.n	8000eac <ASPEP_HWDataReceivedIT+0x5c>
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d81d      	bhi.n	8000ed8 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000e9c:	234a      	movs	r3, #74	; 0x4a
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	54e2      	strb	r2, [r4, r3]
              break;
 8000ea2:	e7e1      	b.n	8000e68 <ASPEP_HWDataReceivedIT+0x18>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000ea4:	234a      	movs	r3, #74	; 0x4a
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	54e2      	strb	r2, [r4, r3]
 8000eaa:	e7dd      	b.n	8000e68 <ASPEP_HWDataReceivedIT+0x18>
 8000eac:	2b09      	cmp	r3, #9
 8000eae:	d1f5      	bne.n	8000e9c <ASPEP_HWDataReceivedIT+0x4c>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000eb0:	8ba2      	ldrh	r2, [r4, #28]
 8000eb2:	333b      	adds	r3, #59	; 0x3b
 8000eb4:	0912      	lsrs	r2, r2, #4
 8000eb6:	52e2      	strh	r2, [r4, r3]
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000eb8:	d00e      	beq.n	8000ed8 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000eba:	2346      	movs	r3, #70	; 0x46
 8000ebc:	5ae3      	ldrh	r3, [r4, r3]
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d30e      	bcc.n	8000ee0 <ASPEP_HWDataReceivedIT+0x90>
                                        (pHandle->rxLength + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 8000ec2:	2354      	movs	r3, #84	; 0x54
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000ec4:	5ce3      	ldrb	r3, [r4, r3]
 8000ec6:	69a1      	ldr	r1, [r4, #24]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	18d2      	adds	r2, r2, r3
 8000ecc:	6960      	ldr	r0, [r4, #20]
 8000ece:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ed0:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	5563      	strb	r3, [r4, r5]
 8000ed6:	e7c7      	b.n	8000e68 <ASPEP_HWDataReceivedIT+0x18>
              pHandle->NewPacketAvailable = true;
 8000ed8:	2349      	movs	r3, #73	; 0x49
 8000eda:	2201      	movs	r2, #1
 8000edc:	54e2      	strb	r2, [r4, r3]
              break;
 8000ede:	e7c3      	b.n	8000e68 <ASPEP_HWDataReceivedIT+0x18>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000ee0:	234a      	movs	r3, #74	; 0x4a
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	54e2      	strb	r2, [r4, r3]
 8000ee6:	e7bf      	b.n	8000e68 <ASPEP_HWDataReceivedIT+0x18>
 8000ee8:	0800685c 	.word	0x0800685c

08000eec <ASPEP_HWDMAReset>:
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000eec:	224d      	movs	r2, #77	; 0x4d
 8000eee:	2100      	movs	r1, #0
{
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	0003      	movs	r3, r0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000ef4:	5481      	strb	r1, [r0, r2]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000ef6:	0001      	movs	r1, r0
 8000ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efa:	6940      	ldr	r0, [r0, #20]
 8000efc:	311c      	adds	r1, #28
 8000efe:	3a49      	subs	r2, #73	; 0x49
 8000f00:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000f02:	bd10      	pop	{r4, pc}

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b510      	push	{r4, lr}
 8000f06:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f08:	2228      	movs	r2, #40	; 0x28
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	a80a      	add	r0, sp, #40	; 0x28
 8000f0e:	f005 fc5b 	bl	80067c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f12:	2210      	movs	r2, #16
 8000f14:	2100      	movs	r1, #0
 8000f16:	4668      	mov	r0, sp
 8000f18:	f005 fc56 	bl	80067c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	2100      	movs	r1, #0
 8000f20:	a804      	add	r0, sp, #16
 8000f22:	f005 fc51 	bl	80067c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000f26:	2211      	movs	r2, #17
 8000f28:	2301      	movs	r3, #1
 8000f2a:	9208      	str	r2, [sp, #32]
 8000f2c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000f2e:	2310      	movs	r3, #16
 8000f30:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	2202      	movs	r2, #2
 8000f36:	025b      	lsls	r3, r3, #9
 8000f38:	9210      	str	r2, [sp, #64]	; 0x40
 8000f3a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f3c:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f3e:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f40:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f42:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f44:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f46:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f003 feae 	bl	8004ca8 <HAL_RCC_OscConfig>
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f56:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f58:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f5a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5c:	3b05      	subs	r3, #5
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f64:	f004 f8fa 	bl	800515c <HAL_RCC_ClockConfig>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x6c>
 8000f6c:	b672      	cpsid	i
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <SystemClock_Config+0x6a>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f70:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f72:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f74:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f76:	f004 f9eb 	bl	8005350 <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x7e>
 8000f7e:	b672      	cpsid	i
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <SystemClock_Config+0x7c>
  HAL_RCC_EnableCSS();
 8000f82:	f004 f99b 	bl	80052bc <HAL_RCC_EnableCSS>
}
 8000f86:	b014      	add	sp, #80	; 0x50
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <main>:
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	46de      	mov	lr, fp
 8000f90:	4645      	mov	r5, r8
 8000f92:	4657      	mov	r7, sl
 8000f94:	464e      	mov	r6, r9
 8000f96:	b5e0      	push	{r5, r6, r7, lr}
 8000f98:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 8000f9a:	f003 fb91 	bl	80046c0 <HAL_Init>
  SystemClock_Config();
 8000f9e:	f7ff ffb1 	bl	8000f04 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	2214      	movs	r2, #20
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	a80f      	add	r0, sp, #60	; 0x3c
 8000fa8:	f005 fc0e 	bl	80067c8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	4ec2      	ldr	r6, [pc, #776]	; (80012b8 <main+0x32c>)
 8000fb0:	0312      	lsls	r2, r2, #12
 8000fb2:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8000fb4:	2580      	movs	r5, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	6173      	str	r3, [r6, #20]
 8000fba:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8000fbc:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4013      	ands	r3, r2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc0:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc6:	6973      	ldr	r3, [r6, #20]
 8000fc8:	03d2      	lsls	r2, r2, #15
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	6173      	str	r3, [r6, #20]
 8000fce:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8000fd0:	012d      	lsls	r5, r5, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd2:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd6:	9303      	str	r3, [sp, #12]
 8000fd8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	6973      	ldr	r3, [r6, #20]
 8000fdc:	0292      	lsls	r2, r2, #10
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	6173      	str	r3, [r6, #20]
 8000fe2:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8000fe4:	0029      	movs	r1, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	9304      	str	r3, [sp, #16]
 8000fec:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	6973      	ldr	r3, [r6, #20]
 8000ff0:	02d2      	lsls	r2, r2, #11
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	6173      	str	r3, [r6, #20]
 8000ff6:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8000ff8:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8001002:	f003 fe4b 	bl	8004c9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800100c:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100e:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001010:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001012:	48aa      	ldr	r0, [pc, #680]	; (80012bc <main+0x330>)
 8001014:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001016:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800101a:	f003 fd41 	bl	8004aa0 <HAL_GPIO_Init>
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 800101e:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2700      	movs	r7, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001022:	2302      	movs	r3, #2
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8001024:	a90f      	add	r1, sp, #60	; 0x3c
 8001026:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001028:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = M1_EN_DRIVER_Pin;
 800102c:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8001030:	f003 fd36 	bl	8004aa0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001034:	6973      	ldr	r3, [r6, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001038:	4323      	orrs	r3, r4
 800103a:	6173      	str	r3, [r6, #20]
 800103c:	6973      	ldr	r3, [r6, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001040:	4023      	ands	r3, r4
 8001042:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001044:	a80f      	add	r0, sp, #60	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001048:	f005 fbbe 	bl	80067c8 <memset>
  hadc.Instance = ADC1;
 800104c:	4e9c      	ldr	r6, [pc, #624]	; (80012c0 <main+0x334>)
 800104e:	4b9d      	ldr	r3, [pc, #628]	; (80012c4 <main+0x338>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001050:	6077      	str	r7, [r6, #4]
  hadc.Instance = ADC1;
 8001052:	6033      	str	r3, [r6, #0]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001054:	2320      	movs	r3, #32
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	60b7      	str	r7, [r6, #8]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001058:	61b7      	str	r7, [r6, #24]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800105a:	61f7      	str	r7, [r6, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800105c:	2780      	movs	r7, #128	; 0x80
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800105e:	4698      	mov	r8, r3
 8001060:	60f3      	str	r3, [r6, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001062:	3b1c      	subs	r3, #28
 8001064:	6173      	str	r3, [r6, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001066:	00ff      	lsls	r7, r7, #3
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001068:	3320      	adds	r3, #32
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800106a:	0030      	movs	r0, r6
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800106c:	6134      	str	r4, [r6, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800106e:	6237      	str	r7, [r6, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001070:	54f4      	strb	r4, [r6, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001072:	62b4      	str	r4, [r6, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001074:	f003 fb46 	bl	8004704 <HAL_ADC_Init>
 8001078:	2800      	cmp	r0, #0
 800107a:	d001      	beq.n	8001080 <main+0xf4>
 800107c:	b672      	cpsid	i
  while (1)
 800107e:	e7fe      	b.n	800107e <main+0xf2>
  sConfig.Channel = ADC_CHANNEL_5;
 8001080:	2305      	movs	r3, #5
 8001082:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001084:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001086:	0030      	movs	r0, r6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001088:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800108a:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800108c:	469a      	mov	sl, r3
 800108e:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001090:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001092:	f003 fbdf 	bl	8004854 <HAL_ADC_ConfigChannel>
 8001096:	2800      	cmp	r0, #0
 8001098:	d001      	beq.n	800109e <main+0x112>
 800109a:	b672      	cpsid	i
  while (1)
 800109c:	e7fe      	b.n	800109c <main+0x110>
  sConfig.Channel = ADC_CHANNEL_9;
 800109e:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a0:	0030      	movs	r0, r6
 80010a2:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Channel = ADC_CHANNEL_9;
 80010a4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a6:	f003 fbd5 	bl	8004854 <HAL_ADC_ConfigChannel>
 80010aa:	4683      	mov	fp, r0
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d001      	beq.n	80010b4 <main+0x128>
 80010b0:	b672      	cpsid	i
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <main+0x126>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	0001      	movs	r1, r0
 80010b6:	2208      	movs	r2, #8
 80010b8:	a806      	add	r0, sp, #24
 80010ba:	f005 fb85 	bl	80067c8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010be:	221c      	movs	r2, #28
 80010c0:	4659      	mov	r1, fp
 80010c2:	a808      	add	r0, sp, #32
 80010c4:	f005 fb80 	bl	80067c8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010c8:	2220      	movs	r2, #32
 80010ca:	4659      	mov	r1, fp
 80010cc:	a80f      	add	r0, sp, #60	; 0x3c
 80010ce:	f005 fb7b 	bl	80067c8 <memset>
  htim1.Instance = TIM1;
 80010d2:	4b7d      	ldr	r3, [pc, #500]	; (80012c8 <main+0x33c>)
 80010d4:	4699      	mov	r9, r3
 80010d6:	464a      	mov	r2, r9
 80010d8:	4b7c      	ldr	r3, [pc, #496]	; (80012cc <main+0x340>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010da:	4648      	mov	r0, r9
  htim1.Instance = TIM1;
 80010dc:	6013      	str	r3, [r2, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80010de:	464b      	mov	r3, r9
 80010e0:	465a      	mov	r2, fp
 80010e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80010e4:	464a      	mov	r2, r9
 80010e6:	2340      	movs	r3, #64	; 0x40
 80010e8:	6093      	str	r3, [r2, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80010ea:	4b79      	ldr	r3, [pc, #484]	; (80012d0 <main+0x344>)
 80010ec:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	464b      	mov	r3, r9
 80010f2:	0052      	lsls	r2, r2, #1
 80010f4:	611a      	str	r2, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	465a      	mov	r2, fp
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80010f8:	615c      	str	r4, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010fc:	f004 f9c6 	bl	800548c <HAL_TIM_PWM_Init>
 8001100:	2800      	cmp	r0, #0
 8001102:	d001      	beq.n	8001108 <main+0x17c>
 8001104:	b672      	cpsid	i
  while (1)
 8001106:	e7fe      	b.n	8001106 <main+0x17a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001108:	4643      	mov	r3, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800110c:	a906      	add	r1, sp, #24
 800110e:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001110:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001112:	f004 fbf3 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	1e02      	subs	r2, r0, #0
 8001118:	d001      	beq.n	800111e <main+0x192>
 800111a:	b672      	cpsid	i
  while (1)
 800111c:	e7fe      	b.n	800111c <main+0x190>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111e:	2360      	movs	r3, #96	; 0x60
 8001120:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001122:	4b6c      	ldr	r3, [pc, #432]	; (80012d4 <main+0x348>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001124:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001126:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001128:	2302      	movs	r3, #2
 800112a:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800112c:	3306      	adds	r3, #6
 800112e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001130:	33f8      	adds	r3, #248	; 0xf8
 8001132:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001134:	3301      	adds	r3, #1
 8001136:	33ff      	adds	r3, #255	; 0xff
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001138:	4648      	mov	r0, r9
 800113a:	a908      	add	r1, sp, #32
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800113c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	f004 fabd 	bl	80056bc <HAL_TIM_PWM_ConfigChannel>
 8001142:	2800      	cmp	r0, #0
 8001144:	d001      	beq.n	800114a <main+0x1be>
 8001146:	b672      	cpsid	i
  while (1)
 8001148:	e7fe      	b.n	8001148 <main+0x1bc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800114a:	2204      	movs	r2, #4
 800114c:	4648      	mov	r0, r9
 800114e:	a908      	add	r1, sp, #32
 8001150:	f004 fab4 	bl	80056bc <HAL_TIM_PWM_ConfigChannel>
 8001154:	2800      	cmp	r0, #0
 8001156:	d001      	beq.n	800115c <main+0x1d0>
 8001158:	b672      	cpsid	i
  while (1)
 800115a:	e7fe      	b.n	800115a <main+0x1ce>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800115c:	2208      	movs	r2, #8
 800115e:	4648      	mov	r0, r9
 8001160:	a908      	add	r1, sp, #32
 8001162:	f004 faab 	bl	80056bc <HAL_TIM_PWM_ConfigChannel>
 8001166:	2800      	cmp	r0, #0
 8001168:	d001      	beq.n	800116e <main+0x1e2>
 800116a:	b672      	cpsid	i
  while (1)
 800116c:	e7fe      	b.n	800116c <main+0x1e0>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800116e:	2370      	movs	r3, #112	; 0x70
 8001170:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001172:	4b59      	ldr	r3, [pc, #356]	; (80012d8 <main+0x34c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001174:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001176:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001178:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800117a:	220c      	movs	r2, #12
 800117c:	4648      	mov	r0, r9
 800117e:	a908      	add	r1, sp, #32
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001180:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001182:	f004 fa9b 	bl	80056bc <HAL_TIM_PWM_ConfigChannel>
 8001186:	2800      	cmp	r0, #0
 8001188:	d001      	beq.n	800118e <main+0x202>
 800118a:	b672      	cpsid	i
  while (1)
 800118c:	e7fe      	b.n	800118c <main+0x200>
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 800118e:	230e      	movs	r3, #14
 8001190:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001192:	4653      	mov	r3, sl
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001194:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001196:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001198:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800119a:	a90f      	add	r1, sp, #60	; 0x3c
 800119c:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800119e:	950f      	str	r5, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80011a0:	9710      	str	r7, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80011a2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011a4:	f004 fbd8 	bl	8005958 <HAL_TIMEx_ConfigBreakDeadTime>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d001      	beq.n	80011b0 <main+0x224>
 80011ac:	b672      	cpsid	i
  while (1)
 80011ae:	e7fe      	b.n	80011ae <main+0x222>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	2708      	movs	r7, #8
  HAL_TIM_MspPostInit(&htim1);
 80011b2:	4648      	mov	r0, r9
 80011b4:	f003 f840 	bl	8004238 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80011b8:	221c      	movs	r2, #28
 80011ba:	2100      	movs	r1, #0
 80011bc:	a810      	add	r0, sp, #64	; 0x40
 80011be:	f005 fb03 	bl	80067c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	003a      	movs	r2, r7
 80011c4:	2100      	movs	r1, #0
 80011c6:	a808      	add	r0, sp, #32
 80011c8:	f005 fafe 	bl	80067c8 <memset>
  htim2.Instance = TIM2;
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	4c43      	ldr	r4, [pc, #268]	; (80012dc <main+0x350>)
 80011d0:	05db      	lsls	r3, r3, #23
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011d2:	2601      	movs	r6, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011d4:	2503      	movs	r5, #3
  htim2.Instance = TIM2;
 80011d6:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 80011d8:	2300      	movs	r3, #0
  htim2.Init.Period = M1_PULSE_NBR;
 80011da:	4a41      	ldr	r2, [pc, #260]	; (80012e0 <main+0x354>)
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011dc:	0020      	movs	r0, r4
 80011de:	a90f      	add	r1, sp, #60	; 0x3c
  htim2.Init.Prescaler = 0;
 80011e0:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = M1_PULSE_NBR;
 80011e4:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	61a3      	str	r3, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ea:	950f      	str	r5, [sp, #60]	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011ec:	9611      	str	r6, [sp, #68]	; 0x44
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80011ee:	9713      	str	r7, [sp, #76]	; 0x4c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011f0:	9615      	str	r6, [sp, #84]	; 0x54
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 80011f2:	9717      	str	r7, [sp, #92]	; 0x5c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011f4:	f004 f9c2 	bl	800557c <HAL_TIM_Encoder_Init>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d001      	beq.n	8001200 <main+0x274>
 80011fc:	b672      	cpsid	i
  while (1)
 80011fe:	e7fe      	b.n	80011fe <main+0x272>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001204:	a908      	add	r1, sp, #32
 8001206:	0020      	movs	r0, r4
 8001208:	f004 fb78 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 800120c:	1e02      	subs	r2, r0, #0
 800120e:	d001      	beq.n	8001214 <main+0x288>
 8001210:	b672      	cpsid	i
  while (1)
 8001212:	e7fe      	b.n	8001212 <main+0x286>
  huart1.Instance = USART1;
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <main+0x358>)
 8001216:	4934      	ldr	r1, [pc, #208]	; (80012e8 <main+0x35c>)
 8001218:	0018      	movs	r0, r3
 800121a:	6019      	str	r1, [r3, #0]
  huart1.Init.BaudRate = 1843200;
 800121c:	23e1      	movs	r3, #225	; 0xe1
 800121e:	035b      	lsls	r3, r3, #13
 8001220:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001222:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001224:	6082      	str	r2, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001226:	60c2      	str	r2, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001228:	6102      	str	r2, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800122a:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122c:	6182      	str	r2, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800122e:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001230:	6202      	str	r2, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	6242      	str	r2, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001234:	f004 fd78 	bl	8005d28 <HAL_UART_Init>
 8001238:	1e04      	subs	r4, r0, #0
 800123a:	d001      	beq.n	8001240 <main+0x2b4>
 800123c:	b672      	cpsid	i
  while (1)
 800123e:	e7fe      	b.n	800123e <main+0x2b2>
  MX_MotorControl_Init();
 8001240:	f000 fff0 	bl	8002224 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001244:	0022      	movs	r2, r4
 8001246:	0029      	movs	r1, r5
 8001248:	201b      	movs	r0, #27
 800124a:	f003 fb97 	bl	800497c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800124e:	201b      	movs	r0, #27
 8001250:	f003 fbc6 	bl	80049e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001254:	0022      	movs	r2, r4
 8001256:	0031      	movs	r1, r6
 8001258:	2009      	movs	r0, #9
 800125a:	f003 fb8f 	bl	800497c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800125e:	2009      	movs	r0, #9
 8001260:	f003 fbbe 	bl	80049e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001264:	0022      	movs	r2, r4
 8001266:	0021      	movs	r1, r4
 8001268:	200b      	movs	r0, #11
 800126a:	f003 fb87 	bl	800497c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800126e:	200b      	movs	r0, #11
 8001270:	f003 fbb6 	bl	80049e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8001274:	0022      	movs	r2, r4
 8001276:	0029      	movs	r1, r5
 8001278:	200a      	movs	r0, #10
 800127a:	f003 fb7f 	bl	800497c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800127e:	200a      	movs	r0, #10
 8001280:	f003 fbae 	bl	80049e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001284:	0022      	movs	r2, r4
 8001286:	0021      	movs	r1, r4
 8001288:	200d      	movs	r0, #13
 800128a:	f003 fb77 	bl	800497c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800128e:	200d      	movs	r0, #13
 8001290:	f003 fba6 	bl	80049e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001294:	0022      	movs	r2, r4
 8001296:	0029      	movs	r1, r5
 8001298:	200f      	movs	r0, #15
 800129a:	f003 fb6f 	bl	800497c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800129e:	200f      	movs	r0, #15
 80012a0:	f003 fb9e 	bl	80049e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80012a4:	2007      	movs	r0, #7
 80012a6:	0022      	movs	r2, r4
 80012a8:	0029      	movs	r1, r5
 80012aa:	f003 fb67 	bl	800497c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80012ae:	2007      	movs	r0, #7
 80012b0:	f003 fb96 	bl	80049e0 <HAL_NVIC_EnableIRQ>
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <main+0x328>
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000800 	.word	0x48000800
 80012c0:	200003a4 	.word	0x200003a4
 80012c4:	40012400 	.word	0x40012400
 80012c8:	20000538 	.word	0x20000538
 80012cc:	40012c00 	.word	0x40012c00
 80012d0:	000005dc 	.word	0x000005dc
 80012d4:	000002ee 	.word	0x000002ee
 80012d8:	0000059e 	.word	0x0000059e
 80012dc:	20000580 	.word	0x20000580
 80012e0:	00000fff 	.word	0x00000fff
 80012e4:	200005c8 	.word	0x200005c8
 80012e8:	40013800 	.word	0x40013800

080012ec <Error_Handler>:
 80012ec:	b672      	cpsid	i
  while (1)
 80012ee:	e7fe      	b.n	80012ee <Error_Handler+0x2>

080012f0 <MC_StartMotor1>:
  * Note also that if the startup sequence fails the #RUN state may never be reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 80012f0:	b510      	push	{r4, lr}
  return (MCI_StartMotor(pMCI[M1]));
 80012f2:	4b02      	ldr	r3, [pc, #8]	; (80012fc <MC_StartMotor1+0xc>)
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	f000 f885 	bl	8001404 <MCI_StartMotor>
}
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	200007d8 	.word	0x200007d8

08001300 <MC_StopMotor1>:
  * machine and check if the #IDLE state has been reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8001300:	b510      	push	{r4, lr}
  return (MCI_StopMotor(pMCI[M1]));
 8001302:	4b02      	ldr	r3, [pc, #8]	; (800130c <MC_StopMotor1+0xc>)
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	f000 f8af 	bl	8001468 <MCI_StopMotor>
}
 800130a:	bd10      	pop	{r4, pc}
 800130c:	200007d8 	.word	0x200007d8

08001310 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
 8001310:	b510      	push	{r4, lr}
  return (MCI_GetSTMState(pMCI[M1]));
 8001312:	4b02      	ldr	r3, [pc, #8]	; (800131c <MC_GetSTMStateMotor1+0xc>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f000 f86f 	bl	80013f8 <MCI_GetSTMState>
}
 800131a:	bd10      	pop	{r4, pc}
 800131c:	200007d8 	.word	0x200007d8

08001320 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8001320:	2002      	movs	r0, #2
 8001322:	4770      	bx	lr

08001324 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001324:	4770      	bx	lr
 8001326:	46c0      	nop			; (mov r8, r8)

08001328 <MC_APP_PostMediumFrequencyHook_M1>:
 8001328:	4770      	bx	lr
 800132a:	46c0      	nop			; (mov r8, r8)

0800132c <MCI_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;
 800132c:	6083      	str	r3, [r0, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800132e:	2300      	movs	r3, #0
    pHandle->pFOCVars = pFOCVars;
 8001330:	6042      	str	r2, [r0, #4]
    pHandle->hFinalSpeed = 0;
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001332:	2200      	movs	r2, #0
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001334:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8001336:	81c3      	strh	r3, [r0, #14]
    pHandle->hFinalTorque = 0;
 8001338:	8203      	strh	r3, [r0, #16]
    pHandle->hDurationms = 0;
 800133a:	61c3      	str	r3, [r0, #28]
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 800133c:	6203      	str	r3, [r0, #32]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800133e:	3324      	adds	r3, #36	; 0x24
    pHandle->pSTC = pSTC;
 8001340:	6001      	str	r1, [r0, #0]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001342:	54c2      	strb	r2, [r0, r3]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001344:	4770      	bx	lr
 8001346:	46c0      	nop			; (mov r8, r8)

08001348 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001348:	2301      	movs	r3, #1
 800134a:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <MCI_ExecSpeedRamp+0x10>)
    pHandle->hFinalSpeed = hFinalSpeed;
 800134e:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8001350:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001352:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001354:	4770      	bx	lr
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	00000301 	.word	0x00000301

0800135c <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 800135c:	2302      	movs	r3, #2
 800135e:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <MCI_ExecTorqueRamp+0x10>)
    pHandle->hFinalTorque = hFinalTorque;
 8001362:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8001364:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001366:	8483      	strh	r3, [r0, #36]	; 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001368:	4770      	bx	lr
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	00000401 	.word	0x00000401

08001370 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001370:	8c03      	ldrh	r3, [r0, #32]
 8001372:	430b      	orrs	r3, r1
 8001374:	4393      	bics	r3, r2
 8001376:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8001378:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800137a:	4319      	orrs	r1, r3
 800137c:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800137e:	4770      	bx	lr

08001380 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001380:	2324      	movs	r3, #36	; 0x24
{
 8001382:	b510      	push	{r4, lr}
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001384:	5cc2      	ldrb	r2, [r0, r3]
{
 8001386:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001388:	2a01      	cmp	r2, #1
 800138a:	d000      	beq.n	800138e <MCI_ExecBufferedCommands+0xe>
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800138c:	bd10      	pop	{r4, pc}
      switch (pHandle->lastCommand)
 800138e:	7b01      	ldrb	r1, [r0, #12]
 8001390:	2902      	cmp	r1, #2
 8001392:	d007      	beq.n	80013a4 <MCI_ExecBufferedCommands+0x24>
 8001394:	2903      	cmp	r1, #3
 8001396:	d026      	beq.n	80013e6 <MCI_ExecBufferedCommands+0x66>
 8001398:	2901      	cmp	r1, #1
 800139a:	d016      	beq.n	80013ca <MCI_ExecBufferedCommands+0x4a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 800139c:	2324      	movs	r3, #36	; 0x24
 800139e:	2203      	movs	r2, #3
 80013a0:	54e2      	strb	r2, [r4, r3]
}
 80013a2:	e7f3      	b.n	800138c <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80013a4:	2100      	movs	r1, #0
 80013a6:	6842      	ldr	r2, [r0, #4]
 80013a8:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80013aa:	6800      	ldr	r0, [r0, #0]
 80013ac:	3104      	adds	r1, #4
 80013ae:	f005 f917 	bl	80065e0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80013b2:	8ba2      	ldrh	r2, [r4, #28]
 80013b4:	2310      	movs	r3, #16
 80013b6:	5ee1      	ldrsh	r1, [r4, r3]
 80013b8:	6820      	ldr	r0, [r4, #0]
 80013ba:	f005 f915 	bl	80065e8 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80013be:	2800      	cmp	r0, #0
 80013c0:	d0ec      	beq.n	800139c <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 80013c2:	2324      	movs	r3, #36	; 0x24
 80013c4:	2202      	movs	r2, #2
 80013c6:	54e2      	strb	r2, [r4, r3]
 80013c8:	e7e0      	b.n	800138c <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80013ca:	2100      	movs	r1, #0
 80013cc:	6842      	ldr	r2, [r0, #4]
 80013ce:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80013d0:	6800      	ldr	r0, [r0, #0]
 80013d2:	3103      	adds	r1, #3
 80013d4:	f005 f904 	bl	80065e0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80013d8:	8ba2      	ldrh	r2, [r4, #28]
 80013da:	230e      	movs	r3, #14
 80013dc:	5ee1      	ldrsh	r1, [r4, r3]
 80013de:	6820      	ldr	r0, [r4, #0]
 80013e0:	f005 f902 	bl	80065e8 <STC_ExecRamp>
          break;
 80013e4:	e7eb      	b.n	80013be <MCI_ExecBufferedCommands+0x3e>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80013e6:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013e8:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80013ea:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013ec:	54c2      	strb	r2, [r0, r3]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80013ee:	2204      	movs	r2, #4
 80013f0:	3010      	adds	r0, #16
 80013f2:	f005 fa15 	bl	8006820 <memcpy>
      if (commandHasBeenExecuted)
 80013f6:	e7e4      	b.n	80013c2 <MCI_ExecBufferedCommands+0x42>

080013f8 <MCI_GetSTMState>:
__weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
 80013f8:	7fc0      	ldrb	r0, [r0, #31]
#endif
}
 80013fa:	4770      	bx	lr

080013fc <MCI_GetOccurredFaults>:
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
 80013fc:	8c40      	ldrh	r0, [r0, #34]	; 0x22
#endif
}
 80013fe:	4770      	bx	lr

08001400 <MCI_GetCurrentFaults>:
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
 8001400:	8c00      	ldrh	r0, [r0, #32]
#endif
}
 8001402:	4770      	bx	lr

08001404 <MCI_StartMotor>:
{
 8001404:	b510      	push	{r4, lr}
 8001406:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001408:	f7ff fff6 	bl	80013f8 <MCI_GetSTMState>
 800140c:	2800      	cmp	r0, #0
 800140e:	d001      	beq.n	8001414 <MCI_StartMotor+0x10>
  bool retVal = false;
 8001410:	2000      	movs	r0, #0
}
 8001412:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001414:	0020      	movs	r0, r4
 8001416:	f7ff fff1 	bl	80013fc <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800141a:	2800      	cmp	r0, #0
 800141c:	d1f8      	bne.n	8001410 <MCI_StartMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800141e:	0020      	movs	r0, r4
 8001420:	f7ff ffee 	bl	8001400 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001424:	2800      	cmp	r0, #0
 8001426:	d1f3      	bne.n	8001410 <MCI_StartMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 8001428:	2301      	movs	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800142a:	2224      	movs	r2, #36	; 0x24
      pHandle->DirectCommand = MCI_START;
 800142c:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 800142e:	3001      	adds	r0, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001430:	54a3      	strb	r3, [r4, r2]
      retVal = true;
 8001432:	e7ee      	b.n	8001412 <MCI_StartMotor+0xe>

08001434 <MCI_StartWithPolarizationMotor>:
{
 8001434:	b510      	push	{r4, lr}
 8001436:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001438:	f7ff ffde 	bl	80013f8 <MCI_GetSTMState>
 800143c:	2800      	cmp	r0, #0
 800143e:	d001      	beq.n	8001444 <MCI_StartWithPolarizationMotor+0x10>
  bool retVal = true;
 8001440:	2001      	movs	r0, #1
}
 8001442:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001444:	0020      	movs	r0, r4
 8001446:	f7ff ffd9 	bl	80013fc <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800144a:	2800      	cmp	r0, #0
 800144c:	d1f8      	bne.n	8001440 <MCI_StartWithPolarizationMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800144e:	0020      	movs	r0, r4
 8001450:	f7ff ffd6 	bl	8001400 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001454:	2800      	cmp	r0, #0
 8001456:	d1f3      	bne.n	8001440 <MCI_StartWithPolarizationMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 8001458:	2301      	movs	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800145a:	2224      	movs	r2, #36	; 0x24
      pHandle->DirectCommand = MCI_START;
 800145c:	77a3      	strb	r3, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800145e:	54a3      	strb	r3, [r4, r2]
      pHandle->pPWM->offsetCalibStatus = false;
 8001460:	68a2      	ldr	r2, [r4, #8]
 8001462:	3380      	adds	r3, #128	; 0x80
 8001464:	54d0      	strb	r0, [r2, r3]
      retVal = false;
 8001466:	e7ec      	b.n	8001442 <MCI_StartWithPolarizationMotor+0xe>

08001468 <MCI_StopMotor>:
{
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	0004      	movs	r4, r0
    State = MCI_GetSTMState(pHandle);
 800146c:	f7ff ffc4 	bl	80013f8 <MCI_GetSTMState>
      status = false;
 8001470:	2500      	movs	r5, #0
    if ((IDLE == State) || (ICLWAIT == State))
 8001472:	2800      	cmp	r0, #0
 8001474:	d004      	beq.n	8001480 <MCI_StopMotor+0x18>
 8001476:	0003      	movs	r3, r0
 8001478:	3b0c      	subs	r3, #12
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	4193      	sbcs	r3, r2
 800147e:	b2dd      	uxtb	r5, r3
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001480:	0020      	movs	r0, r4
 8001482:	f7ff ffbb 	bl	80013fc <MCI_GetOccurredFaults>
 8001486:	2800      	cmp	r0, #0
 8001488:	d002      	beq.n	8001490 <MCI_StopMotor+0x28>
  bool retVal = false;
 800148a:	2500      	movs	r5, #0
}
 800148c:	0028      	movs	r0, r5
 800148e:	bd70      	pop	{r4, r5, r6, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001490:	0020      	movs	r0, r4
 8001492:	f7ff ffb5 	bl	8001400 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001496:	2800      	cmp	r0, #0
 8001498:	d1f7      	bne.n	800148a <MCI_StopMotor+0x22>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800149a:	2d00      	cmp	r5, #0
 800149c:	d0f5      	beq.n	800148a <MCI_StopMotor+0x22>
      pHandle->DirectCommand = MCI_STOP;
 800149e:	2305      	movs	r3, #5
 80014a0:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 80014a2:	e7f3      	b.n	800148c <MCI_StopMotor+0x24>

080014a4 <MCI_FaultAcknowledged>:
{
 80014a4:	b510      	push	{r4, lr}
 80014a6:	0004      	movs	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80014a8:	f7ff ffa6 	bl	80013f8 <MCI_GetSTMState>
 80014ac:	280b      	cmp	r0, #11
 80014ae:	d001      	beq.n	80014b4 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 80014b0:	2000      	movs	r0, #0
}
 80014b2:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80014b4:	0020      	movs	r0, r4
 80014b6:	f7ff ffa3 	bl	8001400 <MCI_GetCurrentFaults>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d1f8      	bne.n	80014b0 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 80014be:	2302      	movs	r3, #2
      pHandle->PastFaults = MC_NO_FAULTS;
 80014c0:	8460      	strh	r0, [r4, #34]	; 0x22
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 80014c2:	77a3      	strb	r3, [r4, #30]
      reVal = true;
 80014c4:	3001      	adds	r0, #1
 80014c6:	e7f4      	b.n	80014b2 <MCI_FaultAcknowledged+0xe>

080014c8 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80014c8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80014ca:	8c00      	ldrh	r0, [r0, #32]
 80014cc:	0400      	lsls	r0, r0, #16
 80014ce:	4318      	orrs	r0, r3
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80014d0:	4770      	bx	lr
 80014d2:	46c0      	nop			; (mov r8, r8)

080014d4 <MCI_GetControlMode>:
__weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
 80014d4:	2325      	movs	r3, #37	; 0x25
 80014d6:	5cc0      	ldrb	r0, [r0, r3]
#endif
}
 80014d8:	4770      	bx	lr
 80014da:	46c0      	nop			; (mov r8, r8)

080014dc <MCI_GetLastRampFinalSpeed>:
  {
    retVal = pHandle->hFinalSpeed;
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
 80014dc:	230e      	movs	r3, #14
 80014de:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80014e0:	4770      	bx	lr
 80014e2:	46c0      	nop			; (mov r8, r8)

080014e4 <MCI_GetLastRampFinalDuration>:
  {
    retVal = pHandle->hDurationms;
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
 80014e4:	8b80      	ldrh	r0, [r0, #28]
#endif
}
 80014e6:	4770      	bx	lr

080014e8 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp(MCI_Handle_t *pHandle)
{
 80014e8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80014ea:	6800      	ldr	r0, [r0, #0]
 80014ec:	f005 f8be 	bl	800666c <STC_StopRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)

080014f4 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 80014f4:	b510      	push	{r4, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 80014f6:	6800      	ldr	r0, [r0, #0]
 80014f8:	f005 f85e 	bl	80065b8 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80014fc:	f005 f804 	bl	8006508 <SPD_GetAvrgMecSpeedUnit>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 8001500:	bd10      	pop	{r4, pc}
 8001502:	46c0      	nop			; (mov r8, r8)

08001504 <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
 8001504:	b510      	push	{r4, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001506:	6800      	ldr	r0, [r0, #0]
 8001508:	f005 f862 	bl	80065d0 <STC_GetMecSpeedRefUnit>
#endif
}
 800150c:	bd10      	pop	{r4, pc}
 800150e:	46c0      	nop			; (mov r8, r8)

08001510 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 8001510:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001512:	6841      	ldr	r1, [r0, #4]
{
 8001514:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Vqd);
 8001516:	2204      	movs	r2, #4
 8001518:	3116      	adds	r1, #22
 800151a:	a801      	add	r0, sp, #4
 800151c:	f005 f980 	bl	8006820 <memcpy>
 8001520:	466b      	mov	r3, sp
 8001522:	466a      	mov	r2, sp
 8001524:	88db      	ldrh	r3, [r3, #6]
 8001526:	8890      	ldrh	r0, [r2, #4]
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	4318      	orrs	r0, r3
#endif
}
 800152c:	b003      	add	sp, #12
 800152e:	bd00      	pop	{pc}

08001530 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
 8001530:	b500      	push	{lr}
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001532:	6841      	ldr	r1, [r0, #4]
{
 8001534:	b083      	sub	sp, #12
  return (pHandle->pFOCVars->Valphabeta);
 8001536:	2204      	movs	r2, #4
 8001538:	311a      	adds	r1, #26
 800153a:	a801      	add	r0, sp, #4
 800153c:	f005 f970 	bl	8006820 <memcpy>
 8001540:	466b      	mov	r3, sp
 8001542:	466a      	mov	r2, sp
 8001544:	88db      	ldrh	r3, [r3, #6]
 8001546:	8890      	ldrh	r0, [r2, #4]
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	4318      	orrs	r0, r3
#endif
}
 800154c:	b003      	add	sp, #12
 800154e:	bd00      	pop	{pc}

08001550 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001550:	6843      	ldr	r3, [r0, #4]
 8001552:	201e      	movs	r0, #30
 8001554:	5e18      	ldrsh	r0, [r3, r0]
#endif
}
 8001556:	4770      	bx	lr

08001558 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001558:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 800155a:	c811      	ldmia	r0, {r0, r4}
 800155c:	f005 f8b8 	bl	80066d0 <STC_GetDefaultIqdref>
 8001560:	8220      	strh	r0, [r4, #16]
 8001562:	0c00      	lsrs	r0, r0, #16
 8001564:	8260      	strh	r0, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001566:	bd10      	pop	{r4, pc}

08001568 <MCM_Clarke>:
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001568:	2180      	movs	r1, #128	; 0x80
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MCM_Clarke+0x48>)
 800156c:	b202      	sxth	r2, r0
 800156e:	1400      	asrs	r0, r0, #16
 8001570:	4358      	muls	r0, r3
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8001572:	4353      	muls	r3, r2
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001574:	425b      	negs	r3, r3
 8001576:	1a1b      	subs	r3, r3, r0
 8001578:	1a1b      	subs	r3, r3, r0
{
 800157a:	b084      	sub	sp, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800157c:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 800157e:	0209      	lsls	r1, r1, #8
 8001580:	428b      	cmp	r3, r1
 8001582:	da04      	bge.n	800158e <MCM_Clarke+0x26>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001584:	490b      	ldr	r1, [pc, #44]	; (80015b4 <MCM_Clarke+0x4c>)
 8001586:	428b      	cmp	r3, r1
 8001588:	da08      	bge.n	800159c <MCM_Clarke+0x34>
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MCM_Clarke+0x50>)
 800158c:	e000      	b.n	8001590 <MCM_Clarke+0x28>
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MCM_Clarke+0x54>)
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8001590:	0410      	lsls	r0, r2, #16
 8001592:	041b      	lsls	r3, r3, #16
 8001594:	0c00      	lsrs	r0, r0, #16
 8001596:	4318      	orrs	r0, r3
}
 8001598:	b004      	add	sp, #16
 800159a:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 800159c:	4806      	ldr	r0, [pc, #24]	; (80015b8 <MCM_Clarke+0x50>)
 800159e:	1c19      	adds	r1, r3, #0
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4283      	cmp	r3, r0
 80015a4:	db01      	blt.n	80015aa <MCM_Clarke+0x42>
 80015a6:	b20b      	sxth	r3, r1
 80015a8:	e7f2      	b.n	8001590 <MCM_Clarke+0x28>
 80015aa:	1c01      	adds	r1, r0, #0
 80015ac:	b20b      	sxth	r3, r1
 80015ae:	e7ef      	b.n	8001590 <MCM_Clarke+0x28>
 80015b0:	000049e6 	.word	0x000049e6
 80015b4:	ffff8000 	.word	0xffff8000
 80015b8:	ffff8001 	.word	0xffff8001
 80015bc:	00007fff 	.word	0x00007fff

080015c0 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	469c      	mov	ip, r3
 80015c6:	4460      	add	r0, ip
  uhindex = (uint16_t)shindex;
 80015c8:	b283      	uxth	r3, r0
{
 80015ca:	b530      	push	{r4, r5, lr}
  uhindex /= ((uint16_t)64);
 80015cc:	099b      	lsrs	r3, r3, #6

  switch (((uint16_t)uhindex) & SIN_MASK)
 80015ce:	24c0      	movs	r4, #192	; 0xc0
 80015d0:	0018      	movs	r0, r3
 80015d2:	2580      	movs	r5, #128	; 0x80
 80015d4:	00a4      	lsls	r4, r4, #2
{
 80015d6:	2100      	movs	r1, #0
 80015d8:	2200      	movs	r2, #0
 80015da:	b083      	sub	sp, #12
 80015dc:	4020      	ands	r0, r4
  switch (((uint16_t)uhindex) & SIN_MASK)
 80015de:	00ad      	lsls	r5, r5, #2
 80015e0:	42a8      	cmp	r0, r5
 80015e2:	d023      	beq.n	800162c <MCM_Trig_Functions+0x6c>
 80015e4:	d815      	bhi.n	8001612 <MCM_Trig_Functions+0x52>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d029      	beq.n	800163e <MCM_Trig_Functions+0x7e>
 80015ea:	2480      	movs	r4, #128	; 0x80
 80015ec:	0064      	lsls	r4, r4, #1
 80015ee:	42a0      	cmp	r0, r4
 80015f0:	d109      	bne.n	8001606 <MCM_Trig_Functions+0x46>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	43da      	mvns	r2, r3
 80015f6:	4918      	ldr	r1, [pc, #96]	; (8001658 <MCM_Trig_Functions+0x98>)
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	0052      	lsls	r2, r2, #1
 80015fc:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80015fe:	005b      	lsls	r3, r3, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001600:	4252      	negs	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001602:	5e59      	ldrsh	r1, [r3, r1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001604:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8001606:	0408      	lsls	r0, r1, #16
 8001608:	0412      	lsls	r2, r2, #16
 800160a:	0c00      	lsrs	r0, r0, #16
 800160c:	4310      	orrs	r0, r2
}
 800160e:	b003      	add	sp, #12
 8001610:	bd30      	pop	{r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001612:	42a0      	cmp	r0, r4
 8001614:	d1f7      	bne.n	8001606 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001616:	b2db      	uxtb	r3, r3
 8001618:	43da      	mvns	r2, r3
 800161a:	490f      	ldr	r1, [pc, #60]	; (8001658 <MCM_Trig_Functions+0x98>)
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	0052      	lsls	r2, r2, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001620:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001622:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001624:	5a59      	ldrh	r1, [r3, r1]
 8001626:	4249      	negs	r1, r1
 8001628:	b209      	sxth	r1, r1
      break;
 800162a:	e7ec      	b.n	8001606 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800162c:	b2db      	uxtb	r3, r3
 800162e:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001630:	43db      	mvns	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001632:	4909      	ldr	r1, [pc, #36]	; (8001658 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001634:	b2db      	uxtb	r3, r3
 8001636:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001638:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800163a:	5e59      	ldrsh	r1, [r3, r1]
      break;
 800163c:	e7e3      	b.n	8001606 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800163e:	b2db      	uxtb	r3, r3
 8001640:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001642:	43db      	mvns	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001644:	4904      	ldr	r1, [pc, #16]	; (8001658 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001646:	b2db      	uxtb	r3, r3
 8001648:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800164a:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800164c:	5a59      	ldrh	r1, [r3, r1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800164e:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001650:	4249      	negs	r1, r1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001652:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001654:	b209      	sxth	r1, r1
      break;
 8001656:	e7d6      	b.n	8001606 <MCM_Trig_Functions+0x46>
 8001658:	08006988 	.word	0x08006988

0800165c <MCM_Park>:
{
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	9001      	str	r0, [sp, #4]
 8001662:	b205      	sxth	r5, r0
 8001664:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001666:	0008      	movs	r0, r1
 8001668:	f7ff ffaa 	bl	80015c0 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800166c:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 800166e:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001670:	000a      	movs	r2, r1
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001672:	0018      	movs	r0, r3
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001674:	436a      	muls	r2, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8001676:	4360      	muls	r0, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001678:	1a12      	subs	r2, r2, r0
  if (wqd_tmp > INT16_MAX)
 800167a:	2080      	movs	r0, #128	; 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800167c:	13d2      	asrs	r2, r2, #15
  if (wqd_tmp > INT16_MAX)
 800167e:	0200      	lsls	r0, r0, #8
 8001680:	4282      	cmp	r2, r0
 8001682:	da12      	bge.n	80016aa <MCM_Park+0x4e>
  else if (wqd_tmp < (-32768))
 8001684:	481a      	ldr	r0, [pc, #104]	; (80016f0 <MCM_Park+0x94>)
 8001686:	4282      	cmp	r2, r0
 8001688:	da24      	bge.n	80016d4 <MCM_Park+0x78>
  if (wqd_tmp > INT16_MAX)
 800168a:	2280      	movs	r2, #128	; 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 800168c:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800168e:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001690:	185b      	adds	r3, r3, r1
 8001692:	4818      	ldr	r0, [pc, #96]	; (80016f4 <MCM_Park+0x98>)
 8001694:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8001696:	0212      	lsls	r2, r2, #8
 8001698:	4293      	cmp	r3, r2
 800169a:	db0f      	blt.n	80016bc <MCM_Park+0x60>
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MCM_Park+0x9c>)
  return (Output);
 800169e:	0400      	lsls	r0, r0, #16
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	0c00      	lsrs	r0, r0, #16
 80016a4:	4318      	orrs	r0, r3
}
 80016a6:	b004      	add	sp, #16
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
 80016aa:	4813      	ldr	r0, [pc, #76]	; (80016f8 <MCM_Park+0x9c>)
  if (wqd_tmp > INT16_MAX)
 80016ac:	2280      	movs	r2, #128	; 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 80016ae:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80016b0:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80016b2:	185b      	adds	r3, r3, r1
 80016b4:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 80016b6:	0212      	lsls	r2, r2, #8
 80016b8:	4293      	cmp	r3, r2
 80016ba:	daef      	bge.n	800169c <MCM_Park+0x40>
  else if (wqd_tmp < (-32768))
 80016bc:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <MCM_Park+0x94>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	da01      	bge.n	80016c6 <MCM_Park+0x6a>
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MCM_Park+0x98>)
 80016c4:	e7eb      	b.n	800169e <MCM_Park+0x42>
    hqd_tmp = ((int16_t)wqd_tmp);
 80016c6:	490b      	ldr	r1, [pc, #44]	; (80016f4 <MCM_Park+0x98>)
 80016c8:	1c1a      	adds	r2, r3, #0
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	428b      	cmp	r3, r1
 80016ce:	db0b      	blt.n	80016e8 <MCM_Park+0x8c>
 80016d0:	b213      	sxth	r3, r2
 80016d2:	e7e4      	b.n	800169e <MCM_Park+0x42>
    hqd_tmp = ((int16_t)wqd_tmp);
 80016d4:	4e07      	ldr	r6, [pc, #28]	; (80016f4 <MCM_Park+0x98>)
 80016d6:	1c10      	adds	r0, r2, #0
 80016d8:	b212      	sxth	r2, r2
 80016da:	42b2      	cmp	r2, r6
 80016dc:	db01      	blt.n	80016e2 <MCM_Park+0x86>
 80016de:	b200      	sxth	r0, r0
 80016e0:	e7e4      	b.n	80016ac <MCM_Park+0x50>
 80016e2:	1c30      	adds	r0, r6, #0
 80016e4:	b200      	sxth	r0, r0
 80016e6:	e7e1      	b.n	80016ac <MCM_Park+0x50>
 80016e8:	1c0a      	adds	r2, r1, #0
 80016ea:	b213      	sxth	r3, r2
 80016ec:	e7d7      	b.n	800169e <MCM_Park+0x42>
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	ffff8000 	.word	0xffff8000
 80016f4:	ffff8001 	.word	0xffff8001
 80016f8:	00007fff 	.word	0x00007fff

080016fc <MCM_Rev_Park>:
{
 80016fc:	b530      	push	{r4, r5, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	b205      	sxth	r5, r0
 8001702:	9001      	str	r0, [sp, #4]
 8001704:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001706:	0008      	movs	r0, r1
 8001708:	f7ff ff5a 	bl	80015c0 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 800170c:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 800170e:	1403      	asrs	r3, r0, #16
 8001710:	0019      	movs	r1, r3
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001712:	0010      	movs	r0, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001714:	4361      	muls	r1, r4
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001716:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001718:	4354      	muls	r4, r2
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 800171a:	436b      	muls	r3, r5
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800171c:	1840      	adds	r0, r0, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 800171e:	1ae4      	subs	r4, r4, r3
 8001720:	13e4      	asrs	r4, r4, #15
  return (Output);
 8001722:	0040      	lsls	r0, r0, #1
 8001724:	0424      	lsls	r4, r4, #16
 8001726:	0c00      	lsrs	r0, r0, #16
 8001728:	4320      	orrs	r0, r4
}
 800172a:	b005      	add	sp, #20
 800172c:	bd30      	pop	{r4, r5, pc}
 800172e:	46c0      	nop			; (mov r8, r8)

08001730 <FOC_Clear>:

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001730:	2126      	movs	r1, #38	; 0x26
 8001732:	2200      	movs	r2, #0
 8001734:	4341      	muls	r1, r0
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <FOC_Clear+0x50>)
{
 8001738:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 800173a:	52ca      	strh	r2, [r1, r3]
 800173c:	185b      	adds	r3, r3, r1
 800173e:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001740:	809a      	strh	r2, [r3, #4]
 8001742:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001744:	819a      	strh	r2, [r3, #12]
 8001746:	81da      	strh	r2, [r3, #14]
    FOCVars[bMotor].Iqdref = NULL_qd;
 8001748:	821a      	strh	r2, [r3, #16]
 800174a:	825a      	strh	r2, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 800174c:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 800174e:	82da      	strh	r2, [r3, #22]
 8001750:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8001752:	835a      	strh	r2, [r3, #26]
 8001754:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001756:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <FOC_Clear+0x54>)
 800175a:	0084      	lsls	r4, r0, #2
 800175c:	58e0      	ldr	r0, [r4, r3]
 800175e:	2100      	movs	r1, #0
 8001760:	f004 fdb4 	bl	80062cc <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <FOC_Clear+0x58>)
 8001766:	2100      	movs	r1, #0
 8001768:	58e0      	ldr	r0, [r4, r3]
 800176a:	f004 fdaf 	bl	80062cc <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <FOC_Clear+0x5c>)
 8001770:	58e0      	ldr	r0, [r4, r3]
 8001772:	f004 ff23 	bl	80065bc <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <FOC_Clear+0x60>)
 8001778:	58e0      	ldr	r0, [r4, r3]
 800177a:	f000 feab 	bl	80024d4 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800177e:	bd10      	pop	{r4, pc}
 8001780:	2000068c 	.word	0x2000068c
 8001784:	200002d8 	.word	0x200002d8
 8001788:	200002d4 	.word	0x200002d4
 800178c:	200002dc 	.word	0x200002dc
 8001790:	200006c0 	.word	0x200006c0

08001794 <MCboot>:
{
 8001794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001796:	46de      	mov	lr, fp
 8001798:	4657      	mov	r7, sl
 800179a:	464e      	mov	r6, r9
 800179c:	4645      	mov	r5, r8
 800179e:	b5e0      	push	{r5, r6, r7, lr}
 80017a0:	0004      	movs	r4, r0
 80017a2:	b083      	sub	sp, #12
  if (MC_NULL == pMCIList)
 80017a4:	2800      	cmp	r0, #0
 80017a6:	d069      	beq.n	800187c <MCboot+0xe8>
    bMCBootCompleted = (uint8_t )0;
 80017a8:	2300      	movs	r3, #0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80017aa:	4d38      	ldr	r5, [pc, #224]	; (800188c <MCboot+0xf8>)
 80017ac:	4838      	ldr	r0, [pc, #224]	; (8001890 <MCboot+0xfc>)
    bMCBootCompleted = (uint8_t )0;
 80017ae:	4a39      	ldr	r2, [pc, #228]	; (8001894 <MCboot+0x100>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80017b0:	6028      	str	r0, [r5, #0]
    bMCBootCompleted = (uint8_t )0;
 80017b2:	4690      	mov	r8, r2
 80017b4:	7013      	strb	r3, [r2, #0]
    R1_Init(&PWM_Handle_M1);
 80017b6:	f001 fa83 	bl	8002cc0 <R1_Init>
    ASPEP_start(&aspepOverUartA);
 80017ba:	4837      	ldr	r0, [pc, #220]	; (8001898 <MCboot+0x104>)
 80017bc:	f7ff f84a 	bl	8000854 <ASPEP_start>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80017c0:	4b36      	ldr	r3, [pc, #216]	; (800189c <MCboot+0x108>)
 80017c2:	0018      	movs	r0, r3
 80017c4:	469b      	mov	fp, r3
 80017c6:	f004 fd6d 	bl	80062a4 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 80017ca:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <MCboot+0x10c>)
 80017cc:	0018      	movs	r0, r3
 80017ce:	469a      	mov	sl, r3
 80017d0:	f004 fbf4 	bl	8005fbc <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80017d4:	4833      	ldr	r0, [pc, #204]	; (80018a4 <MCboot+0x110>)
 80017d6:	4e34      	ldr	r6, [pc, #208]	; (80018a8 <MCboot+0x114>)
 80017d8:	4681      	mov	r9, r0
 80017da:	4f34      	ldr	r7, [pc, #208]	; (80018ac <MCboot+0x118>)
 80017dc:	4653      	mov	r3, sl
 80017de:	003a      	movs	r2, r7
 80017e0:	6831      	ldr	r1, [r6, #0]
 80017e2:	f004 fba1 	bl	8005f28 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 80017e6:	464a      	mov	r2, r9
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <MCboot+0x11c>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80017ea:	4659      	mov	r1, fp
    pEAC[M1] = &EncAlignCtrlM1;
 80017ec:	601a      	str	r2, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80017ee:	6830      	ldr	r0, [r6, #0]
 80017f0:	4652      	mov	r2, sl
 80017f2:	f004 fecd 	bl	8006590 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 80017f6:	0038      	movs	r0, r7
 80017f8:	f004 ff88 	bl	800670c <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80017fc:	482d      	ldr	r0, [pc, #180]	; (80018b4 <MCboot+0x120>)
 80017fe:	f004 fd51 	bl	80062a4 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001802:	482d      	ldr	r0, [pc, #180]	; (80018b8 <MCboot+0x124>)
 8001804:	f004 fd4e 	bl	80062a4 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8001808:	482c      	ldr	r0, [pc, #176]	; (80018bc <MCboot+0x128>)
 800180a:	f002 f9df 	bl	8003bcc <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 800180e:	4f2c      	ldr	r7, [pc, #176]	; (80018c0 <MCboot+0x12c>)
 8001810:	0038      	movs	r0, r7
 8001812:	f004 fe0f 	bl	8006434 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <MCboot+0x130>)
    NTC_Init(&TempSensor_M1);
 8001818:	482b      	ldr	r0, [pc, #172]	; (80018c8 <MCboot+0x134>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60df      	str	r7, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800181e:	4f2b      	ldr	r7, [pc, #172]	; (80018cc <MCboot+0x138>)
 8001820:	609f      	str	r7, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001822:	f004 fd23 	bl	800626c <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8001826:	482a      	ldr	r0, [pc, #168]	; (80018d0 <MCboot+0x13c>)
 8001828:	f004 fe62 	bl	80064f0 <REMNG_Init>
    FOC_Clear(M1);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff ff7f 	bl	8001730 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001832:	2301      	movs	r3, #1
 8001834:	4699      	mov	r9, r3
 8001836:	464a      	mov	r2, r9
 8001838:	3323      	adds	r3, #35	; 0x23
 800183a:	54fa      	strb	r2, [r7, r3]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800183c:	6830      	ldr	r0, [r6, #0]
 800183e:	f004 ff47 	bl	80066d0 <STC_GetDefaultIqdref>
 8001842:	6138      	str	r0, [r7, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001844:	6830      	ldr	r0, [r6, #0]
 8001846:	f004 ff43 	bl	80066d0 <STC_GetDefaultIqdref>
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800184a:	682b      	ldr	r3, [r5, #0]
 800184c:	4d21      	ldr	r5, [pc, #132]	; (80018d4 <MCboot+0x140>)
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800184e:	0c00      	lsrs	r0, r0, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001850:	003a      	movs	r2, r7
 8001852:	6831      	ldr	r1, [r6, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001854:	82b8      	strh	r0, [r7, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001856:	0028      	movs	r0, r5
 8001858:	f7ff fd68 	bl	800132c <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <MCboot+0x144>)
    MCI_ExecSpeedRamp(&Mci[M1],
 800185e:	6830      	ldr	r0, [r6, #0]
   Mci[M1].pScale = &scaleParams_M1;
 8001860:	61ab      	str	r3, [r5, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 8001862:	f004 ff31 	bl	80066c8 <STC_GetMecSpeedRefUnitDefault>
 8001866:	2200      	movs	r2, #0
 8001868:	0001      	movs	r1, r0
 800186a:	0028      	movs	r0, r5
 800186c:	f7ff fd6c 	bl	8001348 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8001870:	6025      	str	r5, [r4, #0]
    MC_APP_BootHook();
 8001872:	f7ff fd57 	bl	8001324 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001876:	4643      	mov	r3, r8
 8001878:	464a      	mov	r2, r9
 800187a:	701a      	strb	r2, [r3, #0]
}
 800187c:	b003      	add	sp, #12
 800187e:	bcf0      	pop	{r4, r5, r6, r7}
 8001880:	46bb      	mov	fp, r7
 8001882:	46b2      	mov	sl, r6
 8001884:	46a9      	mov	r9, r5
 8001886:	46a0      	mov	r8, r4
 8001888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	200006c0 	.word	0x200006c0
 8001890:	20000150 	.word	0x20000150
 8001894:	200006b2 	.word	0x200006b2
 8001898:	2000031c 	.word	0x2000031c
 800189c:	20000114 	.word	0x20000114
 80018a0:	20000020 	.word	0x20000020
 80018a4:	200000a0 	.word	0x200000a0
 80018a8:	200002dc 	.word	0x200002dc
 80018ac:	20000298 	.word	0x20000298
 80018b0:	200006bc 	.word	0x200006bc
 80018b4:	200000e8 	.word	0x200000e8
 80018b8:	200000bc 	.word	0x200000bc
 80018bc:	20000288 	.word	0x20000288
 80018c0:	20000000 	.word	0x20000000
 80018c4:	200002d0 	.word	0x200002d0
 80018c8:	2000026c 	.word	0x2000026c
 80018cc:	2000068c 	.word	0x2000068c
 80018d0:	20000220 	.word	0x20000220
 80018d4:	20000650 	.word	0x20000650
 80018d8:	200002e8 	.word	0x200002e8

080018dc <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80018dc:	4770      	bx	lr
 80018de:	46c0      	nop			; (mov r8, r8)

080018e0 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80018e0:	2326      	movs	r3, #38	; 0x26
 80018e2:	4343      	muls	r3, r0
{
 80018e4:	b510      	push	{r4, lr}
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80018e6:	4c08      	ldr	r4, [pc, #32]	; (8001908 <FOC_CalcCurrRef+0x28>)
 80018e8:	18e4      	adds	r4, r4, r3
 80018ea:	0023      	movs	r3, r4
 80018ec:	3324      	adds	r3, #36	; 0x24
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d000      	beq.n	80018f6 <FOC_CalcCurrRef+0x16>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80018f4:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <FOC_CalcCurrRef+0x2c>)
 80018f8:	0080      	lsls	r0, r0, #2
 80018fa:	58c0      	ldr	r0, [r0, r3]
 80018fc:	f004 feba 	bl	8006674 <STC_CalcTorqueReference>
 8001900:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001902:	8220      	strh	r0, [r4, #16]
}
 8001904:	e7f6      	b.n	80018f4 <FOC_CalcCurrRef+0x14>
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	2000068c 	.word	0x2000068c
 800190c:	200002dc 	.word	0x200002dc

08001910 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001910:	4b01      	ldr	r3, [pc, #4]	; (8001918 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001912:	8018      	strh	r0, [r3, #0]
}
 8001914:	4770      	bx	lr
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	200006b4 	.word	0x200006b4

0800191c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 800191e:	8818      	ldrh	r0, [r3, #0]
 8001920:	4243      	negs	r3, r0
 8001922:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001924:	b2c0      	uxtb	r0, r0
}
 8001926:	4770      	bx	lr
 8001928:	200006b4 	.word	0x200006b4

0800192c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800192c:	4b01      	ldr	r3, [pc, #4]	; (8001934 <TSK_SetStopPermanencyTimeM1+0x8>)
 800192e:	8018      	strh	r0, [r3, #0]
}
 8001930:	4770      	bx	lr
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	200006b8 	.word	0x200006b8

08001938 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001938:	4b02      	ldr	r3, [pc, #8]	; (8001944 <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 800193a:	8818      	ldrh	r0, [r3, #0]
 800193c:	4243      	negs	r3, r0
 800193e:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001940:	b2c0      	uxtb	r0, r0
}
 8001942:	4770      	bx	lr
 8001944:	200006b8 	.word	0x200006b8

08001948 <TSK_MediumFrequencyTaskM1>:
{
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	46c6      	mov	lr, r8
 800194c:	b500      	push	{lr}
 800194e:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001950:	466b      	mov	r3, sp
 8001952:	1d99      	adds	r1, r3, #6
 8001954:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001956:	4e8d      	ldr	r6, [pc, #564]	; (8001b8c <TSK_MediumFrequencyTaskM1+0x244>)
  int16_t wAux = 0;
 8001958:	800b      	strh	r3, [r1, #0]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 800195a:	0030      	movs	r0, r6
 800195c:	f004 fb8c 	bl	8006078 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001960:	4d8b      	ldr	r5, [pc, #556]	; (8001b90 <TSK_MediumFrequencyTaskM1+0x248>)
 8001962:	6828      	ldr	r0, [r5, #0]
 8001964:	f004 fcfa 	bl	800635c <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001968:	4c8a      	ldr	r4, [pc, #552]	; (8001b94 <TSK_MediumFrequencyTaskM1+0x24c>)
 800196a:	0020      	movs	r0, r4
 800196c:	f7ff fd48 	bl	8001400 <MCI_GetCurrentFaults>
 8001970:	2800      	cmp	r0, #0
 8001972:	d005      	beq.n	8001980 <TSK_MediumFrequencyTaskM1+0x38>
    Mci[M1].State = FAULT_NOW;
 8001974:	230a      	movs	r3, #10
 8001976:	77e3      	strb	r3, [r4, #31]
}
 8001978:	b002      	add	sp, #8
 800197a:	bc80      	pop	{r7}
 800197c:	46b8      	mov	r8, r7
 800197e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001980:	0020      	movs	r0, r4
 8001982:	f7ff fd3b 	bl	80013fc <MCI_GetOccurredFaults>
 8001986:	2800      	cmp	r0, #0
 8001988:	d106      	bne.n	8001998 <TSK_MediumFrequencyTaskM1+0x50>
      switch (Mci[M1].State)
 800198a:	7fe3      	ldrb	r3, [r4, #31]
 800198c:	2b14      	cmp	r3, #20
 800198e:	d8f3      	bhi.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
 8001990:	4a81      	ldr	r2, [pc, #516]	; (8001b98 <TSK_MediumFrequencyTaskM1+0x250>)
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	58d3      	ldr	r3, [r2, r3]
 8001996:	469f      	mov	pc, r3
      Mci[M1].State = FAULT_OVER;
 8001998:	230b      	movs	r3, #11
 800199a:	77e3      	strb	r3, [r4, #31]
 800199c:	e7ec      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800199e:	7fa3      	ldrb	r3, [r4, #30]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d100      	bne.n	80019a6 <TSK_MediumFrequencyTaskM1+0x5e>
 80019a4:	e0b2      	b.n	8001b0c <TSK_MediumFrequencyTaskM1+0x1c4>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 80019a6:	f7ff ffc7 	bl	8001938 <TSK_StopPermanencyTimeHasElapsedM1>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	d0e4      	beq.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
              ENC_Clear(&ENCODER_M1);
 80019ae:	0030      	movs	r0, r6
 80019b0:	f004 fb3c 	bl	800602c <ENC_Clear>
              R1_SwitchOnPWM(pwmcHandle[M1]);
 80019b4:	4b79      	ldr	r3, [pc, #484]	; (8001b9c <TSK_MediumFrequencyTaskM1+0x254>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	f001 fafc 	bl	8002fb4 <R1_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff ff8d 	bl	80018dc <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 80019c2:	4b77      	ldr	r3, [pc, #476]	; (8001ba0 <TSK_MediumFrequencyTaskM1+0x258>)
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	f004 fe8b 	bl	80066e0 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80019ca:	0020      	movs	r0, r4
 80019cc:	f7ff fcd8 	bl	8001380 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff ff85 	bl	80018e0 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 80019d6:	2306      	movs	r3, #6
 80019d8:	77e3      	strb	r3, [r4, #31]
 80019da:	e7cd      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80019dc:	7fa3      	ldrb	r3, [r4, #30]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d100      	bne.n	80019e4 <TSK_MediumFrequencyTaskM1+0x9c>
 80019e2:	e093      	b.n	8001b0c <TSK_MediumFrequencyTaskM1+0x1c4>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 80019e4:	4e6d      	ldr	r6, [pc, #436]	; (8001b9c <TSK_MediumFrequencyTaskM1+0x254>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	6830      	ldr	r0, [r6, #0]
 80019ea:	f000 fd7b 	bl	80024e4 <PWMC_CurrentReadingCalibr>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d0c2      	beq.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 80019f2:	7fa3      	ldrb	r3, [r4, #30]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d100      	bne.n	80019fa <TSK_MediumFrequencyTaskM1+0xb2>
 80019f8:	e0a8      	b.n	8001b4c <TSK_MediumFrequencyTaskM1+0x204>
                R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80019fa:	6830      	ldr	r0, [r6, #0]
 80019fc:	2100      	movs	r1, #0
 80019fe:	f001 fab3 	bl	8002f68 <R1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001a02:	2014      	movs	r0, #20
 8001a04:	f7ff ff84 	bl	8001910 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	77e3      	strb	r3, [r4, #31]
 8001a0c:	e7b4      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a0e:	7fa3      	ldrb	r3, [r4, #30]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d07b      	beq.n	8001b0c <TSK_MediumFrequencyTaskM1+0x1c4>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001a14:	f7ff ff82 	bl	800191c <TSK_ChargeBootCapDelayHasElapsedM1>
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	d0ad      	beq.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
              R1_SwitchOffPWM(pwmcHandle[M1]);
 8001a1c:	4d5f      	ldr	r5, [pc, #380]	; (8001b9c <TSK_MediumFrequencyTaskM1+0x254>)
 8001a1e:	6828      	ldr	r0, [r5, #0]
 8001a20:	f001 fbfe 	bl	8003220 <R1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001a24:	2224      	movs	r2, #36	; 0x24
 8001a26:	2101      	movs	r1, #1
 8001a28:	4b5e      	ldr	r3, [pc, #376]	; (8001ba4 <TSK_MediumFrequencyTaskM1+0x25c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001a2a:	4f5d      	ldr	r7, [pc, #372]	; (8001ba0 <TSK_MediumFrequencyTaskM1+0x258>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001a2c:	5499      	strb	r1, [r3, r2]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001a2e:	6838      	ldr	r0, [r7, #0]
 8001a30:	495d      	ldr	r1, [pc, #372]	; (8001ba8 <TSK_MediumFrequencyTaskM1+0x260>)
 8001a32:	f004 fdbf 	bl	80065b4 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 8001a36:	0030      	movs	r0, r6
 8001a38:	f004 faf8 	bl	800602c <ENC_Clear>
              FOC_Clear( M1 );
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fe77 	bl	8001730 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 8001a42:	4b5a      	ldr	r3, [pc, #360]	; (8001bac <TSK_MediumFrequencyTaskM1+0x264>)
 8001a44:	0018      	movs	r0, r3
 8001a46:	4698      	mov	r8, r3
 8001a48:	f004 fab4 	bl	8005fb4 <EAC_IsAligned>
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d000      	beq.n	8001a52 <TSK_MediumFrequencyTaskM1+0x10a>
 8001a50:	e085      	b.n	8001b5e <TSK_MediumFrequencyTaskM1+0x216>
                EAC_StartAlignment(&EncAlignCtrlM1);
 8001a52:	4640      	mov	r0, r8
 8001a54:	f004 fa6e 	bl	8005f34 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8001a58:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001a5a:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 8001a5c:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001a5e:	f000 fd3d 	bl	80024dc <PWMC_SwitchOnPWM>
 8001a62:	e789      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001a64:	7fa3      	ldrb	r3, [r4, #30]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d000      	beq.n	8001a6c <TSK_MediumFrequencyTaskM1+0x124>
 8001a6a:	e785      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	83e3      	strh	r3, [r4, #30]
 8001a70:	e782      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001a72:	f7ff ff61 	bl	8001938 <TSK_StopPermanencyTimeHasElapsedM1>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	d100      	bne.n	8001a7c <TSK_MediumFrequencyTaskM1+0x134>
 8001a7a:	e77d      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
 8001a7c:	e7f6      	b.n	8001a6c <TSK_MediumFrequencyTaskM1+0x124>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a7e:	7fa3      	ldrb	r3, [r4, #30]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d043      	beq.n	8001b0c <TSK_MediumFrequencyTaskM1+0x1c4>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001a84:	0020      	movs	r0, r4
 8001a86:	f7ff fc7b 	bl	8001380 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff ff28 	bl	80018e0 <FOC_CalcCurrRef>
 8001a90:	e772      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a92:	7fa3      	ldrb	r3, [r4, #30]
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d039      	beq.n	8001b0c <TSK_MediumFrequencyTaskM1+0x1c4>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8001a98:	4f44      	ldr	r7, [pc, #272]	; (8001bac <TSK_MediumFrequencyTaskM1+0x264>)
 8001a9a:	0038      	movs	r0, r7
 8001a9c:	f004 fa8a 	bl	8005fb4 <EAC_IsAligned>
 8001aa0:	0005      	movs	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8001aa2:	0038      	movs	r0, r7
 8001aa4:	f004 fa6c 	bl	8005f80 <EAC_Exec>
 8001aa8:	0007      	movs	r7, r0
            if ((isAligned == false)  && (EACDone == false))
 8001aaa:	2d00      	cmp	r5, #0
 8001aac:	d101      	bne.n	8001ab2 <TSK_MediumFrequencyTaskM1+0x16a>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d044      	beq.n	8001b3c <TSK_MediumFrequencyTaskM1+0x1f4>
              R1_SwitchOffPWM( pwmcHandle[M1] );
 8001ab2:	4d3a      	ldr	r5, [pc, #232]	; (8001b9c <TSK_MediumFrequencyTaskM1+0x254>)
 8001ab4:	6828      	ldr	r0, [r5, #0]
 8001ab6:	f001 fbb3 	bl	8003220 <R1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001aba:	4f39      	ldr	r7, [pc, #228]	; (8001ba0 <TSK_MediumFrequencyTaskM1+0x258>)
 8001abc:	2103      	movs	r1, #3
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f004 fd8e 	bl	80065e0 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001ac4:	0031      	movs	r1, r6
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f004 fd74 	bl	80065b4 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fe2f 	bl	8001730 <FOC_Clear>
              R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	6828      	ldr	r0, [r5, #0]
 8001ad6:	f001 fa47 	bl	8002f68 <R1_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001ada:	20c8      	movs	r0, #200	; 0xc8
 8001adc:	0080      	lsls	r0, r0, #2
 8001ade:	f7ff ff25 	bl	800192c <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8001ae2:	2314      	movs	r3, #20
 8001ae4:	77e3      	strb	r3, [r4, #31]
 8001ae6:	e747      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001ae8:	2202      	movs	r2, #2
 8001aea:	7fa3      	ldrb	r3, [r4, #30]
 8001aec:	4393      	bics	r3, r2
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d000      	beq.n	8001af4 <TSK_MediumFrequencyTaskM1+0x1ac>
 8001af2:	e741      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001af4:	4d29      	ldr	r5, [pc, #164]	; (8001b9c <TSK_MediumFrequencyTaskM1+0x254>)
 8001af6:	327f      	adds	r2, #127	; 0x7f
 8001af8:	6828      	ldr	r0, [r5, #0]
 8001afa:	5c82      	ldrb	r2, [r0, r2]
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d116      	bne.n	8001b2e <TSK_MediumFrequencyTaskM1+0x1e6>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001b00:	2100      	movs	r1, #0
 8001b02:	f000 fcef 	bl	80024e4 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8001b06:	2311      	movs	r3, #17
 8001b08:	77e3      	strb	r3, [r4, #31]
 8001b0a:	e735      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
    R1_SwitchOffPWM(pwmcHandle[motor]);
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <TSK_MediumFrequencyTaskM1+0x254>)
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	f001 fb86 	bl	8003220 <R1_SwitchOffPWM>
  FOC_Clear(motor);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff fe0b 	bl	8001730 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001b1a:	6828      	ldr	r0, [r5, #0]
 8001b1c:	f004 fc3c 	bl	8006398 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001b20:	20c8      	movs	r0, #200	; 0xc8
 8001b22:	0080      	lsls	r0, r0, #2
 8001b24:	f7ff ff02 	bl	800192c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	77e3      	strb	r3, [r4, #31]
}
 8001b2c:	e724      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001b2e:	2260      	movs	r2, #96	; 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001b30:	2101      	movs	r1, #1
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001b32:	5283      	strh	r3, [r0, r2]
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001b34:	f000 fcd6 	bl	80024e4 <PWMC_CurrentReadingCalibr>
              R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001b38:	6828      	ldr	r0, [r5, #0]
 8001b3a:	e75f      	b.n	80019fc <TSK_MediumFrequencyTaskM1+0xb4>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <TSK_MediumFrequencyTaskM1+0x258>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f004 fd98 	bl	8006674 <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 8001b44:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <TSK_MediumFrequencyTaskM1+0x25c>)
 8001b46:	821f      	strh	r7, [r3, #16]
 8001b48:	8258      	strh	r0, [r3, #18]
            {
 8001b4a:	e715      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
                FOC_Clear(M1);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fdef 	bl	8001730 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001b52:	6828      	ldr	r0, [r5, #0]
 8001b54:	f004 fc20 	bl	8006398 <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	83e3      	strh	r3, [r4, #30]
 8001b5c:	e70c      	b.n	8001978 <TSK_MediumFrequencyTaskM1+0x30>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001b5e:	2103      	movs	r1, #3
 8001b60:	6838      	ldr	r0, [r7, #0]
 8001b62:	f004 fd3d 	bl	80065e0 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001b66:	0031      	movs	r1, r6
 8001b68:	6838      	ldr	r0, [r7, #0]
 8001b6a:	f004 fd23 	bl	80065b4 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff feb4 	bl	80018dc <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff feb3 	bl	80018e0 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001b7a:	6838      	ldr	r0, [r7, #0]
 8001b7c:	f004 fdb0 	bl	80066e0 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001b80:	0020      	movs	r0, r4
 8001b82:	f7ff fbfd 	bl	8001380 <MCI_ExecBufferedCommands>
 8001b86:	2306      	movs	r3, #6
 8001b88:	e767      	b.n	8001a5a <TSK_MediumFrequencyTaskM1+0x112>
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	20000020 	.word	0x20000020
 8001b90:	200002d0 	.word	0x200002d0
 8001b94:	20000650 	.word	0x20000650
 8001b98:	08006bb0 	.word	0x08006bb0
 8001b9c:	200006c0 	.word	0x200006c0
 8001ba0:	200002dc 	.word	0x200002dc
 8001ba4:	2000068c 	.word	0x2000068c
 8001ba8:	20000298 	.word	0x20000298
 8001bac:	200000a0 	.word	0x200000a0

08001bb0 <MC_Scheduler>:
{
 8001bb0:	b570      	push	{r4, r5, r6, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <MC_Scheduler+0x80>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d000      	beq.n	8001bbc <MC_Scheduler+0xc>
}
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
    if(hMFTaskCounterM1 > 0u)
 8001bbc:	4c1d      	ldr	r4, [pc, #116]	; (8001c34 <MC_Scheduler+0x84>)
 8001bbe:	8823      	ldrh	r3, [r4, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <MC_Scheduler+0x88>)
 8001bcc:	881a      	ldrh	r2, [r3, #0]
 8001bce:	2a00      	cmp	r2, #0
 8001bd0:	d003      	beq.n	8001bda <MC_Scheduler+0x2a>
      hBootCapDelayCounterM1--;
 8001bd2:	881a      	ldrh	r2, [r3, #0]
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MC_Scheduler+0x8c>)
 8001bdc:	881a      	ldrh	r2, [r3, #0]
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d0eb      	beq.n	8001bba <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001be2:	881a      	ldrh	r2, [r3, #0]
 8001be4:	3a01      	subs	r2, #1
 8001be6:	b292      	uxth	r2, r2
 8001be8:	801a      	strh	r2, [r3, #0]
}
 8001bea:	e7e6      	b.n	8001bba <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 8001bec:	f7ff feac 	bl	8001948 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001bf0:	f7ff fb9a 	bl	8001328 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001bf4:	4d12      	ldr	r5, [pc, #72]	; (8001c40 <MC_Scheduler+0x90>)
 8001bf6:	0029      	movs	r1, r5
 8001bf8:	6828      	ldr	r0, [r5, #0]
 8001bfa:	310c      	adds	r1, #12
 8001bfc:	6883      	ldr	r3, [r0, #8]
 8001bfe:	4798      	blx	r3
 8001c00:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d007      	beq.n	8001c16 <MC_Scheduler+0x66>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001c06:	0029      	movs	r1, r5
 8001c08:	6828      	ldr	r0, [r5, #0]
 8001c0a:	220a      	movs	r2, #10
 8001c0c:	6803      	ldr	r3, [r0, #0]
 8001c0e:	3108      	adds	r1, #8
 8001c10:	4798      	blx	r3
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d101      	bne.n	8001c1a <MC_Scheduler+0x6a>
{
 8001c16:	2301      	movs	r3, #1
 8001c18:	e7d6      	b.n	8001bc8 <MC_Scheduler+0x18>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001c1a:	0028      	movs	r0, r5
 8001c1c:	f000 fa56 	bl	80020cc <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001c20:	6828      	ldr	r0, [r5, #0]
 8001c22:	230a      	movs	r3, #10
 8001c24:	89ea      	ldrh	r2, [r5, #14]
 8001c26:	68a9      	ldr	r1, [r5, #8]
 8001c28:	6845      	ldr	r5, [r0, #4]
 8001c2a:	47a8      	blx	r5
{
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e7cb      	b.n	8001bc8 <MC_Scheduler+0x18>
 8001c30:	200006b2 	.word	0x200006b2
 8001c34:	200006b6 	.word	0x200006b6
 8001c38:	200006b4 	.word	0x200006b4
 8001c3c:	200006b8 	.word	0x200006b8
 8001c40:	200002f8 	.word	0x200002f8

08001c44 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	46ce      	mov	lr, r9
 8001c48:	4647      	mov	r7, r8
 8001c4a:	b580      	push	{r7, lr}
  uint8_t bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001c4c:	4837      	ldr	r0, [pc, #220]	; (8001d2c <TSK_HighFrequencyTask+0xe8>)
{
 8001c4e:	b087      	sub	sp, #28
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001c50:	f004 f9fc 	bl	800604c <ENC_CalcAngle>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001c54:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <TSK_HighFrequencyTask+0xec>)
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	f004 fcae 	bl	80065b8 <STC_GetSpeedSensor>
 8001c5c:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001c5e:	f004 fc4f 	bl	8006500 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001c62:	4f34      	ldr	r7, [pc, #208]	; (8001d34 <TSK_HighFrequencyTask+0xf0>)
  hElAngle = SPD_GetElAngle(speedHandle);
 8001c64:	0005      	movs	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001c66:	a903      	add	r1, sp, #12
 8001c68:	6838      	ldr	r0, [r7, #0]
 8001c6a:	f000 faf5 	bl	8002258 <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 8001c6e:	f002 f95b 	bl	8003f28 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001c72:	9803      	ldr	r0, [sp, #12]
 8001c74:	f7ff fc78 	bl	8001568 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c78:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001c7a:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c7c:	f7ff fcee 	bl	800165c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c80:	4c2d      	ldr	r4, [pc, #180]	; (8001d38 <TSK_HighFrequencyTask+0xf4>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c82:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c84:	2310      	movs	r3, #16
 8001c86:	5ee1      	ldrsh	r1, [r4, r3]
 8001c88:	b203      	sxth	r3, r0
 8001c8a:	1ac9      	subs	r1, r1, r3
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <TSK_HighFrequencyTask+0xf8>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	f004 fb24 	bl	80062dc <PI_Controller>
 8001c94:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001c96:	2312      	movs	r3, #18
 8001c98:	5ee1      	ldrsh	r1, [r4, r3]
 8001c9a:	ab01      	add	r3, sp, #4
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	5e9b      	ldrsh	r3, [r3, r2]
 8001ca0:	1ac9      	subs	r1, r1, r3
 8001ca2:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <TSK_HighFrequencyTask+0xfc>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f004 fb19 	bl	80062dc <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001caa:	4642      	mov	r2, r8
 8001cac:	ab02      	add	r3, sp, #8
 8001cae:	801a      	strh	r2, [r3, #0]
 8001cb0:	8058      	strh	r0, [r3, #2]
 8001cb2:	9902      	ldr	r1, [sp, #8]
 8001cb4:	4823      	ldr	r0, [pc, #140]	; (8001d44 <TSK_HighFrequencyTask+0x100>)
 8001cb6:	f004 f8f9 	bl	8005eac <Circle_Limitation>
 8001cba:	b203      	sxth	r3, r0
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	9002      	str	r0, [sp, #8]
 8001cc0:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001cc2:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001cc4:	4698      	mov	r8, r3
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001cc6:	f004 fc23 	bl	8006510 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001cca:	0029      	movs	r1, r5
 8001ccc:	9802      	ldr	r0, [sp, #8]
 8001cce:	f7ff fd15 	bl	80016fc <MCM_Rev_Park>
 8001cd2:	9005      	str	r0, [sp, #20]
  RCM_ReadOngoingConv();
 8001cd4:	f002 f960 	bl	8003f98 <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001cd8:	9905      	ldr	r1, [sp, #20]
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f000 fac0 	bl	8002260 <PWMC_SetPhaseVoltage>
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 8001ce0:	002a      	movs	r2, r5
 8001ce2:	9901      	ldr	r1, [sp, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001ce4:	0006      	movs	r6, r0
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 8001ce6:	6838      	ldr	r0, [r7, #0]
 8001ce8:	f000 fc1a 	bl	8002520 <PWMC_CalcPhaseCurrentsEst>

  FOCVars[M1].Vqd = Vqd;
 8001cec:	464b      	mov	r3, r9
 8001cee:	82e3      	strh	r3, [r4, #22]
 8001cf0:	4643      	mov	r3, r8
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8001cf2:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 8001cf4:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 8001cf6:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001cf8:	2204      	movs	r2, #4
  FOCVars[M1].Iab = Iab;
 8001cfa:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001cfc:	9b04      	ldr	r3, [sp, #16]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001cfe:	301a      	adds	r0, #26
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001d00:	6063      	str	r3, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001d02:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001d04:	a905      	add	r1, sp, #20
  FOCVars[M1].Iqd = Iqd;
 8001d06:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001d08:	f004 fd8a 	bl	8006820 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 8001d0c:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001d0e:	2e01      	cmp	r6, #1
 8001d10:	d005      	beq.n	8001d1e <TSK_HighFrequencyTask+0xda>
}
 8001d12:	2000      	movs	r0, #0
 8001d14:	b007      	add	sp, #28
 8001d16:	bcc0      	pop	{r6, r7}
 8001d18:	46b9      	mov	r9, r7
 8001d1a:	46b0      	mov	r8, r6
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2101      	movs	r1, #1
 8001d22:	4809      	ldr	r0, [pc, #36]	; (8001d48 <TSK_HighFrequencyTask+0x104>)
 8001d24:	f7ff fb24 	bl	8001370 <MCI_FaultProcessing>
 8001d28:	e7f3      	b.n	8001d12 <TSK_HighFrequencyTask+0xce>
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	20000020 	.word	0x20000020
 8001d30:	200002dc 	.word	0x200002dc
 8001d34:	200006c0 	.word	0x200006c0
 8001d38:	2000068c 	.word	0x2000068c
 8001d3c:	200002d8 	.word	0x200002d8
 8001d40:	200002d4 	.word	0x200002d4
 8001d44:	2000001c 	.word	0x2000001c
 8001d48:	20000650 	.word	0x20000650

08001d4c <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4e:	46c6      	mov	lr, r8

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <TSK_SafetyTask_PWMOFF+0x7c>)
 8001d52:	0087      	lsls	r7, r0, #2
{
 8001d54:	0005      	movs	r5, r0
 8001d56:	b500      	push	{lr}
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001d58:	59d8      	ldr	r0, [r3, r7]
 8001d5a:	4698      	mov	r8, r3
 8001d5c:	f000 fc30 	bl	80025c0 <PWMC_IsFaultOccurred>
 8001d60:	0006      	movs	r6, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 8001d62:	2d00      	cmp	r5, #0
 8001d64:	d023      	beq.n	8001dae <TSK_SafetyTask_PWMOFF+0x62>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001d66:	43f2      	mvns	r2, r6
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <TSK_SafetyTask_PWMOFF+0x80>)
 8001d6a:	197c      	adds	r4, r7, r5
 8001d6c:	00e4      	lsls	r4, r4, #3
 8001d6e:	18e4      	adds	r4, r4, r3
 8001d70:	0020      	movs	r0, r4
 8001d72:	0031      	movs	r1, r6
 8001d74:	b292      	uxth	r2, r2
 8001d76:	f7ff fafb 	bl	8001370 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001d7a:	0020      	movs	r0, r4
 8001d7c:	f7ff fba4 	bl	80014c8 <MCI_GetFaultState>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d011      	beq.n	8001da8 <TSK_SafetyTask_PWMOFF+0x5c>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <TSK_SafetyTask_PWMOFF+0x84>)
 8001d86:	59d8      	ldr	r0, [r3, r7]
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d002      	beq.n	8001d92 <TSK_SafetyTask_PWMOFF+0x46>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	f004 f913 	bl	8005fb8 <EAC_SetRestartState>
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d92:	4643      	mov	r3, r8
 8001d94:	59d8      	ldr	r0, [r3, r7]
 8001d96:	f000 fb9d 	bl	80024d4 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001d9a:	0028      	movs	r0, r5
 8001d9c:	f7ff fcc8 	bl	8001730 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <TSK_SafetyTask_PWMOFF+0x88>)
 8001da2:	59d8      	ldr	r0, [r3, r7]
 8001da4:	f004 faf8 	bl	8006398 <PQD_Clear>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001da8:	bc80      	pop	{r7}
 8001daa:	46b8      	mov	r8, r7
 8001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001dae:	480a      	ldr	r0, [pc, #40]	; (8001dd8 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001db0:	f001 ffc4 	bl	8003d3c <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <TSK_SafetyTask_PWMOFF+0x90>)
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001db6:	0001      	movs	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001db8:	0018      	movs	r0, r3
 8001dba:	f004 fb65 	bl	8006488 <RVBS_CalcAvVbus>
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	4398      	bics	r0, r3
 8001dc2:	4306      	orrs	r6, r0
 8001dc4:	b2b6      	uxth	r6, r6
 8001dc6:	e7ce      	b.n	8001d66 <TSK_SafetyTask_PWMOFF+0x1a>
 8001dc8:	200006c0 	.word	0x200006c0
 8001dcc:	20000650 	.word	0x20000650
 8001dd0:	200006bc 	.word	0x200006bc
 8001dd4:	200002d0 	.word	0x200002d0
 8001dd8:	20000288 	.word	0x20000288
 8001ddc:	20000000 	.word	0x20000000

08001de0 <TSK_SafetyTask>:
{
 8001de0:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <TSK_SafetyTask+0x18>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d000      	beq.n	8001dec <TSK_SafetyTask+0xc>
}
 8001dea:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff ffad 	bl	8001d4c <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 8001df2:	f002 f867 	bl	8003ec4 <RCM_ExecUserConv>
}
 8001df6:	e7f8      	b.n	8001dea <TSK_SafetyTask+0xa>
 8001df8:	200006b2 	.word	0x200006b2

08001dfc <MC_RunMotorControlTasks>:
{
 8001dfc:	b510      	push	{r4, lr}
  if (0U == bMCBootCompleted)
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <MC_RunMotorControlTasks+0x18>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d100      	bne.n	8001e08 <MC_RunMotorControlTasks+0xc>
}
 8001e06:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 8001e08:	f7ff fed2 	bl	8001bb0 <MC_Scheduler>
    TSK_SafetyTask();
 8001e0c:	f7ff ffe8 	bl	8001de0 <TSK_SafetyTask>
}
 8001e10:	e7f9      	b.n	8001e06 <MC_RunMotorControlTasks+0xa>
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	200006b2 	.word	0x200006b2

08001e18 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001e18:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R1_SwitchOffPWM(pwmcHandle[M1]);
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <TSK_HardwareFaultTask+0x18>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	f001 f9ff 	bl	8003220 <R1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	4803      	ldr	r0, [pc, #12]	; (8001e34 <TSK_HardwareFaultTask+0x1c>)
 8001e28:	f7ff faa2 	bl	8001370 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	200006c0 	.word	0x200006c0
 8001e34:	20000650 	.word	0x20000650

08001e38 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001e38:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001e3a:	f7ff fa69 	bl	8001310 <MC_GetSTMStateMotor1>
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d102      	bne.n	8001e48 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    (void)MC_StartMotor1();
 8001e42:	f7ff fa55 	bl	80012f0 <MC_StartMotor1>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001e46:	bd10      	pop	{r4, pc}
    (void)MC_StopMotor1();
 8001e48:	f7ff fa5a 	bl	8001300 <MC_StopMotor1>
}
 8001e4c:	e7fb      	b.n	8001e46 <UI_HandleStartStopButton_cb+0xe>
 8001e4e:	46c0      	nop			; (mov r8, r8)

08001e50 <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e50:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e52:	2120      	movs	r1, #32
 8001e54:	2002      	movs	r0, #2

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001e56:	b510      	push	{r4, lr}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e58:	4a37      	ldr	r2, [pc, #220]	; (8001f38 <mc_lock_pins+0xe8>)
 8001e5a:	05db      	lsls	r3, r3, #23
 8001e5c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e5e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e60:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	b08c      	sub	sp, #48	; 0x30
 8001e66:	920b      	str	r2, [sp, #44]	; 0x2c
  (void) temp;
 8001e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e6a:	4934      	ldr	r1, [pc, #208]	; (8001f3c <mc_lock_pins+0xec>)
 8001e6c:	4a34      	ldr	r2, [pc, #208]	; (8001f40 <mc_lock_pins+0xf0>)
 8001e6e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e70:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e72:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e74:	69d4      	ldr	r4, [r2, #28]
 8001e76:	940a      	str	r4, [sp, #40]	; 0x28
  (void) temp;
 8001e78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e7a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e7c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e7e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e80:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e82:	3801      	subs	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 8001e84:	9109      	str	r1, [sp, #36]	; 0x24
  (void) temp;
 8001e86:	9909      	ldr	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e88:	492e      	ldr	r1, [pc, #184]	; (8001f44 <mc_lock_pins+0xf4>)
 8001e8a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e8c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e8e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e90:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e92:	30ff      	adds	r0, #255	; 0xff
  temp = READ_REG(GPIOx->LCKR);
 8001e94:	9108      	str	r1, [sp, #32]
  (void) temp;
 8001e96:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e98:	492b      	ldr	r1, [pc, #172]	; (8001f48 <mc_lock_pins+0xf8>)
 8001e9a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e9c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e9e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ea0:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ea2:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 8001ea4:	9107      	str	r1, [sp, #28]
  (void) temp;
 8001ea6:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ea8:	2181      	movs	r1, #129	; 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eaa:	30ff      	adds	r0, #255	; 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eac:	0249      	lsls	r1, r1, #9
 8001eae:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eb0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eb2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001eb4:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eb6:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001eb8:	9106      	str	r1, [sp, #24]
  (void) temp;
 8001eba:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ebc:	2188      	movs	r1, #136	; 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ebe:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ec0:	0249      	lsls	r1, r1, #9
 8001ec2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ec4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ec6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ec8:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eca:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001ecc:	9105      	str	r1, [sp, #20]
  (void) temp;
 8001ece:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ed0:	21a0      	movs	r1, #160	; 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ed2:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ed4:	0249      	lsls	r1, r1, #9
 8001ed6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ed8:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eda:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001edc:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ede:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001ee0:	9104      	str	r1, [sp, #16]
  (void) temp;
 8001ee2:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ee4:	2182      	movs	r1, #130	; 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ee6:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ee8:	0249      	lsls	r1, r1, #9
 8001eea:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eec:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eee:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ef0:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ef2:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001ef4:	9103      	str	r1, [sp, #12]
  (void) temp;
 8001ef6:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ef8:	21c0      	movs	r1, #192	; 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001efa:	0200      	lsls	r0, r0, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001efc:	0249      	lsls	r1, r1, #9
 8001efe:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f00:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f02:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f04:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f06:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001f08:	9102      	str	r1, [sp, #8]
  (void) temp;
 8001f0a:	9902      	ldr	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f0c:	2190      	movs	r1, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f0e:	0180      	lsls	r0, r0, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f10:	0249      	lsls	r1, r1, #9
 8001f12:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f14:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f16:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f18:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f1a:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001f1c:	9201      	str	r2, [sp, #4]
  (void) temp;
 8001f1e:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f20:	2284      	movs	r2, #132	; 0x84
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f22:	0109      	lsls	r1, r1, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f24:	0252      	lsls	r2, r2, #9
 8001f26:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f28:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f2a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001f30:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin);
}
 8001f32:	b00c      	add	sp, #48	; 0x30
 8001f34:	bd10      	pop	{r4, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	00010020 	.word	0x00010020
 8001f3c:	00010002 	.word	0x00010002
 8001f40:	48000400 	.word	0x48000400
 8001f44:	00010001 	.word	0x00010001
 8001f48:	00010100 	.word	0x00010100

08001f4c <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4e:	4657      	mov	r7, sl
 8001f50:	4645      	mov	r5, r8
 8001f52:	464e      	mov	r6, r9
 8001f54:	46de      	mov	lr, fp
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8001f56:	0002      	movs	r2, r0
{
 8001f58:	4680      	mov	r8, r0
 8001f5a:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t * rxData = pHandle->rxBuffer;
 8001f5c:	6843      	ldr	r3, [r0, #4]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001f5e:	4833      	ldr	r0, [pc, #204]	; (800202c <RI_SetRegCommandParser+0xe0>)
{
 8001f60:	b089      	sub	sp, #36	; 0x24
    int16_t rxLength = pHandle->rxLength;
 8001f62:	240c      	movs	r4, #12
 8001f64:	5f14      	ldrsh	r4, [r2, r4]
    uint16_t size = 0U;
 8001f66:	aa02      	add	r2, sp, #8
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001f68:	9006      	str	r0, [sp, #24]
 8001f6a:	4831      	ldr	r0, [pc, #196]	; (8002030 <RI_SetRegCommandParser+0xe4>)
    uint16_t size = 0U;
 8001f6c:	4694      	mov	ip, r2
 8001f6e:	260e      	movs	r6, #14
 8001f70:	2200      	movs	r2, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001f72:	9007      	str	r0, [sp, #28]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8001f74:	4640      	mov	r0, r8
    uint16_t size = 0U;
 8001f76:	4466      	add	r6, ip
 8001f78:	8032      	strh	r2, [r6, #0]
    pHandle->txLength = 0;
 8001f7a:	81c2      	strh	r2, [r0, #14]
    uint8_t * txData = pHandle->txBuffer;
 8001f7c:	6882      	ldr	r2, [r0, #8]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001f7e:	af06      	add	r7, sp, #24
    uint8_t * txData = pHandle->txBuffer;
 8001f80:	4692      	mov	sl, r2
  uint8_t retVal = MCP_CMD_OK;
 8001f82:	2200      	movs	r2, #0
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8001f84:	4451      	add	r1, sl
  uint8_t retVal = MCP_CMD_OK;
 8001f86:	9203      	str	r2, [sp, #12]
          if (txSyncFreeSpace !=0 )
 8001f88:	b28a      	uxth	r2, r1
    uint8_t number_of_item =0;
 8001f8a:	2500      	movs	r5, #0
          if (txSyncFreeSpace !=0 )
 8001f8c:	9202      	str	r2, [sp, #8]
    while (rxLength > 0)
 8001f8e:	2c00      	cmp	r4, #0
 8001f90:	dd32      	ble.n	8001ff8 <RI_SetRegCommandParser+0xac>
      if (motorID > NBR_OF_MOTORS)
 8001f92:	2106      	movs	r1, #6
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001f94:	781a      	ldrb	r2, [r3, #0]
      regID = *dataElementID & REG_MASK;
 8001f96:	8818      	ldrh	r0, [r3, #0]
      if (motorID > NBR_OF_MOTORS)
 8001f98:	4211      	tst	r1, r2
 8001f9a:	d131      	bne.n	8002000 <RI_SetRegCommandParser+0xb4>
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001f9c:	1ea1      	subs	r1, r4, #2
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001f9e:	3302      	adds	r3, #2
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001fa0:	468c      	mov	ip, r1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001fa2:	4699      	mov	r9, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001fa4:	b28c      	uxth	r4, r1
      regID = *dataElementID & REG_MASK;
 8001fa6:	2307      	movs	r3, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001fa8:	2138      	movs	r1, #56	; 0x38
 8001faa:	4398      	bics	r0, r3
 8001fac:	4011      	ands	r1, r2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	4662      	mov	r2, ip
 8001fb2:	b212      	sxth	r2, r2
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	58fb      	ldr	r3, [r7, r3]
 8001fba:	464a      	mov	r2, r9
 8001fbc:	469b      	mov	fp, r3
 8001fbe:	0033      	movs	r3, r6
 8001fc0:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8001fc2:	8833      	ldrh	r3, [r6, #0]
      number_of_item ++;
 8001fc4:	3501      	adds	r5, #1
        rxLength = (int16_t) (rxLength - size);
 8001fc6:	1ae4      	subs	r4, r4, r3
      number_of_item ++;
 8001fc8:	b2ed      	uxtb	r5, r5
        rxLength = (int16_t) (rxLength - size);
 8001fca:	b224      	sxth	r4, r4
        if ((1U == number_of_item) && (0 == rxLength))
 8001fcc:	2d01      	cmp	r5, #1
 8001fce:	d021      	beq.n	8002014 <RI_SetRegCommandParser+0xc8>
          if (txSyncFreeSpace !=0 )
 8001fd0:	4652      	mov	r2, sl
 8001fd2:	9902      	ldr	r1, [sp, #8]
 8001fd4:	b292      	uxth	r2, r2
 8001fd6:	428a      	cmp	r2, r1
 8001fd8:	d01a      	beq.n	8002010 <RI_SetRegCommandParser+0xc4>
          {
            *txData = accessResult;
 8001fda:	4652      	mov	r2, sl
 8001fdc:	7010      	strb	r0, [r2, #0]
            txData = txData+1;
            pHandle->txLength++;
 8001fde:	4642      	mov	r2, r8
 8001fe0:	4641      	mov	r1, r8
 8001fe2:	89d2      	ldrh	r2, [r2, #14]
 8001fe4:	3201      	adds	r2, #1
 8001fe6:	81ca      	strh	r2, [r1, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	d107      	bne.n	8001ffc <RI_SetRegCommandParser+0xb0>
            txData = txData+1;
 8001fec:	2201      	movs	r2, #1
 8001fee:	4694      	mov	ip, r2
        rxData = rxData+size;
 8001ff0:	444b      	add	r3, r9
            txData = txData+1;
 8001ff2:	44e2      	add	sl, ip
    while (rxLength > 0)
 8001ff4:	2c00      	cmp	r4, #0
 8001ff6:	dccc      	bgt.n	8001f92 <RI_SetRegCommandParser+0x46>
 8001ff8:	9803      	ldr	r0, [sp, #12]
 8001ffa:	e00d      	b.n	8002018 <RI_SetRegCommandParser+0xcc>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001ffc:	2807      	cmp	r0, #7
 8001ffe:	d110      	bne.n	8002022 <RI_SetRegCommandParser+0xd6>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002000:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002002:	b009      	add	sp, #36	; 0x24
 8002004:	bcf0      	pop	{r4, r5, r6, r7}
 8002006:	46bb      	mov	fp, r7
 8002008:	46b2      	mov	sl, r6
 800200a:	46a9      	mov	r9, r5
 800200c:	46a0      	mov	r8, r4
 800200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002010:	2008      	movs	r0, #8
 8002012:	e7f6      	b.n	8002002 <RI_SetRegCommandParser+0xb6>
        if ((1U == number_of_item) && (0 == rxLength))
 8002014:	2c00      	cmp	r4, #0
 8002016:	d1db      	bne.n	8001fd0 <RI_SetRegCommandParser+0x84>
    if (MCP_CMD_OK == retVal)
 8002018:	2800      	cmp	r0, #0
 800201a:	d1f2      	bne.n	8002002 <RI_SetRegCommandParser+0xb6>
      pHandle->txLength = 0;
 800201c:	4643      	mov	r3, r8
 800201e:	81d8      	strh	r0, [r3, #14]
 8002020:	e7ef      	b.n	8002002 <RI_SetRegCommandParser+0xb6>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002022:	280a      	cmp	r0, #10
 8002024:	d0ec      	beq.n	8002000 <RI_SetRegCommandParser+0xb4>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002026:	2201      	movs	r2, #1
 8002028:	9203      	str	r2, [sp, #12]
 800202a:	e7df      	b.n	8001fec <RI_SetRegCommandParser+0xa0>
 800202c:	080035d5 	.word	0x080035d5
 8002030:	08003681 	.word	0x08003681

08002034 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002036:	464e      	mov	r6, r9
 8002038:	4657      	mov	r7, sl
 800203a:	4645      	mov	r5, r8
 800203c:	46de      	mov	lr, fp
 800203e:	b5e0      	push	{r5, r6, r7, lr}
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 8002040:	6883      	ldr	r3, [r0, #8]
{
 8002042:	b087      	sub	sp, #28
    uint16_t size = 0U;
 8002044:	2200      	movs	r2, #0
    uint8_t * txData = pHandle->txBuffer;
 8002046:	4699      	mov	r9, r3
    uint16_t size = 0U;
 8002048:	466b      	mov	r3, sp
    uint16_t rxLength = pHandle->rxLength;
    int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 800204a:	b20d      	sxth	r5, r1

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800204c:	491d      	ldr	r1, [pc, #116]	; (80020c4 <RI_GetRegCommandParser+0x90>)
    uint16_t size = 0U;
 800204e:	81da      	strh	r2, [r3, #14]
    uint16_t rxLength = pHandle->rxLength;
 8002050:	8983      	ldrh	r3, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002052:	9104      	str	r1, [sp, #16]
 8002054:	491c      	ldr	r1, [pc, #112]	; (80020c8 <RI_GetRegCommandParser+0x94>)
 8002056:	ae04      	add	r6, sp, #16
{
 8002058:	0007      	movs	r7, r0
    uint8_t * rxData = pHandle->rxBuffer;
 800205a:	6844      	ldr	r4, [r0, #4]
    pHandle->txLength = 0;
 800205c:	81c2      	strh	r2, [r0, #14]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800205e:	6071      	str	r1, [r6, #4]
    while (rxLength > 0U)
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01f      	beq.n	80020a4 <RI_GetRegCommandParser+0x70>
 8002064:	18e3      	adds	r3, r4, r3
      regID = *dataElementID & REG_MASK;
      typeID = (uint8_t)*dataElementID & TYPE_MASK;

      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));

      if (motorID > NBR_OF_MOTORS)
 8002066:	3206      	adds	r2, #6
    while (rxLength > 0U)
 8002068:	b29b      	uxth	r3, r3
      if (motorID > NBR_OF_MOTORS)
 800206a:	4690      	mov	r8, r2
    while (rxLength > 0U)
 800206c:	469a      	mov	sl, r3
      if (motorID > NBR_OF_MOTORS)
 800206e:	4643      	mov	r3, r8
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002070:	7822      	ldrb	r2, [r4, #0]
      regID = *dataElementID & REG_MASK;
 8002072:	8820      	ldrh	r0, [r4, #0]
      if (motorID > NBR_OF_MOTORS)
 8002074:	4213      	tst	r3, r2
 8002076:	d115      	bne.n	80020a4 <RI_GetRegCommandParser+0x70>
      regID = *dataElementID & REG_MASK;
 8002078:	2307      	movs	r3, #7
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800207a:	4398      	bics	r0, r3
 800207c:	4013      	ands	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	9500      	str	r5, [sp, #0]
 8002082:	58f3      	ldr	r3, [r6, r3]
 8002084:	2138      	movs	r1, #56	; 0x38
 8002086:	469b      	mov	fp, r3
 8002088:	230e      	movs	r3, #14
 800208a:	4011      	ands	r1, r2
 800208c:	446b      	add	r3, sp
 800208e:	464a      	mov	r2, r9
 8002090:	47d8      	blx	fp
        if (retVal == MCP_CMD_OK )
 8002092:	2800      	cmp	r0, #0
 8002094:	d008      	beq.n	80020a8 <RI_GetRegCommandParser+0x74>
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002096:	b007      	add	sp, #28
 8002098:	bcf0      	pop	{r4, r5, r6, r7}
 800209a:	46bb      	mov	fp, r7
 800209c:	46b2      	mov	sl, r6
 800209e:	46a9      	mov	r9, r5
 80020a0:	46a0      	mov	r8, r4
 80020a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t retVal = MCP_CMD_NOK;
 80020a4:	2001      	movs	r0, #1
 80020a6:	e7f6      	b.n	8002096 <RI_GetRegCommandParser+0x62>
          txData = txData+size;
 80020a8:	466b      	mov	r3, sp
          pHandle->txLength += size;
 80020aa:	89fa      	ldrh	r2, [r7, #14]
          txData = txData+size;
 80020ac:	89db      	ldrh	r3, [r3, #14]
    while (rxLength > 0U)
 80020ae:	3402      	adds	r4, #2
          pHandle->txLength += size;
 80020b0:	189a      	adds	r2, r3, r2
          freeSpaceS16 = freeSpaceS16-size;
 80020b2:	1aed      	subs	r5, r5, r3
          txData = txData+size;
 80020b4:	4499      	add	r9, r3
    while (rxLength > 0U)
 80020b6:	b2a3      	uxth	r3, r4
          pHandle->txLength += size;
 80020b8:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80020ba:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 80020bc:	459a      	cmp	sl, r3
 80020be:	d1d6      	bne.n	800206e <RI_GetRegCommandParser+0x3a>
 80020c0:	e7e9      	b.n	8002096 <RI_GetRegCommandParser+0x62>
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	08003871 	.word	0x08003871
 80020c8:	0800391d 	.word	0x0800391d

080020cc <MCP_ReceivedPacket>:
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 80020cc:	6841      	ldr	r1, [r0, #4]
{
 80020ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80020d0:	880a      	ldrh	r2, [r1, #0]
{
 80020d2:	0004      	movs	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80020d4:	0013      	movs	r3, r2
 80020d6:	2007      	movs	r0, #7

    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80020d8:	2680      	movs	r6, #128	; 0x80
 80020da:	25ff      	movs	r5, #255	; 0xff
 80020dc:	0017      	movs	r7, r2
{
 80020de:	b083      	sub	sp, #12
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80020e0:	4383      	bics	r3, r0
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80020e2:	0076      	lsls	r6, r6, #1
 80020e4:	43af      	bics	r7, r5
 80020e6:	42b7      	cmp	r7, r6
 80020e8:	d02f      	beq.n	800214a <MCP_ReceivedPacket+0x7e>
    else
    {
      /* Nothing to do */
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80020ea:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80020ec:	4010      	ands	r0, r2
 80020ee:	0082      	lsls	r2, r0, #2
 80020f0:	1812      	adds	r2, r2, r0

    /* Removing MCP Header from RxBuffer */
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80020f2:	89a0      	ldrh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80020f4:	4d48      	ldr	r5, [pc, #288]	; (8002218 <MCP_ReceivedPacket+0x14c>)
 80020f6:	00d2      	lsls	r2, r2, #3
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80020f8:	3802      	subs	r0, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 80020fa:	1955      	adds	r5, r2, r5
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80020fc:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80020fe:	6822      	ldr	r2, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002100:	3102      	adds	r1, #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002102:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002104:	6061      	str	r1, [r4, #4]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002106:	8992      	ldrh	r2, [r2, #12]
 8002108:	3a01      	subs	r2, #1
 800210a:	b297      	uxth	r7, r2
 800210c:	46bc      	mov	ip, r7

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 800210e:	2700      	movs	r7, #0
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002110:	b212      	sxth	r2, r2
    pHandle->txLength = 0U;
 8002112:	81e7      	strh	r7, [r4, #14]

    switch (command)
 8002114:	2b38      	cmp	r3, #56	; 0x38
 8002116:	d80c      	bhi.n	8002132 <MCP_ReceivedPacket+0x66>
 8002118:	4a40      	ldr	r2, [pc, #256]	; (800221c <MCP_ReceivedPacket+0x150>)
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	58d3      	ldr	r3, [r2, r3]
 800211e:	469f      	mov	pc, r3
 8002120:	2300      	movs	r3, #0
 8002122:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002124:	68a2      	ldr	r2, [r4, #8]
 8002126:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8002128:	89e3      	ldrh	r3, [r4, #14]
 800212a:	3301      	adds	r3, #1
 800212c:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 800212e:	b003      	add	sp, #12
 8002130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8002132:	2b68      	cmp	r3, #104	; 0x68
 8002134:	d05d      	beq.n	80021f2 <MCP_ReceivedPacket+0x126>
 8002136:	42b3      	cmp	r3, r6
 8002138:	d06b      	beq.n	8002212 <MCP_ReceivedPacket+0x146>
 800213a:	2b48      	cmp	r3, #72	; 0x48
 800213c:	d1f0      	bne.n	8002120 <MCP_ReceivedPacket+0x54>
        MCI_Clear_Iqdref(pMCI);
 800213e:	0028      	movs	r0, r5
 8002140:	f7ff fa0a 	bl	8001558 <MCI_Clear_Iqdref>
        MCPResponse = MCP_CMD_OK;
 8002144:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002146:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002148:	e7ec      	b.n	8002124 <MCP_ReceivedPacket+0x58>
    pHandle->txLength = 0U;
 800214a:	2500      	movs	r5, #0
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800214c:	89a0      	ldrh	r0, [r4, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800214e:	6822      	ldr	r2, [r4, #0]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002150:	3802      	subs	r0, #2
 8002152:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002154:	3102      	adds	r1, #2
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8002156:	b2db      	uxtb	r3, r3
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002158:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 800215a:	6061      	str	r1, [r4, #4]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800215c:	8992      	ldrh	r2, [r2, #12]
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 800215e:	08de      	lsrs	r6, r3, #3
    pHandle->txLength = 0U;
 8002160:	81e5      	strh	r5, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002162:	2b0f      	cmp	r3, #15
 8002164:	d937      	bls.n	80021d6 <MCP_ReceivedPacket+0x10a>
        MCPResponse = MCP_CMD_OK;
 8002166:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8002168:	200d      	movs	r0, #13
 800216a:	e7db      	b.n	8002124 <MCP_ReceivedPacket+0x58>
        if (IDLE == MCI_GetSTMState(pMCI))
 800216c:	0028      	movs	r0, r5
 800216e:	f7ff f943 	bl	80013f8 <MCI_GetSTMState>
 8002172:	2800      	cmp	r0, #0
 8002174:	d045      	beq.n	8002202 <MCP_ReceivedPacket+0x136>
          (void)MCI_StopMotor(pMCI);
 8002176:	0028      	movs	r0, r5
 8002178:	f7ff f976 	bl	8001468 <MCI_StopMotor>
          MCPResponse = MCP_CMD_OK;
 800217c:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800217e:	89e3      	ldrh	r3, [r4, #14]
 8002180:	e7d0      	b.n	8002124 <MCP_ReceivedPacket+0x58>
        if (RUN == MCI_GetSTMState(pMCI))
 8002182:	0028      	movs	r0, r5
 8002184:	f7ff f938 	bl	80013f8 <MCI_GetSTMState>
 8002188:	2806      	cmp	r0, #6
 800218a:	d1f7      	bne.n	800217c <MCP_ReceivedPacket+0xb0>
          MCI_StopRamp(pMCI);
 800218c:	0028      	movs	r0, r5
 800218e:	f7ff f9ab 	bl	80014e8 <MCI_StopRamp>
        MCPResponse = MCP_CMD_OK;
 8002192:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002194:	89e3      	ldrh	r3, [r4, #14]
 8002196:	e7c5      	b.n	8002124 <MCP_ReceivedPacket+0x58>
        (void)MCI_FaultAcknowledged(pMCI);
 8002198:	0028      	movs	r0, r5
 800219a:	f7ff f983 	bl	80014a4 <MCI_FaultAcknowledged>
        MCPResponse = MCP_CMD_OK;
 800219e:	2000      	movs	r0, #0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021a0:	89e3      	ldrh	r3, [r4, #14]
        break;
 80021a2:	e7bf      	b.n	8002124 <MCP_ReceivedPacket+0x58>
        pHandle->txLength = 4U;
 80021a4:	2304      	movs	r3, #4
        *pHandle->txBuffer = MCP_VERSION;
 80021a6:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 80021a8:	81e3      	strh	r3, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 80021aa:	68a3      	ldr	r3, [r4, #8]
        MCPResponse = MCP_CMD_OK;
 80021ac:	2000      	movs	r0, #0
        *pHandle->txBuffer = MCP_VERSION;
 80021ae:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021b0:	89e3      	ldrh	r3, [r4, #14]
        break;
 80021b2:	e7b7      	b.n	8002124 <MCP_ReceivedPacket+0x58>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80021b4:	4661      	mov	r1, ip
 80021b6:	0020      	movs	r0, r4
 80021b8:	f7ff fec8 	bl	8001f4c <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021bc:	89e3      	ldrh	r3, [r4, #14]
        break;
 80021be:	e7b1      	b.n	8002124 <MCP_ReceivedPacket+0x58>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80021c0:	4661      	mov	r1, ip
 80021c2:	0020      	movs	r0, r4
 80021c4:	f7ff ff36 	bl	8002034 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021c8:	89e3      	ldrh	r3, [r4, #14]
        break;
 80021ca:	e7ab      	b.n	8002124 <MCP_ReceivedPacket+0x58>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 80021cc:	0028      	movs	r0, r5
 80021ce:	f7ff f931 	bl	8001434 <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021d2:	89e3      	ldrh	r3, [r4, #14]
 80021d4:	e7a6      	b.n	8002124 <MCP_ReceivedPacket+0x58>
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80021d6:	3a01      	subs	r2, #1
 80021d8:	b212      	sxth	r2, r2
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MCP_ReceivedPacket+0x154>)
 80021dc:	00b6      	lsls	r6, r6, #2
 80021de:	58f5      	ldr	r5, [r6, r3]
 80021e0:	2d00      	cmp	r5, #0
 80021e2:	d0c0      	beq.n	8002166 <MCP_ReceivedPacket+0x9a>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80021e4:	68a3      	ldr	r3, [r4, #8]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	0023      	movs	r3, r4
 80021ea:	330e      	adds	r3, #14
 80021ec:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021ee:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80021f0:	e798      	b.n	8002124 <MCP_ReceivedPacket+0x58>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 80021f2:	68a3      	ldr	r3, [r4, #8]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	0023      	movs	r3, r4
 80021f8:	330e      	adds	r3, #14
 80021fa:	f7ff f891 	bl	8001320 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80021fe:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002200:	e790      	b.n	8002124 <MCP_ReceivedPacket+0x58>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002202:	0028      	movs	r0, r5
 8002204:	f7ff f916 	bl	8001434 <MCI_StartWithPolarizationMotor>
 8002208:	2301      	movs	r3, #1
 800220a:	4058      	eors	r0, r3
 800220c:	b2c0      	uxtb	r0, r0
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800220e:	89e3      	ldrh	r3, [r4, #14]
 8002210:	e788      	b.n	8002124 <MCP_ReceivedPacket+0x58>
    switch (command)
 8002212:	2600      	movs	r6, #0
 8002214:	e7e1      	b.n	80021da <MCP_ReceivedPacket+0x10e>
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	20000650 	.word	0x20000650
 800221c:	08006c04 	.word	0x08006c04
 8002220:	200007d0 	.word	0x200007d0

08002224 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002224:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002226:	f003 f87d 	bl	8005324 <HAL_RCC_GetHCLKFreq>
 800222a:	21fa      	movs	r1, #250	; 0xfa
 800222c:	00c9      	lsls	r1, r1, #3
 800222e:	f7fd ff6b 	bl	8000108 <__udivsi3>
 8002232:	f002 fbe1 	bl	80049f8 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002236:	2001      	movs	r0, #1
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <MX_MotorControl_Init+0x2c>)
 800223a:	2200      	movs	r2, #0
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	4240      	negs	r0, r0
 8002240:	f002 fb9c 	bl	800497c <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002244:	4803      	ldr	r0, [pc, #12]	; (8002254 <MX_MotorControl_Init+0x30>)
 8002246:	f7ff faa5 	bl	8001794 <MCboot>
  mc_lock_pins();
 800224a:	f7ff fe01 	bl	8001e50 <mc_lock_pins>
}
 800224e:	bd10      	pop	{r4, pc}
 8002250:	20000384 	.word	0x20000384
 8002254:	200007d8 	.word	0x200007d8

08002258 <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 8002258:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 800225e:	bd10      	pop	{r4, pc}

08002260 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002262:	b083      	sub	sp, #12
 8002264:	9101      	str	r1, [sp, #4]
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002266:	b20a      	sxth	r2, r1
{
 8002268:	000b      	movs	r3, r1
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800226a:	214e      	movs	r1, #78	; 0x4e
 800226c:	5a41      	ldrh	r1, [r0, r1]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800226e:	141b      	asrs	r3, r3, #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002270:	4351      	muls	r1, r2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002272:	2272      	movs	r2, #114	; 0x72
 8002274:	5a85      	ldrh	r5, [r0, r2]
 8002276:	436b      	muls	r3, r5
 8002278:	005b      	lsls	r3, r3, #1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800227a:	1acf      	subs	r7, r1, r3
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800227c:	425e      	negs	r6, r3
    wY = (wUBeta + wUAlpha) / 2;
 800227e:	0ffc      	lsrs	r4, r7, #31
 8002280:	19e4      	adds	r4, r4, r7
    wZ = (wUBeta - wUAlpha) / 2;
 8002282:	1a71      	subs	r1, r6, r1
    wY = (wUBeta + wUAlpha) / 2;
 8002284:	1063      	asrs	r3, r4, #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002286:	0fcc      	lsrs	r4, r1, #31
 8002288:	1864      	adds	r4, r4, r1
 800228a:	1064      	asrs	r4, r4, #1

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 800228c:	1c7a      	adds	r2, r7, #1
 800228e:	db66      	blt.n	800235e <PWMC_SetPhaseVoltage+0xfe>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002290:	1c4a      	adds	r2, r1, #1
 8002292:	db3e      	blt.n	8002312 <PWMC_SetPhaseVoltage+0xb2>
      {
        pHandle->Sector = SECTOR_2;
 8002294:	227c      	movs	r2, #124	; 0x7c
 8002296:	2601      	movs	r6, #1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002298:	1b1c      	subs	r4, r3, r4
 800229a:	17e3      	asrs	r3, r4, #31
 800229c:	039b      	lsls	r3, r3, #14
 800229e:	0b9b      	lsrs	r3, r3, #14
 80022a0:	191b      	adds	r3, r3, r4
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072);

        if(true == pHandle->SingleShuntTopology)
 80022a2:	2487      	movs	r4, #135	; 0x87
        pHandle->Sector = SECTOR_2;
 80022a4:	5486      	strb	r6, [r0, r2]
        wTimePhB = wTimePhA + (wZ / 131072);
 80022a6:	17ca      	asrs	r2, r1, #31
 80022a8:	0392      	lsls	r2, r2, #14
 80022aa:	0b92      	lsrs	r2, r2, #14
 80022ac:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhA - (wY / 131072);
 80022ae:	17f9      	asrs	r1, r7, #31
 80022b0:	0389      	lsls	r1, r1, #14
 80022b2:	0b89      	lsrs	r1, r1, #14
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80022b4:	149b      	asrs	r3, r3, #18
 80022b6:	08ad      	lsrs	r5, r5, #2
        wTimePhC = wTimePhA - (wY / 131072);
 80022b8:	19c9      	adds	r1, r1, r7
        if(true == pHandle->SingleShuntTopology)
 80022ba:	5d04      	ldrb	r4, [r0, r4]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80022bc:	195b      	adds	r3, r3, r5
        wTimePhB = wTimePhA + (wZ / 131072);
 80022be:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhA - (wY / 131072);
 80022c0:	1489      	asrs	r1, r1, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 80022c2:	18d2      	adds	r2, r2, r3
        wTimePhC = wTimePhA - (wY / 131072);
 80022c4:	1a59      	subs	r1, r3, r1
        if(true == pHandle->SingleShuntTopology)
 80022c6:	2c00      	cmp	r4, #0
 80022c8:	d169      	bne.n	800239e <PWMC_SetPhaseVoltage+0x13e>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 80022ca:	b297      	uxth	r7, r2
        pHandle->midDuty = (uint16_t)wTimePhA;
 80022cc:	b29e      	uxth	r6, r3
        pHandle->highDuty = (uint16_t)wTimePhC;
 80022ce:	b28d      	uxth	r5, r1
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80022d0:	2458      	movs	r4, #88	; 0x58
 80022d2:	5307      	strh	r7, [r0, r4]
          pHandle->midDuty = (uint16_t)wTimePhB;
 80022d4:	3402      	adds	r4, #2
 80022d6:	5306      	strh	r6, [r0, r4]
          pHandle->highDuty = (uint16_t)wTimePhA;
 80022d8:	3402      	adds	r4, #2
 80022da:	5305      	strh	r5, [r0, r4]
            pHandle->highDuty = (uint16_t)wTimePhC;
        }
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80022dc:	43dc      	mvns	r4, r3
 80022de:	17e4      	asrs	r4, r4, #31
 80022e0:	4023      	ands	r3, r4
 80022e2:	2450      	movs	r4, #80	; 0x50
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	5303      	strh	r3, [r0, r4]
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80022e8:	43d4      	mvns	r4, r2
 80022ea:	17e4      	asrs	r4, r4, #31
 80022ec:	4022      	ands	r2, r4
 80022ee:	2452      	movs	r4, #82	; 0x52
 80022f0:	b292      	uxth	r2, r2
 80022f2:	5302      	strh	r2, [r0, r4]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80022f4:	43cc      	mvns	r4, r1
 80022f6:	17e4      	asrs	r4, r4, #31
 80022f8:	4021      	ands	r1, r4
 80022fa:	2454      	movs	r4, #84	; 0x54
 80022fc:	b289      	uxth	r1, r1
 80022fe:	5301      	strh	r1, [r0, r4]

    if (1U == pHandle->DTTest)
 8002300:	341c      	adds	r4, #28
 8002302:	5b04      	ldrh	r4, [r0, r4]
 8002304:	2c01      	cmp	r4, #1
 8002306:	d100      	bne.n	800230a <PWMC_SetPhaseVoltage+0xaa>
 8002308:	e08b      	b.n	8002422 <PWMC_SetPhaseVoltage+0x1c2>
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800230a:	6943      	ldr	r3, [r0, #20]
 800230c:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800230e:	b003      	add	sp, #12
 8002310:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( wX <= 0 )
 8002312:	2e00      	cmp	r6, #0
 8002314:	dd66      	ble.n	80023e4 <PWMC_SetPhaseVoltage+0x184>
          pHandle->Sector = SECTOR_1;
 8002316:	237c      	movs	r3, #124	; 0x7c
 8002318:	2200      	movs	r2, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800231a:	1b34      	subs	r4, r6, r4
          pHandle->Sector = SECTOR_1;
 800231c:	54c2      	strb	r2, [r0, r3]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800231e:	17e3      	asrs	r3, r4, #31
 8002320:	039b      	lsls	r3, r3, #14
 8002322:	0b9b      	lsrs	r3, r3, #14
 8002324:	191b      	adds	r3, r3, r4
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002326:	247f      	movs	r4, #127	; 0x7f
          wTimePhB = wTimePhA + (wZ / 131072);
 8002328:	17ca      	asrs	r2, r1, #31
 800232a:	0392      	lsls	r2, r2, #14
 800232c:	0b92      	lsrs	r2, r2, #14
 800232e:	1852      	adds	r2, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 8002330:	17f1      	asrs	r1, r6, #31
 8002332:	03c9      	lsls	r1, r1, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002334:	149b      	asrs	r3, r3, #18
 8002336:	08ad      	lsrs	r5, r5, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002338:	0bc9      	lsrs	r1, r1, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800233a:	195b      	adds	r3, r3, r5
          wTimePhB = wTimePhA + (wZ / 131072);
 800233c:	1492      	asrs	r2, r2, #18
          wTimePhC = wTimePhB - (wX / 131072);
 800233e:	1989      	adds	r1, r1, r6
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002340:	5d04      	ldrb	r4, [r0, r4]
          wTimePhB = wTimePhA + (wZ / 131072);
 8002342:	18d2      	adds	r2, r2, r3
          wTimePhC = wTimePhB - (wX / 131072);
 8002344:	1449      	asrs	r1, r1, #17
 8002346:	1a51      	subs	r1, r2, r1
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002348:	2c00      	cmp	r4, #0
 800234a:	d104      	bne.n	8002356 <PWMC_SetPhaseVoltage+0xf6>
 800234c:	3487      	adds	r4, #135	; 0x87
 800234e:	5d04      	ldrb	r4, [r0, r4]
 8002350:	2c00      	cmp	r4, #0
 8002352:	d100      	bne.n	8002356 <PWMC_SetPhaseVoltage+0xf6>
 8002354:	e0ba      	b.n	80024cc <PWMC_SetPhaseVoltage+0x26c>
 8002356:	2702      	movs	r7, #2
 8002358:	2601      	movs	r6, #1
 800235a:	2500      	movs	r5, #0
 800235c:	e7b8      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>
      if (wZ < 0)
 800235e:	1c4a      	adds	r2, r1, #1
 8002360:	db79      	blt.n	8002456 <PWMC_SetPhaseVoltage+0x1f6>
        if (wX <= 0)
 8002362:	2e00      	cmp	r6, #0
 8002364:	dd1f      	ble.n	80023a6 <PWMC_SetPhaseVoltage+0x146>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002366:	1b9c      	subs	r4, r3, r6
          pHandle->Sector = SECTOR_3;
 8002368:	227c      	movs	r2, #124	; 0x7c
 800236a:	2102      	movs	r1, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800236c:	17e3      	asrs	r3, r4, #31
 800236e:	039b      	lsls	r3, r3, #14
 8002370:	0b9b      	lsrs	r3, r3, #14
 8002372:	191b      	adds	r3, r3, r4
          if(true == pHandle->SingleShuntTopology)
 8002374:	2487      	movs	r4, #135	; 0x87
          pHandle->Sector = SECTOR_3;
 8002376:	5481      	strb	r1, [r0, r2]
          wTimePhC = wTimePhA - (wY / 131072);
 8002378:	17f9      	asrs	r1, r7, #31
 800237a:	0389      	lsls	r1, r1, #14
 800237c:	0b89      	lsrs	r1, r1, #14
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800237e:	149b      	asrs	r3, r3, #18
 8002380:	08ad      	lsrs	r5, r5, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002382:	19c9      	adds	r1, r1, r7
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002384:	195b      	adds	r3, r3, r5
          wTimePhC = wTimePhA - (wY / 131072);
 8002386:	1489      	asrs	r1, r1, #18
          if(true == pHandle->SingleShuntTopology)
 8002388:	5d04      	ldrb	r4, [r0, r4]
          wTimePhC = wTimePhA - (wY / 131072);
 800238a:	1a59      	subs	r1, r3, r1
          wTimePhB = wTimePhC + (wX / 131072);
 800238c:	1472      	asrs	r2, r6, #17
 800238e:	1852      	adds	r2, r2, r1
          if(true == pHandle->SingleShuntTopology)
 8002390:	2c00      	cmp	r4, #0
 8002392:	d000      	beq.n	8002396 <PWMC_SetPhaseVoltage+0x136>
 8002394:	e08e      	b.n	80024b4 <PWMC_SetPhaseVoltage+0x254>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002396:	b297      	uxth	r7, r2
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002398:	b28e      	uxth	r6, r1
          pHandle->highDuty = (uint16_t)wTimePhA;
 800239a:	b29d      	uxth	r5, r3
 800239c:	e798      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>
 800239e:	2702      	movs	r7, #2
 80023a0:	2600      	movs	r6, #0
 80023a2:	2501      	movs	r5, #1
 80023a4:	e794      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>
          pHandle->Sector = SECTOR_4;
 80023a6:	237c      	movs	r3, #124	; 0x7c
 80023a8:	2203      	movs	r2, #3
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80023aa:	1b34      	subs	r4, r6, r4
          pHandle->Sector = SECTOR_4;
 80023ac:	54c2      	strb	r2, [r0, r3]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80023ae:	17e3      	asrs	r3, r4, #31
 80023b0:	039b      	lsls	r3, r3, #14
 80023b2:	0b9b      	lsrs	r3, r3, #14
 80023b4:	191b      	adds	r3, r3, r4
          if(true == pHandle->SingleShuntTopology)
 80023b6:	2487      	movs	r4, #135	; 0x87
          wTimePhB = wTimePhA + (wZ / 131072);
 80023b8:	17ca      	asrs	r2, r1, #31
 80023ba:	0392      	lsls	r2, r2, #14
 80023bc:	0b92      	lsrs	r2, r2, #14
 80023be:	1852      	adds	r2, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 80023c0:	17f1      	asrs	r1, r6, #31
 80023c2:	03c9      	lsls	r1, r1, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80023c4:	149b      	asrs	r3, r3, #18
 80023c6:	08ad      	lsrs	r5, r5, #2
          wTimePhC = wTimePhB - (wX / 131072);
 80023c8:	0bc9      	lsrs	r1, r1, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80023ca:	195b      	adds	r3, r3, r5
          wTimePhB = wTimePhA + (wZ / 131072);
 80023cc:	1492      	asrs	r2, r2, #18
          wTimePhC = wTimePhB - (wX / 131072);
 80023ce:	1989      	adds	r1, r1, r6
          if(true == pHandle->SingleShuntTopology)
 80023d0:	5d04      	ldrb	r4, [r0, r4]
          wTimePhB = wTimePhA + (wZ / 131072);
 80023d2:	18d2      	adds	r2, r2, r3
          wTimePhC = wTimePhB - (wX / 131072);
 80023d4:	1449      	asrs	r1, r1, #17
 80023d6:	1a51      	subs	r1, r2, r1
          if(true == pHandle->SingleShuntTopology)
 80023d8:	2c00      	cmp	r4, #0
 80023da:	d073      	beq.n	80024c4 <PWMC_SetPhaseVoltage+0x264>
 80023dc:	2700      	movs	r7, #0
 80023de:	2601      	movs	r6, #1
 80023e0:	2502      	movs	r5, #2
 80023e2:	e775      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80023e4:	1b9c      	subs	r4, r3, r6
          pHandle->Sector = SECTOR_6;
 80023e6:	227c      	movs	r2, #124	; 0x7c
 80023e8:	2105      	movs	r1, #5
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80023ea:	17e3      	asrs	r3, r4, #31
 80023ec:	039b      	lsls	r3, r3, #14
 80023ee:	0b9b      	lsrs	r3, r3, #14
 80023f0:	191b      	adds	r3, r3, r4
          if(true == pHandle->SingleShuntTopology)
 80023f2:	2487      	movs	r4, #135	; 0x87
          pHandle->Sector = SECTOR_6;
 80023f4:	5481      	strb	r1, [r0, r2]
          wTimePhC = wTimePhA - (wY / 131072);
 80023f6:	17f9      	asrs	r1, r7, #31
 80023f8:	0389      	lsls	r1, r1, #14
          wTimePhB = wTimePhC + (wX / 131072);
 80023fa:	17f2      	asrs	r2, r6, #31
          wTimePhC = wTimePhA - (wY / 131072);
 80023fc:	0b89      	lsrs	r1, r1, #14
          wTimePhB = wTimePhC + (wX / 131072);
 80023fe:	03d2      	lsls	r2, r2, #15
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002400:	149b      	asrs	r3, r3, #18
 8002402:	08ad      	lsrs	r5, r5, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002404:	19c9      	adds	r1, r1, r7
          wTimePhB = wTimePhC + (wX / 131072);
 8002406:	0bd2      	lsrs	r2, r2, #15
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002408:	195b      	adds	r3, r3, r5
          wTimePhC = wTimePhA - (wY / 131072);
 800240a:	1489      	asrs	r1, r1, #18
          wTimePhB = wTimePhC + (wX / 131072);
 800240c:	1992      	adds	r2, r2, r6
          if(true == pHandle->SingleShuntTopology)
 800240e:	5d04      	ldrb	r4, [r0, r4]
          wTimePhC = wTimePhA - (wY / 131072);
 8002410:	1a59      	subs	r1, r3, r1
          wTimePhB = wTimePhC + (wX / 131072);
 8002412:	1452      	asrs	r2, r2, #17
 8002414:	1852      	adds	r2, r2, r1
          if(true == pHandle->SingleShuntTopology)
 8002416:	2c00      	cmp	r4, #0
 8002418:	d050      	beq.n	80024bc <PWMC_SetPhaseVoltage+0x25c>
 800241a:	2701      	movs	r7, #1
 800241c:	2602      	movs	r6, #2
 800241e:	2500      	movs	r5, #0
 8002420:	e756      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>
      if (pHandle->Ia > 0)
 8002422:	3461      	adds	r4, #97	; 0x61
 8002424:	5f04      	ldrsh	r4, [r0, r4]
 8002426:	2c00      	cmp	r4, #0
 8002428:	dd3b      	ble.n	80024a2 <PWMC_SetPhaseVoltage+0x242>
        pHandle->CntPhA += pHandle->DTCompCnt;
 800242a:	2474      	movs	r4, #116	; 0x74
 800242c:	5b04      	ldrh	r4, [r0, r4]
 800242e:	18e3      	adds	r3, r4, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	2550      	movs	r5, #80	; 0x50
 8002434:	5343      	strh	r3, [r0, r5]
      if (pHandle->Ib > 0)
 8002436:	2364      	movs	r3, #100	; 0x64
 8002438:	5ec3      	ldrsh	r3, [r0, r3]
 800243a:	2b00      	cmp	r3, #0
 800243c:	dd2e      	ble.n	800249c <PWMC_SetPhaseVoltage+0x23c>
        pHandle->CntPhB += pHandle->DTCompCnt;
 800243e:	1912      	adds	r2, r2, r4
 8002440:	b292      	uxth	r2, r2
 8002442:	2352      	movs	r3, #82	; 0x52
 8002444:	52c2      	strh	r2, [r0, r3]
      if (pHandle->Ic > 0)
 8002446:	3314      	adds	r3, #20
 8002448:	5ec3      	ldrsh	r3, [r0, r3]
 800244a:	2b00      	cmp	r3, #0
 800244c:	dd22      	ble.n	8002494 <PWMC_SetPhaseVoltage+0x234>
        pHandle->CntPhC += pHandle->DTCompCnt;
 800244e:	2354      	movs	r3, #84	; 0x54
 8002450:	190c      	adds	r4, r1, r4
 8002452:	52c4      	strh	r4, [r0, r3]
 8002454:	e759      	b.n	800230a <PWMC_SetPhaseVoltage+0xaa>
        pHandle->Sector = SECTOR_5;
 8002456:	227c      	movs	r2, #124	; 0x7c
 8002458:	2604      	movs	r6, #4
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800245a:	1b1c      	subs	r4, r3, r4
 800245c:	17e3      	asrs	r3, r4, #31
 800245e:	039b      	lsls	r3, r3, #14
 8002460:	0b9b      	lsrs	r3, r3, #14
 8002462:	191b      	adds	r3, r3, r4
        if(true == pHandle->SingleShuntTopology)
 8002464:	2487      	movs	r4, #135	; 0x87
        pHandle->Sector = SECTOR_5;
 8002466:	5486      	strb	r6, [r0, r2]
        wTimePhB = wTimePhA + (wZ / 131072);
 8002468:	17ca      	asrs	r2, r1, #31
 800246a:	0392      	lsls	r2, r2, #14
 800246c:	0b92      	lsrs	r2, r2, #14
 800246e:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002470:	17f9      	asrs	r1, r7, #31
 8002472:	0389      	lsls	r1, r1, #14
 8002474:	0b89      	lsrs	r1, r1, #14
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002476:	149b      	asrs	r3, r3, #18
 8002478:	08ad      	lsrs	r5, r5, #2
        wTimePhC = wTimePhA - (wY / 131072) ;
 800247a:	19c9      	adds	r1, r1, r7
        if(true == pHandle->SingleShuntTopology)
 800247c:	5d04      	ldrb	r4, [r0, r4]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800247e:	195b      	adds	r3, r3, r5
        wTimePhB = wTimePhA + (wZ / 131072);
 8002480:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002482:	1489      	asrs	r1, r1, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 8002484:	18d2      	adds	r2, r2, r3
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002486:	1a59      	subs	r1, r3, r1
        if(true == pHandle->SingleShuntTopology)
 8002488:	2c00      	cmp	r4, #0
 800248a:	d10f      	bne.n	80024ac <PWMC_SetPhaseVoltage+0x24c>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800248c:	b28f      	uxth	r7, r1
          pHandle->midDuty = (uint16_t)wTimePhA;
 800248e:	b29e      	uxth	r6, r3
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002490:	b295      	uxth	r5, r2
 8002492:	e71d      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002494:	2354      	movs	r3, #84	; 0x54
 8002496:	1b09      	subs	r1, r1, r4
 8002498:	52c1      	strh	r1, [r0, r3]
 800249a:	e736      	b.n	800230a <PWMC_SetPhaseVoltage+0xaa>
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800249c:	1b12      	subs	r2, r2, r4
 800249e:	b292      	uxth	r2, r2
 80024a0:	e7cf      	b.n	8002442 <PWMC_SetPhaseVoltage+0x1e2>
        pHandle->CntPhA -= pHandle->DTCompCnt;
 80024a2:	2474      	movs	r4, #116	; 0x74
 80024a4:	5b04      	ldrh	r4, [r0, r4]
 80024a6:	1b1b      	subs	r3, r3, r4
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	e7c2      	b.n	8002432 <PWMC_SetPhaseVoltage+0x1d2>
 80024ac:	2701      	movs	r7, #1
 80024ae:	2600      	movs	r6, #0
 80024b0:	2502      	movs	r5, #2
 80024b2:	e70d      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>
 80024b4:	2700      	movs	r7, #0
 80024b6:	2602      	movs	r6, #2
 80024b8:	2501      	movs	r5, #1
 80024ba:	e709      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80024bc:	b29f      	uxth	r7, r3
            pHandle->midDuty = (uint16_t)wTimePhC;
 80024be:	b28e      	uxth	r6, r1
            pHandle->highDuty = (uint16_t)wTimePhB;
 80024c0:	b295      	uxth	r5, r2
 80024c2:	e705      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80024c4:	b28f      	uxth	r7, r1
          pHandle->midDuty = (uint16_t)wTimePhB;
 80024c6:	b296      	uxth	r6, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80024c8:	b29d      	uxth	r5, r3
 80024ca:	e701      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80024cc:	b29f      	uxth	r7, r3
            pHandle->midDuty = (uint16_t)wTimePhB;
 80024ce:	b296      	uxth	r6, r2
            pHandle->highDuty = (uint16_t)wTimePhC;
 80024d0:	b28d      	uxth	r5, r1
 80024d2:	e6fd      	b.n	80022d0 <PWMC_SetPhaseVoltage+0x70>

080024d4 <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 80024d4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80024d6:	6843      	ldr	r3, [r0, #4]
 80024d8:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80024da:	bd10      	pop	{r4, pc}

080024dc <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 80024dc:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80024de:	6883      	ldr	r3, [r0, #8]
 80024e0:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80024e2:	bd10      	pop	{r4, pc}

080024e4 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80024e8:	2900      	cmp	r1, #0
 80024ea:	d011      	beq.n	8002510 <PWMC_CurrentReadingCalibr+0x2c>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 80024ec:	2901      	cmp	r1, #1
 80024ee:	d002      	beq.n	80024f6 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80024f0:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80024f2:	0028      	movs	r0, r5
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80024f6:	2260      	movs	r2, #96	; 0x60
 80024f8:	5a83      	ldrh	r3, [r0, r2]
        retVal = true;
 80024fa:	2501      	movs	r5, #1
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f8      	beq.n	80024f2 <PWMC_CurrentReadingCalibr+0xe>
        pHandle->OffCalibrWaitTimeCounter--;
 8002500:	3b01      	subs	r3, #1
 8002502:	b29b      	uxth	r3, r3
 8002504:	5283      	strh	r3, [r0, r2]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f2      	bne.n	80024f0 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800250a:	68c3      	ldr	r3, [r0, #12]
 800250c:	4798      	blx	r3
          retVal = true;
 800250e:	e7f0      	b.n	80024f2 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002510:	f7ff ffe0 	bl	80024d4 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002514:	0020      	movs	r0, r4
 8002516:	68e3      	ldr	r3, [r4, #12]
 8002518:	4798      	blx	r3
      retVal = true;
 800251a:	2501      	movs	r5, #1
 800251c:	e7e9      	b.n	80024f2 <PWMC_CurrentReadingCalibr+0xe>
 800251e:	46c0      	nop			; (mov r8, r8)

08002520 <PWMC_CalcPhaseCurrentsEst>:
  * @param  pHandle: Handler of the current instance of the PWM component.
  * @param  Iqd: Structure that will receive Iq and Id currents.
  * @param  hElAngledpp: Electrical angle.
  */
void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp)
{
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	0004      	movs	r4, r0
 8002526:	9101      	str	r1, [sp, #4]
 8002528:	000e      	movs	r6, r1
 800252a:	1c0b      	adds	r3, r1, #0
 800252c:	0011      	movs	r1, r2
#endif
    qd_t idq_ave;
    alphabeta_t ialpha_beta;
    int32_t temp1, temp2;

    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 800252e:	226e      	movs	r2, #110	; 0x6e
 8002530:	5e80      	ldrsh	r0, [r0, r2]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8002532:	6b62      	ldr	r2, [r4, #52]	; 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8002534:	b21b      	sxth	r3, r3
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8002536:	13d5      	asrs	r5, r2, #15
 8002538:	1b5b      	subs	r3, r3, r5
 800253a:	4343      	muls	r3, r0
 800253c:	189b      	adds	r3, r3, r2
 800253e:	6363      	str	r3, [r4, #52]	; 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8002540:	ad02      	add	r5, sp, #8
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002542:	13db      	asrs	r3, r3, #15
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8002544:	802b      	strh	r3, [r5, #0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8002546:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8002548:	1436      	asrs	r6, r6, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 800254a:	13da      	asrs	r2, r3, #15
 800254c:	1ab6      	subs	r6, r6, r2
 800254e:	4370      	muls	r0, r6
 8002550:	18c0      	adds	r0, r0, r3
 8002552:	63a0      	str	r0, [r4, #56]	; 0x38
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002554:	13c0      	asrs	r0, r0, #15
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8002556:	8068      	strh	r0, [r5, #2]

    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8002558:	9802      	ldr	r0, [sp, #8]
 800255a:	f7ff f8cf 	bl	80016fc <MCM_Rev_Park>

    /* Reverse Clarke */

    /*Ia*/
    pHandle->IaEst = ialpha_beta.alpha;
 800255e:	2268      	movs	r2, #104	; 0x68
    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8002560:	b203      	sxth	r3, r0
    pHandle->IaEst = ialpha_beta.alpha;
 8002562:	52a3      	strh	r3, [r4, r2]

    temp1 = - ialpha_beta.alpha;
 8002564:	425b      	negs	r3, r3
#else
    temp2 = (int32_t)(ialpha_beta.beta) * (int32_t)SQRT3FACTOR / 32768;
#endif

    /* Ib */
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8002566:	0c00      	lsrs	r0, r0, #16
 8002568:	b29b      	uxth	r3, r3
 800256a:	1a19      	subs	r1, r3, r0
 800256c:	b209      	sxth	r1, r1
 800256e:	0fca      	lsrs	r2, r1, #31
 8002570:	1852      	adds	r2, r2, r1
 8002572:	216a      	movs	r1, #106	; 0x6a

    /* Ic */
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8002574:	181b      	adds	r3, r3, r0
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8002576:	1052      	asrs	r2, r2, #1
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8002578:	b21b      	sxth	r3, r3
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 800257a:	5262      	strh	r2, [r4, r1]
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 800257c:	0fda      	lsrs	r2, r3, #31
 800257e:	18d3      	adds	r3, r2, r3
 8002580:	226c      	movs	r2, #108	; 0x6c
 8002582:	105b      	asrs	r3, r3, #1
 8002584:	52a3      	strh	r3, [r4, r2]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8002586:	b004      	add	sp, #16
 8002588:	bd70      	pop	{r4, r5, r6, pc}
 800258a:	46c0      	nop			; (mov r8, r8)

0800258c <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 800258c:	2385      	movs	r3, #133	; 0x85
 800258e:	5cc3      	ldrb	r3, [r0, r3]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <PWMC_OCP_Handler+0x10>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8002594:	337d      	adds	r3, #125	; 0x7d
 8002596:	5cc3      	ldrb	r3, [r0, r3]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d004      	beq.n	80025a6 <PWMC_OCP_Handler+0x1a>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 800259c:	2382      	movs	r3, #130	; 0x82
 800259e:	2201      	movs	r2, #1
 80025a0:	54c2      	strb	r2, [r0, r3]
    tempPointer = &(pHandle->Motor);
 80025a2:	307a      	adds	r0, #122	; 0x7a
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80025a4:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 80025a6:	2248      	movs	r2, #72	; 0x48
 80025a8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80025aa:	5a82      	ldrh	r2, [r0, r2]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 80025ae:	224a      	movs	r2, #74	; 0x4a
 80025b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025b2:	5a82      	ldrh	r2, [r0, r2]
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 80025b6:	224c      	movs	r2, #76	; 0x4c
 80025b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80025ba:	5a82      	ldrh	r2, [r0, r2]
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025be:	e7ed      	b.n	800259c <PWMC_OCP_Handler+0x10>

080025c0 <PWMC_IsFaultOccurred>:
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80025c0:	2283      	movs	r2, #131	; 0x83
{
 80025c2:	b510      	push	{r4, lr}
  if (true == pHandle->OverVoltageFlag)
 80025c4:	5c81      	ldrb	r1, [r0, r2]
{
 80025c6:	0003      	movs	r3, r0
  if (true == pHandle->OverVoltageFlag)
 80025c8:	2900      	cmp	r1, #0
 80025ca:	d015      	beq.n	80025f8 <PWMC_IsFaultOccurred+0x38>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80025cc:	2100      	movs	r1, #0
 80025ce:	2442      	movs	r4, #66	; 0x42
 80025d0:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 80025d2:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80025d4:	2282      	movs	r2, #130	; 0x82
 80025d6:	5c99      	ldrb	r1, [r3, r2]
 80025d8:	2900      	cmp	r1, #0
 80025da:	d002      	beq.n	80025e2 <PWMC_IsFaultOccurred+0x22>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80025dc:	2100      	movs	r1, #0
    retVal |= MC_OVER_CURR;
 80025de:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 80025e0:	5499      	strb	r1, [r3, r2]
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80025e2:	2284      	movs	r2, #132	; 0x84
 80025e4:	5c99      	ldrb	r1, [r3, r2]
 80025e6:	2900      	cmp	r1, #0
 80025e8:	d005      	beq.n	80025f6 <PWMC_IsFaultOccurred+0x36>
  {
    retVal |= MC_DP_FAULT;
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	00c9      	lsls	r1, r1, #3
 80025ee:	4308      	orrs	r0, r1
    pHandle->driverProtectionFlag = false;
 80025f0:	2100      	movs	r1, #0
    retVal |= MC_DP_FAULT;
 80025f2:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80025f4:	5499      	strb	r1, [r3, r2]
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80025f6:	bd10      	pop	{r4, pc}
 80025f8:	2440      	movs	r4, #64	; 0x40
  uint16_t retVal = MC_NO_FAULTS;
 80025fa:	2000      	movs	r0, #0
 80025fc:	e7ea      	b.n	80025d4 <PWMC_IsFaultOccurred+0x14>
 80025fe:	46c0      	nop			; (mov r8, r8)

08002600 <R1_GetPhaseCurrents>:
  * @retval Ia and Ib current in Curr_Components format
  */
__weak void R1_GetPhaseCurrents(PWMC_Handle_t * pHdl, ab_t * pStator_Currents)
{
  PWMC_R1_Handle_t * pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002600:	23cc      	movs	r3, #204	; 0xcc
 8002602:	58c3      	ldr	r3, [r0, r3]
{
 8002604:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002606:	685a      	ldr	r2, [r3, #4]
  int16_t hCurrA = 0;
  int16_t hCurrB = 0;
  int16_t hCurrC = 0;

  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 8002608:	2400      	movs	r4, #0
 800260a:	23c8      	movs	r3, #200	; 0xc8
 800260c:	54c4      	strb	r4, [r0, r3]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800260e:	6853      	ldr	r3, [r2, #4]
 8002610:	3470      	adds	r4, #112	; 0x70
 8002612:	43a3      	bics	r3, r4
 8002614:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  /* First sampling point */
  wAux1 = (int32_t) pHandle->CurConv[0] ;
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8002616:	22a0      	movs	r2, #160	; 0xa0
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 8002618:	23b4      	movs	r3, #180	; 0xb4
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 800261a:	5884      	ldr	r4, [r0, r2]
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 800261c:	5ac3      	ldrh	r3, [r0, r3]

  /* Check saturation */
  if (wAux1 > -INT16_MAX)
 800261e:	4a8c      	ldr	r2, [pc, #560]	; (8002850 <R1_GetPhaseCurrents+0x250>)
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8002620:	1b1b      	subs	r3, r3, r4
  if (wAux1 > -INT16_MAX)
 8002622:	4293      	cmp	r3, r2
 8002624:	db16      	blt.n	8002654 <R1_GetPhaseCurrents+0x54>
  {
    if (wAux1 < INT16_MAX)
 8002626:	4a8b      	ldr	r2, [pc, #556]	; (8002854 <R1_GetPhaseCurrents+0x254>)
 8002628:	4293      	cmp	r3, r2
 800262a:	dc17      	bgt.n	800265c <R1_GetPhaseCurrents+0x5c>
  else
  {
    wAux1 = -INT16_MAX;
  }
   /* Second sampling point */
  wAux2 = (int32_t) pHandle->CurConv[1] ;
 800262c:	22b6      	movs	r2, #182	; 0xb6
 800262e:	5a82      	ldrh	r2, [r0, r2]
  wAux2 -= (int32_t)(pHandle->PhaseOffset);
 8002630:	1b12      	subs	r2, r2, r4

  /* Check saturation */
  if (wAux2 > -INT16_MAX)
 8002632:	4c87      	ldr	r4, [pc, #540]	; (8002850 <R1_GetPhaseCurrents+0x250>)
 8002634:	42a2      	cmp	r2, r4
 8002636:	db0b      	blt.n	8002650 <R1_GetPhaseCurrents+0x50>
  {
    if (wAux2 < INT16_MAX)
 8002638:	4c86      	ldr	r4, [pc, #536]	; (8002854 <R1_GetPhaseCurrents+0x254>)
 800263a:	42a2      	cmp	r2, r4
 800263c:	dc0c      	bgt.n	8002658 <R1_GetPhaseCurrents+0x58>
  else
  {
    wAux2 = -INT16_MAX;
  }

  switch (pHandle->_Super.Sector)
 800263e:	247c      	movs	r4, #124	; 0x7c
 8002640:	5d04      	ldrb	r4, [r0, r4]
 8002642:	2c05      	cmp	r4, #5
 8002644:	d900      	bls.n	8002648 <R1_GetPhaseCurrents+0x48>
 8002646:	e100      	b.n	800284a <R1_GetPhaseCurrents+0x24a>
 8002648:	4d83      	ldr	r5, [pc, #524]	; (8002858 <R1_GetPhaseCurrents+0x258>)
 800264a:	00a4      	lsls	r4, r4, #2
 800264c:	592c      	ldr	r4, [r5, r4]
 800264e:	46a7      	mov	pc, r4
    wAux2 = -INT16_MAX;
 8002650:	4a82      	ldr	r2, [pc, #520]	; (800285c <R1_GetPhaseCurrents+0x25c>)
 8002652:	e7f4      	b.n	800263e <R1_GetPhaseCurrents+0x3e>
    wAux1 = -INT16_MAX;
 8002654:	4b81      	ldr	r3, [pc, #516]	; (800285c <R1_GetPhaseCurrents+0x25c>)
 8002656:	e7e9      	b.n	800262c <R1_GetPhaseCurrents+0x2c>
      wAux2 = INT16_MAX;
 8002658:	4a81      	ldr	r2, [pc, #516]	; (8002860 <R1_GetPhaseCurrents+0x260>)
 800265a:	e7f0      	b.n	800263e <R1_GetPhaseCurrents+0x3e>
      wAux1 = INT16_MAX;
 800265c:	4b80      	ldr	r3, [pc, #512]	; (8002860 <R1_GetPhaseCurrents+0x260>)
 800265e:	e7e5      	b.n	800262c <R1_GetPhaseCurrents+0x2c>
      break;
    }

    case SECTOR_5:
    {
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iC,-iB are available to be sampled */
 8002660:	24c5      	movs	r4, #197	; 0xc5
 8002662:	5d05      	ldrb	r5, [r0, r4]
 8002664:	3cbf      	subs	r4, #191	; 0xbf
 8002666:	402c      	ands	r4, r5
 8002668:	2c06      	cmp	r4, #6
 800266a:	d100      	bne.n	800266e <R1_GetPhaseCurrents+0x6e>
 800266c:	e095      	b.n	800279a <R1_GetPhaseCurrents+0x19a>
        hCurrB = (int16_t) wAux1;
        hCurrA = -hCurrB-hCurrC;
      }
      else
      {
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iC, or -iB is available to be sampled */
 800266e:	2c00      	cmp	r4, #0
 8002670:	d100      	bne.n	8002674 <R1_GetPhaseCurrents+0x74>
 8002672:	e080      	b.n	8002776 <R1_GetPhaseCurrents+0x176>
        {
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=270 degree */
 8002674:	257b      	movs	r5, #123	; 0x7b
 8002676:	5d45      	ldrb	r5, [r0, r5]
 8002678:	2d01      	cmp	r5, #1
 800267a:	d100      	bne.n	800267e <R1_GetPhaseCurrents+0x7e>
 800267c:	e0bd      	b.n	80027fa <R1_GetPhaseCurrents+0x1fa>
              hCurrA = 0;
            }
          }
          else  /* Not START Position */
          {
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 800267e:	2c04      	cmp	r4, #4
 8002680:	d100      	bne.n	8002684 <R1_GetPhaseCurrents+0x84>
 8002682:	e0c7      	b.n	8002814 <R1_GetPhaseCurrents+0x214>
              hCurrA = (int16_t) wAux2;
              hCurrB = pHandle->_Super.IbEst;
            }
            else  /* 0x02 -ib */
            {
              wAux1 = -wAux1;
 8002684:	425b      	negs	r3, r3
              hCurrB = (int16_t) wAux1;
 8002686:	b21d      	sxth	r5, r3
              hCurrA = pHandle->_Super.IaEst;
 8002688:	2368      	movs	r3, #104	; 0x68
 800268a:	5ec4      	ldrsh	r4, [r0, r3]
 800268c:	e06c      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iA,-iB are available to be sampled */
 800268e:	24c5      	movs	r4, #197	; 0xc5
 8002690:	5d05      	ldrb	r5, [r0, r4]
 8002692:	3cc2      	subs	r4, #194	; 0xc2
 8002694:	402c      	ands	r4, r5
 8002696:	2c03      	cmp	r4, #3
 8002698:	d100      	bne.n	800269c <R1_GetPhaseCurrents+0x9c>
 800269a:	e094      	b.n	80027c6 <R1_GetPhaseCurrents+0x1c6>
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iA, or -iB is available to be sampled */
 800269c:	2c00      	cmp	r4, #0
 800269e:	d100      	bne.n	80026a2 <R1_GetPhaseCurrents+0xa2>
 80026a0:	e076      	b.n	8002790 <R1_GetPhaseCurrents+0x190>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=330 degree */
 80026a2:	257b      	movs	r5, #123	; 0x7b
 80026a4:	5d45      	ldrb	r5, [r0, r5]
 80026a6:	2d01      	cmp	r5, #1
 80026a8:	d100      	bne.n	80026ac <R1_GetPhaseCurrents+0xac>
 80026aa:	e09a      	b.n	80027e2 <R1_GetPhaseCurrents+0x1e2>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 80026ac:	2c01      	cmp	r4, #1
 80026ae:	d1e9      	bne.n	8002684 <R1_GetPhaseCurrents+0x84>
              hCurrB = pHandle->_Super.IbEst;
 80026b0:	236a      	movs	r3, #106	; 0x6a
              hCurrA = (int16_t) wAux2;
 80026b2:	b214      	sxth	r4, r2
              hCurrB = pHandle->_Super.IbEst;
 80026b4:	5ec5      	ldrsh	r5, [r0, r3]
 80026b6:	e057      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iA and -iC are available to be sampled */
 80026b8:	24c5      	movs	r4, #197	; 0xc5
 80026ba:	5d05      	ldrb	r5, [r0, r4]
 80026bc:	3cc0      	subs	r4, #192	; 0xc0
 80026be:	402c      	ands	r4, r5
 80026c0:	2c05      	cmp	r4, #5
 80026c2:	d100      	bne.n	80026c6 <R1_GetPhaseCurrents+0xc6>
 80026c4:	e06e      	b.n	80027a4 <R1_GetPhaseCurrents+0x1a4>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iA or -iC is available to be sampled */
 80026c6:	2c00      	cmp	r4, #0
 80026c8:	d047      	beq.n	800275a <R1_GetPhaseCurrents+0x15a>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=30 degree */
 80026ca:	257b      	movs	r5, #123	; 0x7b
 80026cc:	5d45      	ldrb	r5, [r0, r5]
 80026ce:	2d01      	cmp	r5, #1
 80026d0:	d100      	bne.n	80026d4 <R1_GetPhaseCurrents+0xd4>
 80026d2:	e07c      	b.n	80027ce <R1_GetPhaseCurrents+0x1ce>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA, is available to be sampled */
 80026d4:	2c01      	cmp	r4, #1
 80026d6:	d0eb      	beq.n	80026b0 <R1_GetPhaseCurrents+0xb0>
              hCurrB = pHandle->_Super.IbEst;
 80026d8:	226a      	movs	r2, #106	; 0x6a
 80026da:	5e85      	ldrsh	r5, [r0, r2]
              hCurrA = -hCurrB-hCurrC;
 80026dc:	1b5c      	subs	r4, r3, r5
 80026de:	b224      	sxth	r4, r4
 80026e0:	e042      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iB,-iC are available to be sampled */
 80026e2:	24c5      	movs	r4, #197	; 0xc5
 80026e4:	5d05      	ldrb	r5, [r0, r4]
 80026e6:	3cbf      	subs	r4, #191	; 0xbf
 80026e8:	402c      	ands	r4, r5
 80026ea:	2c06      	cmp	r4, #6
 80026ec:	d100      	bne.n	80026f0 <R1_GetPhaseCurrents+0xf0>
 80026ee:	e066      	b.n	80027be <R1_GetPhaseCurrents+0x1be>
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iB, or -iC is available to be sampled */
 80026f0:	2c00      	cmp	r4, #0
 80026f2:	d040      	beq.n	8002776 <R1_GetPhaseCurrents+0x176>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=90 degree */
 80026f4:	257b      	movs	r5, #123	; 0x7b
 80026f6:	5d45      	ldrb	r5, [r0, r5]
 80026f8:	2d01      	cmp	r5, #1
 80026fa:	d100      	bne.n	80026fe <R1_GetPhaseCurrents+0xfe>
 80026fc:	e06c      	b.n	80027d8 <R1_GetPhaseCurrents+0x1d8>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 80026fe:	2c02      	cmp	r4, #2
 8002700:	d013      	beq.n	800272a <R1_GetPhaseCurrents+0x12a>
              hCurrA = pHandle->_Super.IaEst;
 8002702:	2268      	movs	r2, #104	; 0x68
 8002704:	5e84      	ldrsh	r4, [r0, r2]
              hCurrB = -hCurrA-hCurrC;
 8002706:	1b1b      	subs	r3, r3, r4
 8002708:	b21d      	sxth	r5, r3
 800270a:	e02d      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iB,-iA are available to be sampled */
 800270c:	24c5      	movs	r4, #197	; 0xc5
 800270e:	5d05      	ldrb	r5, [r0, r4]
 8002710:	3cc2      	subs	r4, #194	; 0xc2
 8002712:	402c      	ands	r4, r5
 8002714:	2c03      	cmp	r4, #3
 8002716:	d04e      	beq.n	80027b6 <R1_GetPhaseCurrents+0x1b6>
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iB, or -iA is available to be sampled */
 8002718:	2c00      	cmp	r4, #0
 800271a:	d034      	beq.n	8002786 <R1_GetPhaseCurrents+0x186>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=150 degree */
 800271c:	257b      	movs	r5, #123	; 0x7b
 800271e:	5d45      	ldrb	r5, [r0, r5]
 8002720:	2d01      	cmp	r5, #1
 8002722:	d100      	bne.n	8002726 <R1_GetPhaseCurrents+0x126>
 8002724:	e070      	b.n	8002808 <R1_GetPhaseCurrents+0x208>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 8002726:	2c02      	cmp	r4, #2
 8002728:	d112      	bne.n	8002750 <R1_GetPhaseCurrents+0x150>
              hCurrA = pHandle->_Super.IaEst;
 800272a:	2368      	movs	r3, #104	; 0x68
              hCurrB = (int16_t) wAux2;
 800272c:	b215      	sxth	r5, r2
              hCurrA = pHandle->_Super.IaEst;
 800272e:	5ec4      	ldrsh	r4, [r0, r3]
 8002730:	e01a      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iC,-iA are available to be sampled */
 8002732:	24c5      	movs	r4, #197	; 0xc5
 8002734:	5d05      	ldrb	r5, [r0, r4]
 8002736:	3cc0      	subs	r4, #192	; 0xc0
 8002738:	402c      	ands	r4, r5
 800273a:	2c05      	cmp	r4, #5
 800273c:	d036      	beq.n	80027ac <R1_GetPhaseCurrents+0x1ac>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iC, or -iA is available to be sampled */
 800273e:	2c00      	cmp	r4, #0
 8002740:	d00b      	beq.n	800275a <R1_GetPhaseCurrents+0x15a>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=210 degree */
 8002742:	257b      	movs	r5, #123	; 0x7b
 8002744:	5d45      	ldrb	r5, [r0, r5]
 8002746:	2d01      	cmp	r5, #1
 8002748:	d051      	beq.n	80027ee <R1_GetPhaseCurrents+0x1ee>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 800274a:	2c04      	cmp	r4, #4
 800274c:	d100      	bne.n	8002750 <R1_GetPhaseCurrents+0x150>
 800274e:	e067      	b.n	8002820 <R1_GetPhaseCurrents+0x220>
              wAux1 = -wAux1;
 8002750:	425c      	negs	r4, r3
              hCurrB = pHandle->_Super.IbEst;
 8002752:	236a      	movs	r3, #106	; 0x6a
              hCurrA = (int16_t) wAux1;
 8002754:	b224      	sxth	r4, r4
              hCurrB = pHandle->_Super.IbEst;
 8002756:	5ec5      	ldrsh	r5, [r0, r3]
 8002758:	e006      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
          hCurrA = pHandle->_Super.IaEst;
 800275a:	2368      	movs	r3, #104	; 0x68
 800275c:	5ec4      	ldrsh	r4, [r0, r3]
          hCurrC = pHandle->_Super.IcEst;
 800275e:	236c      	movs	r3, #108	; 0x6c
          hCurrB = -hCurrA-hCurrC;
 8002760:	5ac3      	ldrh	r3, [r0, r3]
 8002762:	191b      	adds	r3, r3, r4
 8002764:	425b      	negs	r3, r3
 8002766:	b21d      	sxth	r5, r3

    default:
      break;
    }

  pHandle->CurrAOld = hCurrA;
 8002768:	23c0      	movs	r3, #192	; 0xc0
 800276a:	52c4      	strh	r4, [r0, r3]
  pHandle->CurrBOld = hCurrB;
 800276c:	3302      	adds	r3, #2
 800276e:	52c5      	strh	r5, [r0, r3]

  pStator_Currents->a = hCurrA;
  pStator_Currents->b = hCurrB;
 8002770:	804d      	strh	r5, [r1, #2]
  pStator_Currents->a = hCurrA;
 8002772:	800c      	strh	r4, [r1, #0]
}
 8002774:	bd30      	pop	{r4, r5, pc}
          hCurrB = pHandle->_Super.IbEst;
 8002776:	236a      	movs	r3, #106	; 0x6a
 8002778:	5ec5      	ldrsh	r5, [r0, r3]
          hCurrC = pHandle->_Super.IcEst;
 800277a:	236c      	movs	r3, #108	; 0x6c
          hCurrA = -hCurrB-hCurrC;
 800277c:	5ac4      	ldrh	r4, [r0, r3]
 800277e:	1964      	adds	r4, r4, r5
 8002780:	4264      	negs	r4, r4
 8002782:	b224      	sxth	r4, r4
 8002784:	e7f0      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
          hCurrB = pHandle->_Super.IbEst;
 8002786:	236a      	movs	r3, #106	; 0x6a
 8002788:	5ec5      	ldrsh	r5, [r0, r3]
          hCurrA = pHandle->_Super.IaEst;
 800278a:	2368      	movs	r3, #104	; 0x68
 800278c:	5ec4      	ldrsh	r4, [r0, r3]
 800278e:	e7eb      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
          hCurrA = pHandle->_Super.IaEst;
 8002790:	2368      	movs	r3, #104	; 0x68
 8002792:	5ec4      	ldrsh	r4, [r0, r3]
          hCurrB = pHandle->_Super.IbEst;
 8002794:	236a      	movs	r3, #106	; 0x6a
 8002796:	5ec5      	ldrsh	r5, [r0, r3]
 8002798:	e7e6      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
        wAux1 = -wAux1;
 800279a:	425d      	negs	r5, r3
        hCurrA = -hCurrB-hCurrC;
 800279c:	1a9c      	subs	r4, r3, r2
        hCurrB = (int16_t) wAux1;
 800279e:	b22d      	sxth	r5, r5
        hCurrA = -hCurrB-hCurrC;
 80027a0:	b224      	sxth	r4, r4
 80027a2:	e7e1      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
        hCurrB = -hCurrA-hCurrC;
 80027a4:	1a9b      	subs	r3, r3, r2
        hCurrA = (int16_t) wAux2;
 80027a6:	b214      	sxth	r4, r2
        hCurrB = -hCurrA-hCurrC;
 80027a8:	b21d      	sxth	r5, r3
 80027aa:	e7dd      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
        wAux1 = -wAux1;
 80027ac:	425c      	negs	r4, r3
        hCurrB = -hCurrA-hCurrC;
 80027ae:	1a9b      	subs	r3, r3, r2
        hCurrA = (int16_t) wAux1;
 80027b0:	b224      	sxth	r4, r4
        hCurrB = -hCurrA-hCurrC;
 80027b2:	b21d      	sxth	r5, r3
 80027b4:	e7d8      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
        wAux1 = -wAux1;
 80027b6:	425c      	negs	r4, r3
        hCurrB = (int16_t) wAux2;
 80027b8:	b215      	sxth	r5, r2
        hCurrA = (int16_t) wAux1;
 80027ba:	b224      	sxth	r4, r4
 80027bc:	e7d4      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
        hCurrA = -hCurrB-hCurrC;
 80027be:	1a9c      	subs	r4, r3, r2
        hCurrB = (int16_t) wAux2;
 80027c0:	b215      	sxth	r5, r2
        hCurrA = -hCurrB-hCurrC;
 80027c2:	b224      	sxth	r4, r4
 80027c4:	e7d0      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
        wAux1 = -wAux1;
 80027c6:	425b      	negs	r3, r3
        hCurrA = (int16_t) wAux2;
 80027c8:	b214      	sxth	r4, r2
        hCurrB = (int16_t) wAux1;
 80027ca:	b21d      	sxth	r5, r3
 80027cc:	e7cc      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA is available to be sampled and not iC */
 80027ce:	2c01      	cmp	r4, #1
 80027d0:	d038      	beq.n	8002844 <R1_GetPhaseCurrents+0x244>
              hCurrB = 0;
 80027d2:	2500      	movs	r5, #0
              hCurrA = -hCurrC;
 80027d4:	b21c      	sxth	r4, r3
              hCurrB = 0;
 80027d6:	e7c7      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 80027d8:	2c02      	cmp	r4, #2
 80027da:	d012      	beq.n	8002802 <R1_GetPhaseCurrents+0x202>
              hCurrA = 0;
 80027dc:	2400      	movs	r4, #0
              hCurrB = (int16_t) wAux1;
 80027de:	b21d      	sxth	r5, r3
              hCurrA = 0;
 80027e0:	e7c2      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 80027e2:	2c01      	cmp	r4, #1
 80027e4:	d022      	beq.n	800282c <R1_GetPhaseCurrents+0x22c>
              wAux1 = -wAux1;
 80027e6:	425d      	negs	r5, r3
              hCurrB = (int16_t) wAux1;
 80027e8:	b22d      	sxth	r5, r5
              hCurrA = -hCurrB;
 80027ea:	b21c      	sxth	r4, r3
 80027ec:	e7bc      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 80027ee:	2c04      	cmp	r4, #4
 80027f0:	d020      	beq.n	8002834 <R1_GetPhaseCurrents+0x234>
              wAux1 = -wAux1;
 80027f2:	425c      	negs	r4, r3
              hCurrB = 0;
 80027f4:	2500      	movs	r5, #0
              hCurrA = (int16_t) wAux1;
 80027f6:	b224      	sxth	r4, r4
              hCurrB = 0;
 80027f8:	e7b6      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
              wAux1 = -wAux1;
 80027fa:	425b      	negs	r3, r3
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 80027fc:	2c04      	cmp	r4, #4
 80027fe:	d1ed      	bne.n	80027dc <R1_GetPhaseCurrents+0x1dc>
              hCurrB = -hCurrC;
 8002800:	4252      	negs	r2, r2
              hCurrA = 0;
 8002802:	2400      	movs	r4, #0
              hCurrB = -hCurrC;
 8002804:	b215      	sxth	r5, r2
 8002806:	e7af      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 8002808:	2c02      	cmp	r4, #2
 800280a:	d017      	beq.n	800283c <R1_GetPhaseCurrents+0x23c>
              wAux1 = -wAux1;
 800280c:	425c      	negs	r4, r3
              hCurrA = (int16_t) wAux1;
 800280e:	b224      	sxth	r4, r4
              hCurrB = -hCurrA;
 8002810:	b21d      	sxth	r5, r3
 8002812:	e7a9      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
              hCurrA = pHandle->_Super.IaEst;
 8002814:	2368      	movs	r3, #104	; 0x68
 8002816:	5ec4      	ldrsh	r4, [r0, r3]
              hCurrB = -hCurrA-hCurrC;
 8002818:	18a2      	adds	r2, r4, r2
 800281a:	4253      	negs	r3, r2
 800281c:	b21d      	sxth	r5, r3
 800281e:	e7a3      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
              hCurrB = pHandle->_Super.IbEst;
 8002820:	236a      	movs	r3, #106	; 0x6a
 8002822:	5ec5      	ldrsh	r5, [r0, r3]
              hCurrA = -hCurrB-hCurrC;
 8002824:	18aa      	adds	r2, r5, r2
 8002826:	4254      	negs	r4, r2
 8002828:	b224      	sxth	r4, r4
 800282a:	e79d      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
              hCurrA = (int16_t) wAux2;
 800282c:	b214      	sxth	r4, r2
              hCurrB = -hCurrA;
 800282e:	4252      	negs	r2, r2
 8002830:	b215      	sxth	r5, r2
 8002832:	e799      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
              hCurrA = -hCurrC;
 8002834:	4254      	negs	r4, r2
              hCurrB = 0;
 8002836:	2500      	movs	r5, #0
              hCurrA = -hCurrC;
 8002838:	b224      	sxth	r4, r4
              hCurrB = 0;
 800283a:	e795      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
              hCurrA = -hCurrB;
 800283c:	4254      	negs	r4, r2
              hCurrB = (int16_t) wAux2;
 800283e:	b215      	sxth	r5, r2
              hCurrA = -hCurrB;
 8002840:	b224      	sxth	r4, r4
 8002842:	e791      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
              hCurrB = 0;
 8002844:	2500      	movs	r5, #0
              hCurrA = (int16_t) wAux2;
 8002846:	b214      	sxth	r4, r2
              hCurrC = -hCurrA;
 8002848:	e78e      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
  switch (pHandle->_Super.Sector)
 800284a:	2500      	movs	r5, #0
 800284c:	002c      	movs	r4, r5
 800284e:	e78b      	b.n	8002768 <R1_GetPhaseCurrents+0x168>
 8002850:	ffff8002 	.word	0xffff8002
 8002854:	00007ffe 	.word	0x00007ffe
 8002858:	08006ce8 	.word	0x08006ce8
 800285c:	ffff8001 	.word	0xffff8001
 8002860:	00007fff 	.word	0x00007fff

08002864 <R1_HFCurrentsCalibration>:
  */
static void R1_HFCurrentsCalibration(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002864:	23cc      	movs	r3, #204	; 0xcc
 8002866:	58c3      	ldr	r3, [r0, r3]
{
 8002868:	b530      	push	{r4, r5, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800286a:	685a      	ldr	r2, [r3, #4]
  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 800286c:	2400      	movs	r4, #0
 800286e:	23c8      	movs	r3, #200	; 0xc8
 8002870:	54c4      	strb	r4, [r0, r3]
 8002872:	6853      	ldr	r3, [r2, #4]
 8002874:	3470      	adds	r4, #112	; 0x70
 8002876:	43a3      	bics	r3, r4
 8002878:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  if (pHandle->Index < NB_CONVERSIONS)
 800287a:	23c4      	movs	r3, #196	; 0xc4
 800287c:	5cc2      	ldrb	r2, [r0, r3]
 800287e:	2a0f      	cmp	r2, #15
 8002880:	d809      	bhi.n	8002896 <R1_HFCurrentsCalibration+0x32>
  {
    pHandle->PhaseOffset += pHandle->CurConv[1] ;
 8002882:	22b6      	movs	r2, #182	; 0xb6
 8002884:	3430      	adds	r4, #48	; 0x30
 8002886:	5a85      	ldrh	r5, [r0, r2]
 8002888:	5902      	ldr	r2, [r0, r4]
 800288a:	1952      	adds	r2, r2, r5
 800288c:	5102      	str	r2, [r0, r4]
    pHandle->Index++;
 800288e:	5cc2      	ldrb	r2, [r0, r3]
 8002890:	3201      	adds	r2, #1
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	54c2      	strb	r2, [r0, r3]
  }

  /* During offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 800289a:	804b      	strh	r3, [r1, #2]

}
 800289c:	bd30      	pop	{r4, r5, pc}
 800289e:	46c0      	nop			; (mov r8, r8)

080028a0 <R1_SetADCSampPointPolarization>:
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;

  uint16_t hAux;
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80028a0:	21cc      	movs	r1, #204	; 0xcc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80028a2:	22b8      	movs	r2, #184	; 0xb8
{
 80028a4:	b530      	push	{r4, r5, lr}
 80028a6:	0003      	movs	r3, r0
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80028a8:	5a82      	ldrh	r2, [r0, r2]
 80028aa:	5840      	ldr	r0, [r0, r1]
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	8bc4      	ldrh	r4, [r0, #30]
 80028b0:	8c01      	ldrh	r1, [r0, #32]
 80028b2:	1909      	adds	r1, r1, r4
 80028b4:	b289      	uxth	r1, r1
 80028b6:	1a55      	subs	r5, r2, r1
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80028b8:	24ba      	movs	r4, #186	; 0xba
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80028ba:	1852      	adds	r2, r2, r1
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80028bc:	21bc      	movs	r1, #188	; 0xbc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80028be:	531d      	strh	r5, [r3, r4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80028c0:	525a      	strh	r2, [r3, r1]
  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 80028c2:	2222      	movs	r2, #34	; 0x22
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	5c82      	ldrb	r2, [r0, r2]
 80028c8:	0189      	lsls	r1, r1, #6
 80028ca:	4091      	lsls	r1, r2
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <R1_SetADCSampPointPolarization+0x64>)
 80028ce:	0b49      	lsrs	r1, r1, #13
 80028d0:	6291      	str	r1, [r2, #40]	; 0x28
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 80028d2:	2123      	movs	r1, #35	; 0x23
 80028d4:	5c41      	ldrb	r1, [r0, r1]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80028d6:	2007      	movs	r0, #7
 80028d8:	6954      	ldr	r4, [r2, #20]
 80028da:	4384      	bics	r4, r0
 80028dc:	4321      	orrs	r1, r4
 80028de:	6151      	str	r1, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80028e0:	68d0      	ldr	r0, [r2, #12]
 80028e2:	4909      	ldr	r1, [pc, #36]	; (8002908 <R1_SetADCSampPointPolarization+0x68>)
 80028e4:	4008      	ands	r0, r1
 80028e6:	2188      	movs	r1, #136	; 0x88
 80028e8:	00c9      	lsls	r1, r1, #3
 80028ea:	4301      	orrs	r1, r0
 80028ec:	60d1      	str	r1, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  /* Check software error */
  if (pHandle->FOCDurationFlag == true)
 80028ee:	22c8      	movs	r2, #200	; 0xc8
 80028f0:	5c99      	ldrb	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 80028f2:	3a72      	subs	r2, #114	; 0x72
 80028f4:	5a98      	ldrh	r0, [r3, r2]
 80028f6:	2801      	cmp	r0, #1
 80028f8:	d001      	beq.n	80028fe <R1_SetADCSampPointPolarization+0x5e>
    hAux = MC_DURATION;
 80028fa:	b288      	uxth	r0, r1
  else
  {
    /* Nothing to do */
  }
  return (hAux);
}
 80028fc:	bd30      	pop	{r4, r5, pc}
    pHandle->_Super.SWerror = 0u;
 80028fe:	2100      	movs	r1, #0
 8002900:	5299      	strh	r1, [r3, r2]
 8002902:	e7fb      	b.n	80028fc <R1_SetADCSampPointPolarization+0x5c>
 8002904:	40012400 	.word	0x40012400
 8002908:	fffff23f 	.word	0xfffff23f

0800290c <R1_CalcDutyCycles>:
  * @param  pHandle related object of class CPWMC
  * @retval uint16_t It returns MC_DURATION if the TIMx update occurs
  *         before the end of FOC algorithm else returns MC_NO_ERROR
  */
__weak uint16_t R1_CalcDutyCycles(PWMC_Handle_t *pHdl)
{
 800290c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290e:	4657      	mov	r7, sl
 8002910:	464e      	mov	r6, r9
 8002912:	4645      	mov	r5, r8
 8002914:	46de      	mov	lr, fp
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002916:	22cc      	movs	r2, #204	; 0xcc
{
 8002918:	b5e0      	push	{r5, r6, r7, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 800291a:	5882      	ldr	r2, [r0, r2]
{
 800291c:	b08f      	sub	sp, #60	; 0x3c
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 800291e:	9200      	str	r2, [sp, #0]
 8002920:	6892      	ldr	r2, [r2, #8]
{
 8002922:	0003      	movs	r3, r0
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002924:	9208      	str	r2, [sp, #32]
  uint8_t midVal;
  uint8_t minVal;
  uint8_t max_bad_flag;
  uint8_t min_bad_flag;

  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8002926:	2250      	movs	r2, #80	; 0x50
 8002928:	5a82      	ldrh	r2, [r0, r2]
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;

  maxVal = (uint8_t)pHandle->_Super.highDuty;
  midVal = (uint8_t)pHandle->_Super.midDuty;
  minVal = (uint8_t)pHandle->_Super.lowDuty;
  pHandle->iflag=0x00;
 800292a:	2600      	movs	r6, #0
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 800292c:	9204      	str	r2, [sp, #16]
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 800292e:	2252      	movs	r2, #82	; 0x52
 8002930:	5a82      	ldrh	r2, [r0, r2]
 8002932:	9202      	str	r2, [sp, #8]
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8002934:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002936:	920c      	str	r2, [sp, #48]	; 0x30
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 8002938:	2254      	movs	r2, #84	; 0x54
 800293a:	5a82      	ldrh	r2, [r0, r2]
 800293c:	4691      	mov	r9, r2
 800293e:	4649      	mov	r1, r9
 8002940:	aa0c      	add	r2, sp, #48	; 0x30
 8002942:	8091      	strh	r1, [r2, #4]
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8002944:	225c      	movs	r2, #92	; 0x5c
 8002946:	5c84      	ldrb	r4, [r0, r2]
  midVal = (uint8_t)pHandle->_Super.midDuty;
 8002948:	3a02      	subs	r2, #2
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 800294a:	9407      	str	r4, [sp, #28]
  midVal = (uint8_t)pHandle->_Super.midDuty;
 800294c:	5c82      	ldrb	r2, [r0, r2]
  pHandle->iflag=0x00;
 800294e:	21c5      	movs	r1, #197	; 0xc5
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 8002950:	2058      	movs	r0, #88	; 0x58
  pHandle->iflag=0x00;
 8002952:	9105      	str	r1, [sp, #20]
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 8002954:	5c1d      	ldrb	r5, [r3, r0]
  pHandle->iflag=0x00;
 8002956:	545e      	strb	r6, [r3, r1]

  /* Phase-shift and set iflag */
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8002958:	0060      	lsls	r0, r4, #1
 800295a:	a90c      	add	r1, sp, #48	; 0x30
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 800295c:	0027      	movs	r7, r4
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 800295e:	5e44      	ldrsh	r4, [r0, r1]
 8002960:	0052      	lsls	r2, r2, #1
 8002962:	a90c      	add	r1, sp, #48	; 0x30
 8002964:	5a08      	ldrh	r0, [r1, r0]
 8002966:	46a0      	mov	r8, r4
 8002968:	5e51      	ldrsh	r1, [r2, r1]
 800296a:	900b      	str	r0, [sp, #44]	; 0x2c
 800296c:	468a      	mov	sl, r1
 800296e:	a90c      	add	r1, sp, #48	; 0x30
 8002970:	5a8a      	ldrh	r2, [r1, r2]
 8002972:	4693      	mov	fp, r2
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002974:	4659      	mov	r1, fp
 8002976:	9a00      	ldr	r2, [sp, #0]
 8002978:	8b92      	ldrh	r2, [r2, #28]
 800297a:	1a84      	subs	r4, r0, r2
 800297c:	1a64      	subs	r4, r4, r1
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 800297e:	0068      	lsls	r0, r5, #1
 8002980:	a90c      	add	r1, sp, #48	; 0x30
 8002982:	5e41      	ldrsh	r1, [r0, r1]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002984:	b224      	sxth	r4, r4
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8002986:	468c      	mov	ip, r1
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8002988:	4659      	mov	r1, fp
 800298a:	1a88      	subs	r0, r1, r2
 800298c:	4661      	mov	r1, ip
 800298e:	1a40      	subs	r0, r0, r1
 8002990:	b281      	uxth	r1, r0
 8002992:	910a      	str	r1, [sp, #40]	; 0x28
  pHandle->aShiftval[0]=0;
 8002994:	21a8      	movs	r1, #168	; 0xa8
 8002996:	505e      	str	r6, [r3, r1]
  pHandle->aShiftval[1]=0;
  pHandle->aShiftval[2]=0;
 8002998:	3104      	adds	r1, #4
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 800299a:	b200      	sxth	r0, r0
  pHandle->aShiftval[2]=0;
 800299c:	525e      	strh	r6, [r3, r1]
  max_bad_flag = 0;
  min_bad_flag = 0;

  if(submax_mid_deltmin > 0)
 800299e:	2c00      	cmp	r4, #0
 80029a0:	dc00      	bgt.n	80029a4 <R1_CalcDutyCycles+0x98>
 80029a2:	e0fe      	b.n	8002ba2 <R1_CalcDutyCycles+0x296>
  {
    pHandle->iflag |= ALFLAG[maxVal];
 80029a4:	49c1      	ldr	r1, [pc, #772]	; (8002cac <R1_CalcDutyCycles+0x3a0>)
  }
  else
  {
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80029a6:	9e00      	ldr	r6, [sp, #0]
    pHandle->iflag |= ALFLAG[maxVal];
 80029a8:	9103      	str	r1, [sp, #12]
 80029aa:	5dcc      	ldrb	r4, [r1, r7]
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80029ac:	8c31      	ldrh	r1, [r6, #32]
 80029ae:	9106      	str	r1, [sp, #24]
 80029b0:	2120      	movs	r1, #32
 80029b2:	5e71      	ldrsh	r1, [r6, r1]
       > (int16_t)(pHandle->Half_PWMPeriod))
 80029b4:	26b8      	movs	r6, #184	; 0xb8
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80029b6:	9109      	str	r1, [sp, #36]	; 0x24
       > (int16_t)(pHandle->Half_PWMPeriod))
 80029b8:	5f99      	ldrsh	r1, [r3, r6]
 80029ba:	9101      	str	r1, [sp, #4]
      pHandle->iflag |= ALFLAG[maxVal];
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
    }
  }

  if(submid_min_deltmin > 0)
 80029bc:	2800      	cmp	r0, #0
 80029be:	dc10      	bgt.n	80029e2 <R1_CalcDutyCycles+0xd6>
  {
    pHandle->iflag |= ALFLAG[minVal];
  }
  else
  {
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 80029c0:	4661      	mov	r1, ip
 80029c2:	3801      	subs	r0, #1
 80029c4:	42c8      	cmn	r0, r1
 80029c6:	d500      	bpl.n	80029ca <R1_CalcDutyCycles+0xbe>
 80029c8:	e10b      	b.n	8002be2 <R1_CalcDutyCycles+0x2d6>
      pHandle->iflag &= ~ALFLAG[minVal];
      min_bad_flag = 1;
    }
    else
    {
      pHandle->iflag |= ALFLAG[minVal];
 80029ca:	20c5      	movs	r0, #197	; 0xc5
 80029cc:	9903      	ldr	r1, [sp, #12]
 80029ce:	5749      	ldrsb	r1, [r1, r5]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 80029d0:	3554      	adds	r5, #84	; 0x54
      pHandle->iflag |= ALFLAG[minVal];
 80029d2:	430c      	orrs	r4, r1
 80029d4:	541c      	strb	r4, [r3, r0]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 80029d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80029d8:	006d      	lsls	r5, r5, #1
 80029da:	3801      	subs	r0, #1
      pHandle->iflag |= ALFLAG[minVal];
 80029dc:	468c      	mov	ip, r1
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 80029de:	52e8      	strh	r0, [r5, r3]
    }
  }

  if ((0U == max_bad_flag) && (0U == min_bad_flag))
 80029e0:	e005      	b.n	80029ee <R1_CalcDutyCycles+0xe2>
    pHandle->iflag |= ALFLAG[minVal];
 80029e2:	9903      	ldr	r1, [sp, #12]
 80029e4:	20c5      	movs	r0, #197	; 0xc5
 80029e6:	5749      	ldrsb	r1, [r1, r5]
 80029e8:	468c      	mov	ip, r1
 80029ea:	430c      	orrs	r4, r1
 80029ec:	541c      	strb	r4, [r3, r0]
  {
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 80029ee:	9900      	ldr	r1, [sp, #0]
 80029f0:	8bc8      	ldrh	r0, [r1, #30]
 80029f2:	4659      	mov	r1, fp
 80029f4:	1a0c      	subs	r4, r1, r0
 80029f6:	b221      	sxth	r1, r4
 80029f8:	468a      	mov	sl, r1
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
  }
  else
  {
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 80029fa:	1a12      	subs	r2, r2, r0
 80029fc:	445a      	add	r2, fp
 80029fe:	b212      	sxth	r2, r2
 8002a00:	4690      	mov	r8, r2
  pHandle->CntSmp2 = SamplePoint2;

  /* Critical section start */
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002a02:	22a8      	movs	r2, #168	; 0xa8
 8002a04:	9904      	ldr	r1, [sp, #16]
 8002a06:	5a9e      	ldrh	r6, [r3, r2]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002a08:	24ac      	movs	r4, #172	; 0xac
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002a0a:	198a      	adds	r2, r1, r6
 8002a0c:	b292      	uxth	r2, r2
 8002a0e:	9204      	str	r2, [sp, #16]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002a10:	22aa      	movs	r2, #170	; 0xaa
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002a12:	464f      	mov	r7, r9
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002a14:	5a9d      	ldrh	r5, [r3, r2]
 8002a16:	9a02      	ldr	r2, [sp, #8]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002a18:	5b1c      	ldrh	r4, [r3, r4]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002a1a:	1952      	adds	r2, r2, r5
 8002a1c:	b292      	uxth	r2, r2
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002a1e:	193f      	adds	r7, r7, r4
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002a20:	920a      	str	r2, [sp, #40]	; 0x28
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002a22:	b2ba      	uxth	r2, r7
 8002a24:	9205      	str	r2, [sp, #20]
  /* Second half PWM period CCR value transfered by DMA */
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8002a26:	9a02      	ldr	r2, [sp, #8]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8002a28:	1b8e      	subs	r6, r1, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8002a2a:	1b55      	subs	r5, r2, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8002a2c:	464a      	mov	r2, r9
 8002a2e:	1b14      	subs	r4, r2, r4
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8002a30:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8002a32:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8002a34:	b2a4      	uxth	r4, r4
  if ((SamplePoint2-SamplePoint1) < (int16_t)pHandle->pParams_str->hTADConv)
 8002a36:	4652      	mov	r2, sl
 8002a38:	4641      	mov	r1, r8
 8002a3a:	1a89      	subs	r1, r1, r2
 8002a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a3e:	4291      	cmp	r1, r2
 8002a40:	da1e      	bge.n	8002a80 <R1_CalcDutyCycles+0x174>
    pHandle->iflag &=  ALFLAG[maxVal];
 8002a42:	22c5      	movs	r2, #197	; 0xc5
 8002a44:	4691      	mov	r9, r2
 8002a46:	5c9a      	ldrb	r2, [r3, r2]
 8002a48:	9907      	ldr	r1, [sp, #28]
 8002a4a:	4692      	mov	sl, r2
 8002a4c:	9a03      	ldr	r2, [sp, #12]
 8002a4e:	5c52      	ldrb	r2, [r2, r1]
 8002a50:	4690      	mov	r8, r2
 8002a52:	4652      	mov	r2, sl
 8002a54:	4641      	mov	r1, r8
 8002a56:	400a      	ands	r2, r1
    pHandle->iflag &= ~ALFLAG[minVal];
 8002a58:	4661      	mov	r1, ip
 8002a5a:	438a      	bics	r2, r1
 8002a5c:	4690      	mov	r8, r2
 8002a5e:	464a      	mov	r2, r9
 8002a60:	4641      	mov	r1, r8
 8002a62:	5499      	strb	r1, [r3, r2]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8002a64:	9a01      	ldr	r2, [sp, #4]
 8002a66:	0fd1      	lsrs	r1, r2, #31
 8002a68:	4691      	mov	r9, r2
 8002a6a:	4688      	mov	r8, r1
 8002a6c:	44c8      	add	r8, r9
 8002a6e:	4642      	mov	r2, r8
 8002a70:	1052      	asrs	r2, r2, #1
 8002a72:	4692      	mov	sl, r2
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002a74:	9a06      	ldr	r2, [sp, #24]
 8002a76:	4690      	mov	r8, r2
 8002a78:	4440      	add	r0, r8
 8002a7a:	4450      	add	r0, sl
 8002a7c:	b202      	sxth	r2, r0
 8002a7e:	4690      	mov	r8, r2
  if ((SamplePoint2 >= (int16_t)(pHandle->Half_PWMPeriod)) || (SamplePoint2 <= 0))
 8002a80:	9a01      	ldr	r2, [sp, #4]
 8002a82:	4590      	cmp	r8, r2
 8002a84:	db00      	blt.n	8002a88 <R1_CalcDutyCycles+0x17c>
 8002a86:	e07e      	b.n	8002b86 <R1_CalcDutyCycles+0x27a>
 8002a88:	4642      	mov	r2, r8
 8002a8a:	2a00      	cmp	r2, #0
 8002a8c:	dc00      	bgt.n	8002a90 <R1_CalcDutyCycles+0x184>
 8002a8e:	e07a      	b.n	8002b86 <R1_CalcDutyCycles+0x27a>
  pHandle->CntSmp2 = SamplePoint2;
 8002a90:	b292      	uxth	r2, r2
 8002a92:	4690      	mov	r8, r2
  if ((SamplePoint1 >= (int16_t)pHandle->Half_PWMPeriod) || (SamplePoint1 <= 0))
 8002a94:	9a01      	ldr	r2, [sp, #4]
 8002a96:	4592      	cmp	sl, r2
 8002a98:	da6d      	bge.n	8002b76 <R1_CalcDutyCycles+0x26a>
 8002a9a:	4652      	mov	r2, sl
 8002a9c:	2a00      	cmp	r2, #0
 8002a9e:	dd6a      	ble.n	8002b76 <R1_CalcDutyCycles+0x26a>
  pHandle->CntSmp1 = SamplePoint1;
 8002aa0:	b292      	uxth	r2, r2
 8002aa2:	4693      	mov	fp, r2
 8002aa4:	20ba      	movs	r0, #186	; 0xba
 8002aa6:	465a      	mov	r2, fp
 8002aa8:	521a      	strh	r2, [r3, r0]
  pHandle->CntSmp2 = SamplePoint2;
 8002aaa:	4642      	mov	r2, r8
 8002aac:	3002      	adds	r0, #2
 8002aae:	521a      	strh	r2, [r3, r0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002ab0:	9a00      	ldr	r2, [sp, #0]
 8002ab2:	487f      	ldr	r0, [pc, #508]	; (8002cb0 <R1_CalcDutyCycles+0x3a4>)
 8002ab4:	68d2      	ldr	r2, [r2, #12]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002ab6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002ab8:	4691      	mov	r9, r2
 8002aba:	9a08      	ldr	r2, [sp, #32]
 8002abc:	4448      	add	r0, r9
 8002abe:	4694      	mov	ip, r2
 8002ac0:	3801      	subs	r0, #1
 8002ac2:	7800      	ldrb	r0, [r0, #0]
 8002ac4:	4460      	add	r0, ip
 8002ac6:	6802      	ldr	r2, [r0, #0]
 8002ac8:	4691      	mov	r9, r2
 8002aca:	2202      	movs	r2, #2
 8002acc:	4649      	mov	r1, r9
 8002ace:	4391      	bics	r1, r2
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002ad0:	2294      	movs	r2, #148	; 0x94
 8002ad2:	6001      	str	r1, [r0, #0]
 8002ad4:	9904      	ldr	r1, [sp, #16]
 8002ad6:	5299      	strh	r1, [r3, r2]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002ad8:	3202      	adds	r2, #2
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002ada:	9905      	ldr	r1, [sp, #20]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002adc:	529f      	strh	r7, [r3, r2]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002ade:	3202      	adds	r2, #2
 8002ae0:	5299      	strh	r1, [r3, r2]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8002ae2:	3202      	adds	r2, #2
 8002ae4:	529e      	strh	r6, [r3, r2]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8002ae6:	3202      	adds	r2, #2
 8002ae8:	529d      	strh	r5, [r3, r2]
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8002aea:	3202      	adds	r2, #2
 8002aec:	529c      	strh	r4, [r3, r2]

  if (pHandle->TCDoneFlag == true)
 8002aee:	322b      	adds	r2, #43	; 0x2b
 8002af0:	5c9a      	ldrb	r2, [r3, r2]
 8002af2:	2a00      	cmp	r2, #0
 8002af4:	d010      	beq.n	8002b18 <R1_CalcDutyCycles+0x20c>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8002af6:	2288      	movs	r2, #136	; 0x88
 8002af8:	9904      	ldr	r1, [sp, #16]
 8002afa:	5299      	strh	r1, [r3, r2]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8002afc:	9905      	ldr	r1, [sp, #20]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
 8002afe:	3202      	adds	r2, #2
 8002b00:	529f      	strh	r7, [r3, r2]
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8002b02:	3202      	adds	r2, #2
 8002b04:	5299      	strh	r1, [r3, r2]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002b06:	4659      	mov	r1, fp
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 8002b08:	3202      	adds	r2, #2
 8002b0a:	529e      	strh	r6, [r3, r2]
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 8002b0c:	3202      	adds	r2, #2
 8002b0e:	529d      	strh	r5, [r3, r2]
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];
 8002b10:	3202      	adds	r2, #2
 8002b12:	529c      	strh	r4, [r3, r2]
 8002b14:	4a67      	ldr	r2, [pc, #412]	; (8002cb4 <R1_CalcDutyCycles+0x3a8>)
 8002b16:	6411      	str	r1, [r2, #64]	; 0x40
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002b18:	2402      	movs	r4, #2
 8002b1a:	6802      	ldr	r2, [r0, #0]
    /* Do nothing, it will be applied during DMA transfer complete IRQ */
  }
  /* Critical section end */
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8002b1c:	9900      	ldr	r1, [sp, #0]
 8002b1e:	4322      	orrs	r2, r4
 8002b20:	6002      	str	r2, [r0, #0]
 8002b22:	2222      	movs	r2, #34	; 0x22
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b24:	2080      	movs	r0, #128	; 0x80
 8002b26:	5c8a      	ldrb	r2, [r1, r2]
 8002b28:	0180      	lsls	r0, r0, #6
 8002b2a:	4090      	lsls	r0, r2
 8002b2c:	4a62      	ldr	r2, [pc, #392]	; (8002cb8 <R1_CalcDutyCycles+0x3ac>)
 8002b2e:	0b40      	lsrs	r0, r0, #13
 8002b30:	6290      	str	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002b32:	6950      	ldr	r0, [r2, #20]
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 8002b34:	3421      	adds	r4, #33	; 0x21
 8002b36:	5d09      	ldrb	r1, [r1, r4]
 8002b38:	3c1c      	subs	r4, #28
 8002b3a:	43a0      	bics	r0, r4
 8002b3c:	4301      	orrs	r1, r0
 8002b3e:	6151      	str	r1, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002b40:	68d0      	ldr	r0, [r2, #12]
 8002b42:	495e      	ldr	r1, [pc, #376]	; (8002cbc <R1_CalcDutyCycles+0x3b0>)
 8002b44:	4008      	ands	r0, r1
 8002b46:	2188      	movs	r1, #136	; 0x88
 8002b48:	00c9      	lsls	r1, r1, #3
 8002b4a:	4301      	orrs	r1, r0
 8002b4c:	60d1      	str	r1, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 8002b4e:	22ae      	movs	r2, #174	; 0xae
 8002b50:	4641      	mov	r1, r8
 8002b52:	5299      	strh	r1, [r3, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 8002b54:	4659      	mov	r1, fp
 8002b56:	3204      	adds	r2, #4
 8002b58:	5299      	strh	r1, [r3, r2]

  /* Check software error */
  if (pHandle->FOCDurationFlag == true)
 8002b5a:	3216      	adds	r2, #22
 8002b5c:	5c99      	ldrb	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 8002b5e:	3a72      	subs	r2, #114	; 0x72
 8002b60:	5a98      	ldrh	r0, [r3, r2]
 8002b62:	2801      	cmp	r0, #1
 8002b64:	d03a      	beq.n	8002bdc <R1_CalcDutyCycles+0x2d0>
    hAux = MC_DURATION;
 8002b66:	b288      	uxth	r0, r1
  {
    /* Nothing to do */
  }

  return (hAux);
}
 8002b68:	b00f      	add	sp, #60	; 0x3c
 8002b6a:	bcf0      	pop	{r4, r5, r6, r7}
 8002b6c:	46bb      	mov	fp, r7
 8002b6e:	46b2      	mov	sl, r6
 8002b70:	46a9      	mov	r9, r5
 8002b72:	46a0      	mov	r8, r4
 8002b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->iflag &= ~ALFLAG[minVal];
 8002b76:	22c5      	movs	r2, #197	; 0xc5
 8002b78:	5c98      	ldrb	r0, [r3, r2]
 8002b7a:	4691      	mov	r9, r2
 8002b7c:	4662      	mov	r2, ip
 8002b7e:	4390      	bics	r0, r2
 8002b80:	464a      	mov	r2, r9
 8002b82:	5498      	strb	r0, [r3, r2]
    SamplePoint1 = aCCRval[midVal];
 8002b84:	e78e      	b.n	8002aa4 <R1_CalcDutyCycles+0x198>
    pHandle->iflag &=  ALFLAG[maxVal];
 8002b86:	20c5      	movs	r0, #197	; 0xc5
 8002b88:	5c1a      	ldrb	r2, [r3, r0]
 8002b8a:	9907      	ldr	r1, [sp, #28]
 8002b8c:	4690      	mov	r8, r2
 8002b8e:	9a03      	ldr	r2, [sp, #12]
 8002b90:	5c52      	ldrb	r2, [r2, r1]
 8002b92:	4641      	mov	r1, r8
 8002b94:	4011      	ands	r1, r2
 8002b96:	5419      	strb	r1, [r3, r0]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8002b98:	9806      	ldr	r0, [sp, #24]
 8002b9a:	4458      	add	r0, fp
 8002b9c:	b282      	uxth	r2, r0
 8002b9e:	4690      	mov	r8, r2
 8002ba0:	e778      	b.n	8002a94 <R1_CalcDutyCycles+0x188>
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8002ba2:	9e00      	ldr	r6, [sp, #0]
 8002ba4:	8c31      	ldrh	r1, [r6, #32]
 8002ba6:	9106      	str	r1, [sp, #24]
 8002ba8:	2120      	movs	r1, #32
 8002baa:	5e71      	ldrsh	r1, [r6, r1]
       > (int16_t)(pHandle->Half_PWMPeriod))
 8002bac:	26b8      	movs	r6, #184	; 0xb8
 8002bae:	5f9e      	ldrsh	r6, [r3, r6]
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8002bb0:	4647      	mov	r7, r8
 8002bb2:	4688      	mov	r8, r1
 8002bb4:	1b3f      	subs	r7, r7, r4
 8002bb6:	3701      	adds	r7, #1
 8002bb8:	4447      	add	r7, r8
 8002bba:	9109      	str	r1, [sp, #36]	; 0x24
       > (int16_t)(pHandle->Half_PWMPeriod))
 8002bbc:	9601      	str	r6, [sp, #4]
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8002bbe:	42b7      	cmp	r7, r6
 8002bc0:	dc18      	bgt.n	8002bf4 <R1_CalcDutyCycles+0x2e8>
      pHandle->iflag |= ALFLAG[maxVal];
 8002bc2:	493a      	ldr	r1, [pc, #232]	; (8002cac <R1_CalcDutyCycles+0x3a0>)
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8002bc4:	1c56      	adds	r6, r2, #1
 8002bc6:	000c      	movs	r4, r1
      pHandle->iflag |= ALFLAG[maxVal];
 8002bc8:	9103      	str	r1, [sp, #12]
 8002bca:	9907      	ldr	r1, [sp, #28]
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8002bcc:	445e      	add	r6, fp
 8002bce:	5c64      	ldrb	r4, [r4, r1]
 8002bd0:	3154      	adds	r1, #84	; 0x54
 8002bd2:	004f      	lsls	r7, r1, #1
 8002bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bd6:	1a76      	subs	r6, r6, r1
 8002bd8:	52fe      	strh	r6, [r7, r3]
 8002bda:	e6ef      	b.n	80029bc <R1_CalcDutyCycles+0xb0>
    pHandle->_Super.SWerror = 0u;
 8002bdc:	2100      	movs	r1, #0
 8002bde:	5299      	strh	r1, [r3, r2]
  return (hAux);
 8002be0:	e7c2      	b.n	8002b68 <R1_CalcDutyCycles+0x25c>
      pHandle->iflag &= ~ALFLAG[minVal];
 8002be2:	20c5      	movs	r0, #197	; 0xc5
 8002be4:	9903      	ldr	r1, [sp, #12]
 8002be6:	5749      	ldrsb	r1, [r1, r5]
 8002be8:	438c      	bics	r4, r1
 8002bea:	468c      	mov	ip, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8002bec:	9900      	ldr	r1, [sp, #0]
      pHandle->iflag &= ~ALFLAG[minVal];
 8002bee:	541c      	strb	r4, [r3, r0]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8002bf0:	8bc8      	ldrh	r0, [r1, #30]
 8002bf2:	e702      	b.n	80029fa <R1_CalcDutyCycles+0xee>
  if(submid_min_deltmin > 0)
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	dd18      	ble.n	8002c2a <R1_CalcDutyCycles+0x31e>
    pHandle->iflag |= ALFLAG[minVal];
 8002bf8:	4a2c      	ldr	r2, [pc, #176]	; (8002cac <R1_CalcDutyCycles+0x3a0>)
 8002bfa:	464c      	mov	r4, r9
 8002bfc:	9203      	str	r2, [sp, #12]
 8002bfe:	5752      	ldrsb	r2, [r2, r5]
 8002c00:	9e04      	ldr	r6, [sp, #16]
 8002c02:	4694      	mov	ip, r2
 8002c04:	4661      	mov	r1, ip
 8002c06:	9a05      	ldr	r2, [sp, #20]
 8002c08:	9d02      	ldr	r5, [sp, #8]
 8002c0a:	5499      	strb	r1, [r3, r2]
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002c0c:	9a00      	ldr	r2, [sp, #0]
 8002c0e:	8bd0      	ldrh	r0, [r2, #30]
 8002c10:	465a      	mov	r2, fp
 8002c12:	1a12      	subs	r2, r2, r0
 8002c14:	b212      	sxth	r2, r2
 8002c16:	4692      	mov	sl, r2
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8002c18:	9a06      	ldr	r2, [sp, #24]
 8002c1a:	445a      	add	r2, fp
 8002c1c:	b212      	sxth	r2, r2
 8002c1e:	4690      	mov	r8, r2
 8002c20:	464a      	mov	r2, r9
 8002c22:	9205      	str	r2, [sp, #20]
 8002c24:	9a02      	ldr	r2, [sp, #8]
 8002c26:	920a      	str	r2, [sp, #40]	; 0x28
 8002c28:	e705      	b.n	8002a36 <R1_CalcDutyCycles+0x12a>
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 8002c2a:	4662      	mov	r2, ip
 8002c2c:	3801      	subs	r0, #1
 8002c2e:	42d0      	cmn	r0, r2
 8002c30:	d426      	bmi.n	8002c80 <R1_CalcDutyCycles+0x374>
      pHandle->iflag |= ALFLAG[minVal];
 8002c32:	4a1e      	ldr	r2, [pc, #120]	; (8002cac <R1_CalcDutyCycles+0x3a0>)
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002c34:	20ac      	movs	r0, #172	; 0xac
      pHandle->iflag |= ALFLAG[minVal];
 8002c36:	9203      	str	r2, [sp, #12]
 8002c38:	5752      	ldrsb	r2, [r2, r5]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8002c3a:	3554      	adds	r5, #84	; 0x54
      pHandle->iflag |= ALFLAG[minVal];
 8002c3c:	4694      	mov	ip, r2
 8002c3e:	4661      	mov	r1, ip
 8002c40:	9a05      	ldr	r2, [sp, #20]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8002c42:	006d      	lsls	r5, r5, #1
      pHandle->iflag |= ALFLAG[minVal];
 8002c44:	5499      	strb	r1, [r3, r2]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8002c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002c48:	9904      	ldr	r1, [sp, #16]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8002c4a:	3a01      	subs	r2, #1
 8002c4c:	52ea      	strh	r2, [r5, r3]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002c4e:	22a8      	movs	r2, #168	; 0xa8
 8002c50:	5a9e      	ldrh	r6, [r3, r2]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002c52:	3202      	adds	r2, #2
 8002c54:	5a9d      	ldrh	r5, [r3, r2]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002c56:	198f      	adds	r7, r1, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002c58:	9a02      	ldr	r2, [sp, #8]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8002c5a:	1b8e      	subs	r6, r1, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8002c5c:	9902      	ldr	r1, [sp, #8]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002c5e:	5a1c      	ldrh	r4, [r3, r0]
 8002c60:	4648      	mov	r0, r9
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002c62:	1952      	adds	r2, r2, r5
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8002c64:	1b4d      	subs	r5, r1, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8002c66:	4649      	mov	r1, r9
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002c68:	1900      	adds	r0, r0, r4
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	1b0c      	subs	r4, r1, r4
 8002c6e:	9202      	str	r2, [sp, #8]
 8002c70:	b281      	uxth	r1, r0
 8002c72:	b2ba      	uxth	r2, r7
 8002c74:	4689      	mov	r9, r1
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8002c76:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8002c78:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8002c7a:	b2a4      	uxth	r4, r4
 8002c7c:	9204      	str	r2, [sp, #16]
 8002c7e:	e7c5      	b.n	8002c0c <R1_CalcDutyCycles+0x300>
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8002c80:	46b0      	mov	r8, r6
      pHandle->iflag &= ~ALFLAG[minVal];
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <R1_CalcDutyCycles+0x3a0>)
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002c84:	464c      	mov	r4, r9
      pHandle->iflag &= ~ALFLAG[minVal];
 8002c86:	9203      	str	r2, [sp, #12]
 8002c88:	5752      	ldrsb	r2, [r2, r5]
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002c8a:	9d02      	ldr	r5, [sp, #8]
      pHandle->iflag &= ~ALFLAG[minVal];
 8002c8c:	4694      	mov	ip, r2
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8002c8e:	0ff2      	lsrs	r2, r6, #31
 8002c90:	4442      	add	r2, r8
 8002c92:	1052      	asrs	r2, r2, #1
 8002c94:	4692      	mov	sl, r2
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002c96:	9a00      	ldr	r2, [sp, #0]
 8002c98:	9e04      	ldr	r6, [sp, #16]
 8002c9a:	8bd0      	ldrh	r0, [r2, #30]
 8002c9c:	9a06      	ldr	r2, [sp, #24]
 8002c9e:	9405      	str	r4, [sp, #20]
 8002ca0:	1812      	adds	r2, r2, r0
 8002ca2:	4452      	add	r2, sl
 8002ca4:	b212      	sxth	r2, r2
 8002ca6:	4690      	mov	r8, r2
 8002ca8:	950a      	str	r5, [sp, #40]	; 0x28
 8002caa:	e6c4      	b.n	8002a36 <R1_CalcDutyCycles+0x12a>
 8002cac:	08006d00 	.word	0x08006d00
 8002cb0:	08006d04 	.word	0x08006d04
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40012400 	.word	0x40012400
 8002cbc:	fffff23f 	.word	0xfffff23f

08002cc0 <R1_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002cc0:	23cc      	movs	r3, #204	; 0xcc
 8002cc2:	58c3      	ldr	r3, [r0, r3]
{
 8002cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc6:	46de      	mov	lr, fp
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002cc8:	469b      	mov	fp, r3
{
 8002cca:	4657      	mov	r7, sl
 8002ccc:	464e      	mov	r6, r9
 8002cce:	4645      	mov	r5, r8
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8002cd0:	465a      	mov	r2, fp
{
 8002cd2:	b5e0      	push	{r5, r6, r7, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8002cd4:	6815      	ldr	r5, [r2, #0]
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8002cd6:	6892      	ldr	r2, [r2, #8]
  pHandle->iflag = 0;
 8002cd8:	2700      	movs	r7, #0
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8002cda:	4694      	mov	ip, r2
  pHandle->iflag = 0;
 8002cdc:	22c5      	movs	r2, #197	; 0xc5
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002cde:	685b      	ldr	r3, [r3, #4]
  pHandle->iflag = 0;
 8002ce0:	5487      	strb	r7, [r0, r2]
  pHandle->FOCDurationFlag = false;
 8002ce2:	3203      	adds	r2, #3
 8002ce4:	5487      	strb	r7, [r0, r2]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8002ce6:	3a56      	subs	r2, #86	; 0x56
 8002ce8:	5a84      	ldrh	r4, [r0, r2]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002cea:	465e      	mov	r6, fp
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8002cec:	0862      	lsrs	r2, r4, #1
 8002cee:	4690      	mov	r8, r2
 8002cf0:	22b8      	movs	r2, #184	; 0xb8
 8002cf2:	4641      	mov	r1, r8
 8002cf4:	5281      	strh	r1, [r0, r2]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002cf6:	8bf6      	ldrh	r6, [r6, #30]
 8002cf8:	465a      	mov	r2, fp
 8002cfa:	46b1      	mov	r9, r6
 8002cfc:	8c12      	ldrh	r2, [r2, #32]
 8002cfe:	08a4      	lsrs	r4, r4, #2
 8002d00:	444a      	add	r2, r9
 8002d02:	b292      	uxth	r2, r2
 8002d04:	1aa6      	subs	r6, r4, r2
 8002d06:	b2b6      	uxth	r6, r6
 8002d08:	46b1      	mov	r9, r6
{
 8002d0a:	b085      	sub	sp, #20
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002d0c:	9201      	str	r2, [sp, #4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002d0e:	26ba      	movs	r6, #186	; 0xba
 8002d10:	464a      	mov	r2, r9
 8002d12:	5382      	strh	r2, [r0, r6]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002d14:	9a01      	ldr	r2, [sp, #4]
 8002d16:	0421      	lsls	r1, r4, #16
 8002d18:	18a2      	adds	r2, r4, r2
 8002d1a:	b292      	uxth	r2, r2
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002d1c:	3602      	adds	r6, #2
 8002d1e:	5382      	strh	r2, [r0, r6]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8002d20:	4321      	orrs	r1, r4
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8002d22:	3e68      	subs	r6, #104	; 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8002d24:	6501      	str	r1, [r0, #80]	; 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8002d26:	5384      	strh	r4, [r0, r6]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8002d28:	2488      	movs	r4, #136	; 0x88
 8002d2a:	5101      	str	r1, [r0, r4]
 8002d2c:	3404      	adds	r4, #4
 8002d2e:	5101      	str	r1, [r0, r4]
 8002d30:	3404      	adds	r4, #4
 8002d32:	5101      	str	r1, [r0, r4]
 8002d34:	3404      	adds	r4, #4
 8002d36:	5101      	str	r1, [r0, r4]
 8002d38:	3404      	adds	r4, #4
 8002d3a:	5101      	str	r1, [r0, r4]
 8002d3c:	3404      	adds	r4, #4
 8002d3e:	5101      	str	r1, [r0, r4]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8002d40:	21ae      	movs	r1, #174	; 0xae
 8002d42:	5242      	strh	r2, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8002d44:	4642      	mov	r2, r8
 8002d46:	3102      	adds	r1, #2
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	5242      	strh	r2, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	22b2      	movs	r2, #178	; 0xb2
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d50:	2480      	movs	r4, #128	; 0x80
 8002d52:	5281      	strh	r1, [r0, r2]
  pHandle->_Super.BrakeActionLock = false;
 8002d54:	3a2d      	subs	r2, #45	; 0x2d
 8002d56:	5487      	strb	r7, [r0, r2]
 8002d58:	4a70      	ldr	r2, [pc, #448]	; (8002f1c <R1_Init+0x25c>)
 8002d5a:	03e4      	lsls	r4, r4, #15
 8002d5c:	6991      	ldr	r1, [r2, #24]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002d5e:	4e70      	ldr	r6, [pc, #448]	; (8002f20 <R1_Init+0x260>)
 8002d60:	4321      	orrs	r1, r4
 8002d62:	6191      	str	r1, [r2, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d64:	6992      	ldr	r2, [r2, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8002d66:	496f      	ldr	r1, [pc, #444]	; (8002f24 <R1_Init+0x264>)
 8002d68:	4022      	ands	r2, r4
 8002d6a:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8002d6c:	9a03      	ldr	r2, [sp, #12]
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	68cc      	ldr	r4, [r1, #12]
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	4322      	orrs	r2, r4
 8002d76:	60ca      	str	r2, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002d78:	2101      	movs	r1, #1
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8002d7a:	2440      	movs	r4, #64	; 0x40
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	46b1      	mov	r9, r6
 8002d80:	438a      	bics	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	316f      	adds	r1, #111	; 0x6f
 8002d88:	438a      	bics	r2, r1
 8002d8a:	4322      	orrs	r2, r4
 8002d8c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002d8e:	685a      	ldr	r2, [r3, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002d90:	3c38      	subs	r4, #56	; 0x38
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002d92:	438a      	bics	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	4963      	ldr	r1, [pc, #396]	; (8002f28 <R1_Init+0x268>)
 8002d9a:	43a2      	bics	r2, r4
 8002d9c:	619a      	str	r2, [r3, #24]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	400a      	ands	r2, r1
 8002da2:	619a      	str	r2, [r3, #24]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	43a2      	bics	r2, r4
 8002da8:	61da      	str	r2, [r3, #28]
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	400a      	ands	r2, r1
 8002dae:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	6a19      	ldr	r1, [r3, #32]
 8002db4:	0152      	lsls	r2, r2, #5
 8002db6:	430a      	orrs	r2, r1
 8002db8:	621a      	str	r2, [r3, #32]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002dba:	2281      	movs	r2, #129	; 0x81
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8002dbc:	2180      	movs	r1, #128	; 0x80
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002dbe:	4252      	negs	r2, r2
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002dc0:	631f      	str	r7, [r3, #48]	; 0x30
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002dc2:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CCER, Channels);
 8002dca:	6a19      	ldr	r1, [r3, #32]
 8002dcc:	4a57      	ldr	r2, [pc, #348]	; (8002f2c <R1_Init+0x26c>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	621a      	str	r2, [r3, #32]
 8002dd2:	4957      	ldr	r1, [pc, #348]	; (8002f30 <R1_Init+0x270>)
 8002dd4:	465a      	mov	r2, fp
 8002dd6:	468a      	mov	sl, r1
 8002dd8:	68d2      	ldr	r2, [r2, #12]
 8002dda:	4452      	add	r2, sl
 8002ddc:	3a01      	subs	r2, #1
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	4462      	add	r2, ip
 8002de2:	6817      	ldr	r7, [r2, #0]
 8002de4:	4037      	ands	r7, r6
 8002de6:	4e53      	ldr	r6, [pc, #332]	; (8002f34 <R1_Init+0x274>)
 8002de8:	4337      	orrs	r7, r6
 8002dea:	6017      	str	r7, [r2, #0]
  MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
 8002dec:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8002dee:	46b0      	mov	r8, r6
 8002df0:	4e51      	ldr	r6, [pc, #324]	; (8002f38 <R1_Init+0x278>)
 8002df2:	403e      	ands	r6, r7
 8002df4:	4f51      	ldr	r7, [pc, #324]	; (8002f3c <R1_Init+0x27c>)
 8002df6:	4337      	orrs	r7, r6
 8002df8:	649f      	str	r7, [r3, #72]	; 0x48
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t)&pHandle->DmaBuffCCR[0]);
 8002dfa:	0007      	movs	r7, r0
 8002dfc:	3788      	adds	r7, #136	; 0x88
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002dfe:	60d7      	str	r7, [r2, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t) &TIMx->DMAR);
 8002e00:	001f      	movs	r7, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002e02:	2606      	movs	r6, #6
 8002e04:	374c      	adds	r7, #76	; 0x4c
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002e06:	6097      	str	r7, [r2, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002e08:	6857      	ldr	r7, [r2, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002e0a:	9101      	str	r1, [sp, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002e0c:	0c3f      	lsrs	r7, r7, #16
 8002e0e:	043f      	lsls	r7, r7, #16
 8002e10:	4337      	orrs	r7, r6
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002e12:	465e      	mov	r6, fp
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002e14:	6057      	str	r7, [r2, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002e16:	6937      	ldr	r7, [r6, #16]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t) &TIMx->CCR4);
 8002e18:	3340      	adds	r3, #64	; 0x40
 8002e1a:	4457      	add	r7, sl
 8002e1c:	3f01      	subs	r7, #1
 8002e1e:	783f      	ldrb	r7, [r7, #0]
 8002e20:	4467      	add	r7, ip
 8002e22:	683e      	ldr	r6, [r7, #0]
 8002e24:	46b2      	mov	sl, r6
 8002e26:	464e      	mov	r6, r9
 8002e28:	4651      	mov	r1, sl
 8002e2a:	400e      	ands	r6, r1
 8002e2c:	46b1      	mov	r9, r6
 8002e2e:	4646      	mov	r6, r8
 8002e30:	4649      	mov	r1, r9
 8002e32:	430e      	orrs	r6, r1
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t)&pHandle->DmaBuffCCR_ADCTrig[0]);
 8002e34:	21ae      	movs	r1, #174	; 0xae
 8002e36:	4688      	mov	r8, r1
 8002e38:	4480      	add	r8, r0
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002e3a:	4641      	mov	r1, r8
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002e3c:	603e      	str	r6, [r7, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002e3e:	60f9      	str	r1, [r7, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002e40:	2103      	movs	r1, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0c1b      	lsrs	r3, r3, #16
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	607b      	str	r3, [r7, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002e4e:	2702      	movs	r7, #2
 8002e50:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002e52:	9901      	ldr	r1, [sp, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002e54:	433b      	orrs	r3, r7
 8002e56:	6013      	str	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002e58:	465a      	mov	r2, fp
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)pHandle->CurConv);
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	6992      	ldr	r2, [r2, #24]
 8002e5e:	33b4      	adds	r3, #180	; 0xb4
 8002e60:	1889      	adds	r1, r1, r2
 8002e62:	3901      	subs	r1, #1
 8002e64:	780a      	ldrb	r2, [r1, #0]
 8002e66:	4462      	add	r2, ip
 8002e68:	60d3      	str	r3, [r2, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)&ADCx->DR);
 8002e6a:	002b      	movs	r3, r5
 8002e6c:	3340      	adds	r3, #64	; 0x40
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002e6e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002e70:	6853      	ldr	r3, [r2, #4]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	433b      	orrs	r3, r7
 8002e78:	6053      	str	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	686b      	ldr	r3, [r5, #4]
 8002e7e:	4393      	bics	r3, r2
 8002e80:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002e82:	602a      	str	r2, [r5, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8002e84:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(ADCx->CR,
 8002e86:	4a2e      	ldr	r2, [pc, #184]	; (8002f40 <R1_Init+0x280>)
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8002e88:	43a3      	bics	r3, r4
 8002e8a:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8002e8c:	602c      	str	r4, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8002e8e:	6891      	ldr	r1, [r2, #8]
 8002e90:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <R1_Init+0x284>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8002e92:	3408      	adds	r4, #8
  MODIFY_REG(ADCx->CR,
 8002e94:	4019      	ands	r1, r3
 8002e96:	3318      	adds	r3, #24
 8002e98:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8002e9a:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 8002e9c:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002e9e:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	dbfc      	blt.n	8002e9e <R1_Init+0x1de>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8002ea4:	6893      	ldr	r3, [r2, #8]
  while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8002ea6:	4219      	tst	r1, r3
 8002ea8:	d1f9      	bne.n	8002e9e <R1_Init+0x1de>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8002eaa:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8002eac:	421c      	tst	r4, r3
 8002eae:	d1f6      	bne.n	8002e9e <R1_Init+0x1de>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8002eb0:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8002eb2:	421f      	tst	r7, r3
 8002eb4:	d1f3      	bne.n	8002e9e <R1_Init+0x1de>
  MODIFY_REG(ADCx->CR,
 8002eb6:	6893      	ldr	r3, [r2, #8]
 8002eb8:	4922      	ldr	r1, [pc, #136]	; (8002f44 <R1_Init+0x284>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002eba:	4c23      	ldr	r4, [pc, #140]	; (8002f48 <R1_Init+0x288>)
  MODIFY_REG(ADCx->CR,
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002ec4:	68eb      	ldr	r3, [r5, #12]
 8002ec6:	4023      	ands	r3, r4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002ec8:	2403      	movs	r4, #3
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002eca:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002ecc:	68d3      	ldr	r3, [r2, #12]
 8002ece:	43a3      	bics	r3, r4
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	60d3      	str	r3, [r2, #12]
  while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == RESET)
 8002ed4:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002ed6:	491a      	ldr	r1, [pc, #104]	; (8002f40 <R1_Init+0x280>)
 8002ed8:	680b      	ldr	r3, [r1, #0]
 8002eda:	421a      	tst	r2, r3
 8002edc:	d0fc      	beq.n	8002ed8 <R1_Init+0x218>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002ede:	68e9      	ldr	r1, [r5, #12]
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <R1_Init+0x288>)
 8002ee2:	4019      	ands	r1, r3
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	60eb      	str	r3, [r5, #12]
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8002eec:	4659      	mov	r1, fp
 8002eee:	2322      	movs	r3, #34	; 0x22
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	0011      	movs	r1, r2
 8002ef4:	4099      	lsls	r1, r3
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ef6:	034b      	lsls	r3, r1, #13
 8002ef8:	0b5b      	lsrs	r3, r3, #13
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002efa:	4914      	ldr	r1, [pc, #80]	; (8002f4c <R1_Init+0x28c>)
 8002efc:	62ab      	str	r3, [r5, #40]	; 0x28
 8002efe:	680b      	ldr	r3, [r1, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
  pHandle->ADCRegularLocked=false; /* We allow ADC usage for regular conversion on Systick */
 8002f04:	22ca      	movs	r2, #202	; 0xca
 8002f06:	2300      	movs	r3, #0
 8002f08:	5483      	strb	r3, [r0, r2]
  pHandle->_Super.DTTest = 0u;
 8002f0a:	3a5a      	subs	r2, #90	; 0x5a
 8002f0c:	5283      	strh	r3, [r0, r2]
}
 8002f0e:	b005      	add	sp, #20
 8002f10:	bcf0      	pop	{r4, r5, r6, r7}
 8002f12:	46bb      	mov	fp, r7
 8002f14:	46b2      	mov	sl, r6
 8002f16:	46a9      	mov	r9, r5
 8002f18:	46a0      	mov	r8, r4
 8002f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	ffff800f 	.word	0xffff800f
 8002f24:	40015800 	.word	0x40015800
 8002f28:	fffff7ff 	.word	0xfffff7ff
 8002f2c:	00000555 	.word	0x00000555
 8002f30:	08006d04 	.word	0x08006d04
 8002f34:	000035b0 	.word	0x000035b0
 8002f38:	ffffe0e0 	.word	0xffffe0e0
 8002f3c:	0000020d 	.word	0x0000020d
 8002f40:	40012400 	.word	0x40012400
 8002f44:	7fffffe8 	.word	0x7fffffe8
 8002f48:	fffff23f 	.word	0xfffff23f
 8002f4c:	40012c00 	.word	0x40012c00

08002f50 <R1_SetOffsetCalib>:
  pHandle->PhaseOffset = offsets->phaseAOffset;
 8002f50:	23a0      	movs	r3, #160	; 0xa0
 8002f52:	680a      	ldr	r2, [r1, #0]
 8002f54:	50c2      	str	r2, [r0, r3]
  pHdl->offsetCalibStatus = true;
 8002f56:	2201      	movs	r2, #1
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	54c2      	strb	r2, [r0, r3]
}
 8002f5c:	4770      	bx	lr
 8002f5e:	46c0      	nop			; (mov r8, r8)

08002f60 <R1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseOffset;
 8002f60:	23a0      	movs	r3, #160	; 0xa0
 8002f62:	58c3      	ldr	r3, [r0, r3]
 8002f64:	600b      	str	r3, [r1, #0]
}
 8002f66:	4770      	bx	lr

08002f68 <R1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002f68:	23cc      	movs	r3, #204	; 0xcc
{
 8002f6a:	b510      	push	{r4, lr}
  pHandle->_Super.TurnOnLowSidesAction = true;
 8002f6c:	227e      	movs	r2, #126	; 0x7e
 8002f6e:	2401      	movs	r4, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002f70:	58c3      	ldr	r3, [r0, r3]
 8002f72:	685b      	ldr	r3, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8002f74:	5484      	strb	r4, [r0, r2]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002f76:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002f78:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002f7a:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002f7c:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002f7e:	3a80      	subs	r2, #128	; 0x80
 8002f80:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	4211      	tst	r1, r2
 8002f86:	d0fc      	beq.n	8002f82 <R1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002f8c:	0212      	lsls	r2, r2, #8
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 8002f92:	237d      	movs	r3, #125	; 0x7d
 8002f94:	5cc3      	ldrb	r3, [r0, r3]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d10b      	bne.n	8002fb2 <R1_TurnOnLowSides+0x4a>
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8002f9a:	2248      	movs	r2, #72	; 0x48
 8002f9c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f9e:	5a82      	ldrh	r2, [r0, r2]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002fa0:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8002fa2:	224a      	movs	r2, #74	; 0x4a
 8002fa4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002fa6:	5a82      	ldrh	r2, [r0, r2]
 8002fa8:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002faa:	224c      	movs	r2, #76	; 0x4c
 8002fac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fae:	5a82      	ldrh	r2, [r0, r2]
 8002fb0:	619a      	str	r2, [r3, #24]
}
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <R1_SwitchOnPWM>:
{
 8002fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002fb6:	23cc      	movs	r3, #204	; 0xcc
{
 8002fb8:	4645      	mov	r5, r8
 8002fba:	46de      	mov	lr, fp
 8002fbc:	4657      	mov	r7, sl
 8002fbe:	464e      	mov	r6, r9
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002fc0:	58c2      	ldr	r2, [r0, r3]
{
 8002fc2:	b5e0      	push	{r5, r6, r7, lr}
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8002fc4:	6811      	ldr	r1, [r2, #0]
{
 8002fc6:	b085      	sub	sp, #20
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8002fc8:	468b      	mov	fp, r1
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002fca:	6891      	ldr	r1, [r2, #8]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002fcc:	6853      	ldr	r3, [r2, #4]
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002fce:	9101      	str	r1, [sp, #4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002fd0:	21b8      	movs	r1, #184	; 0xb8
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002fd2:	8bd6      	ldrh	r6, [r2, #30]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002fd4:	5a45      	ldrh	r5, [r0, r1]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002fd6:	8c11      	ldrh	r1, [r2, #32]
 8002fd8:	086c      	lsrs	r4, r5, #1
 8002fda:	1989      	adds	r1, r1, r6
 8002fdc:	b289      	uxth	r1, r1
 8002fde:	1a66      	subs	r6, r4, r1
 8002fe0:	b2b6      	uxth	r6, r6
 8002fe2:	46b0      	mov	r8, r6
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002fe4:	26ba      	movs	r6, #186	; 0xba
 8002fe6:	4647      	mov	r7, r8
 8002fe8:	5387      	strh	r7, [r0, r6]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8002fea:	2700      	movs	r7, #0
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002fec:	1861      	adds	r1, r4, r1
 8002fee:	b289      	uxth	r1, r1
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002ff0:	3602      	adds	r6, #2
 8002ff2:	5381      	strh	r1, [r0, r6]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8002ff4:	3e3e      	subs	r6, #62	; 0x3e
 8002ff6:	5587      	strb	r7, [r0, r6]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8002ff8:	3630      	adds	r6, #48	; 0x30
 8002ffa:	5381      	strh	r1, [r0, r6]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002ffc:	21b2      	movs	r1, #178	; 0xb2
 8002ffe:	4646      	mov	r6, r8
 8003000:	5246      	strh	r6, [r0, r1]
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 8003002:	1c69      	adds	r1, r5, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003004:	6419      	str	r1, [r3, #64]	; 0x40
 8003006:	9102      	str	r1, [sp, #8]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003008:	2180      	movs	r1, #128	; 0x80
  WRITE_REG(TIMx->CCR1, CompareValue);
 800300a:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800300c:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800300e:	63dc      	str	r4, [r3, #60]	; 0x3c
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003010:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003012:	0209      	lsls	r1, r1, #8
 8003014:	4321      	orrs	r1, r4
 8003016:	6459      	str	r1, [r3, #68]	; 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 8003018:	217d      	movs	r1, #125	; 0x7d
 800301a:	5c41      	ldrb	r1, [r0, r1]
 800301c:	2902      	cmp	r1, #2
 800301e:	d100      	bne.n	8003022 <R1_SwitchOnPWM+0x6e>
 8003020:	e0d4      	b.n	80031cc <R1_SwitchOnPWM+0x218>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	2410      	movs	r4, #16
 8003026:	9f01      	ldr	r7, [sp, #4]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8003028:	06c9      	lsls	r1, r1, #27
 800302a:	d500      	bpl.n	800302e <R1_SwitchOnPWM+0x7a>
 800302c:	e0be      	b.n	80031ac <R1_SwitchOnPWM+0x1f8>
 800302e:	6819      	ldr	r1, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8003030:	420c      	tst	r4, r1
 8003032:	d0fc      	beq.n	800302e <R1_SwitchOnPWM+0x7a>
  LL_DMA_ClearFlag_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8003034:	68d1      	ldr	r1, [r2, #12]
 8003036:	9701      	str	r7, [sp, #4]
/* Make this define visible for all projects */
#define NBR_OF_MOTORS             1

__STATIC_INLINE void LL_DMA_ClearFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  if (NULL == DMAx)
 8003038:	2f00      	cmp	r7, #0
 800303a:	d100      	bne.n	800303e <R1_SwitchOnPWM+0x8a>
 800303c:	e0c2      	b.n	80031c4 <R1_SwitchOnPWM+0x210>
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800303e:	2502      	movs	r5, #2
 8003040:	002c      	movs	r4, r5
 8003042:	3901      	subs	r1, #1
 8003044:	008e      	lsls	r6, r1, #2
 8003046:	40b4      	lsls	r4, r6
 8003048:	607c      	str	r4, [r7, #4]
    /* Nothing to do */
  }
  else
  {
    /* Clear HT bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800304a:	2404      	movs	r4, #4
 800304c:	0027      	movs	r7, r4
 800304e:	40b7      	lsls	r7, r6
 8003050:	003e      	movs	r6, r7
 8003052:	9f01      	ldr	r7, [sp, #4]
 8003054:	607e      	str	r6, [r7, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003056:	6916      	ldr	r6, [r2, #16]
 8003058:	3e01      	subs	r6, #1
 800305a:	00b7      	lsls	r7, r6, #2
 800305c:	40bd      	lsls	r5, r7
 800305e:	46bc      	mov	ip, r7
 8003060:	9f01      	ldr	r7, [sp, #4]
 8003062:	607d      	str	r5, [r7, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003064:	4665      	mov	r5, ip
 8003066:	40ac      	lsls	r4, r5
 8003068:	607c      	str	r4, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800306a:	2402      	movs	r4, #2
  pHandle->TCCnt = 0;
 800306c:	2500      	movs	r5, #0
 800306e:	4264      	negs	r4, r4
 8003070:	611c      	str	r4, [r3, #16]
 8003072:	34c8      	adds	r4, #200	; 0xc8
 8003074:	5505      	strb	r5, [r0, r4]
  pHandle->TCDoneFlag = false;
 8003076:	3403      	adds	r4, #3
 8003078:	5505      	strb	r5, [r0, r4]
 800307a:	9c01      	ldr	r4, [sp, #4]
  pHandle->TCCnt = 0;
 800307c:	46a9      	mov	r9, r5
 800307e:	46a4      	mov	ip, r4
 8003080:	4d61      	ldr	r5, [pc, #388]	; (8003208 <R1_SwitchOnPWM+0x254>)
 8003082:	5c69      	ldrb	r1, [r5, r1]
 8003084:	5dae      	ldrb	r6, [r5, r6]
 8003086:	4461      	add	r1, ip
 8003088:	684c      	ldr	r4, [r1, #4]
 800308a:	000f      	movs	r7, r1
 800308c:	2106      	movs	r1, #6
 800308e:	0c24      	lsrs	r4, r4, #16
 8003090:	0424      	lsls	r4, r4, #16
 8003092:	430c      	orrs	r4, r1
 8003094:	607c      	str	r4, [r7, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003096:	2401      	movs	r4, #1
 8003098:	6839      	ldr	r1, [r7, #0]
 800309a:	9703      	str	r7, [sp, #12]
 800309c:	4321      	orrs	r1, r4
 800309e:	6039      	str	r1, [r7, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 80030a0:	68d9      	ldr	r1, [r3, #12]
 80030a2:	468a      	mov	sl, r1
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	0049      	lsls	r1, r1, #1
 80030a8:	468c      	mov	ip, r1
 80030aa:	4651      	mov	r1, sl
 80030ac:	4667      	mov	r7, ip
 80030ae:	4339      	orrs	r1, r7
 80030b0:	60d9      	str	r1, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 80030b2:	68d9      	ldr	r1, [r3, #12]
 80030b4:	468a      	mov	sl, r1
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	0149      	lsls	r1, r1, #5
 80030ba:	468c      	mov	ip, r1
 80030bc:	4651      	mov	r1, sl
 80030be:	4667      	mov	r7, ip
 80030c0:	4339      	orrs	r1, r7
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80030c2:	9f01      	ldr	r7, [sp, #4]
 80030c4:	46b4      	mov	ip, r6
 80030c6:	46ba      	mov	sl, r7
 80030c8:	44d4      	add	ip, sl
 80030ca:	60d9      	str	r1, [r3, #12]
 80030cc:	4661      	mov	r1, ip
 80030ce:	684e      	ldr	r6, [r1, #4]
 80030d0:	2103      	movs	r1, #3
 80030d2:	0c36      	lsrs	r6, r6, #16
 80030d4:	0436      	lsls	r6, r6, #16
 80030d6:	430e      	orrs	r6, r1
 80030d8:	468a      	mov	sl, r1
 80030da:	4661      	mov	r1, ip
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80030dc:	46bc      	mov	ip, r7
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80030de:	2702      	movs	r7, #2
 80030e0:	604e      	str	r6, [r1, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80030e2:	680e      	ldr	r6, [r1, #0]
 80030e4:	4326      	orrs	r6, r4
 80030e6:	600e      	str	r6, [r1, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80030e8:	6996      	ldr	r6, [r2, #24]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80030ea:	9902      	ldr	r1, [sp, #8]
 80030ec:	19ad      	adds	r5, r5, r6
 80030ee:	3d01      	subs	r5, #1
 80030f0:	782d      	ldrb	r5, [r5, #0]
 80030f2:	6419      	str	r1, [r3, #64]	; 0x40
 80030f4:	4465      	add	r5, ip
 80030f6:	682e      	ldr	r6, [r5, #0]
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 80030f8:	0021      	movs	r1, r4
 80030fa:	43a6      	bics	r6, r4
 80030fc:	602e      	str	r6, [r5, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80030fe:	686e      	ldr	r6, [r5, #4]
 8003100:	0c36      	lsrs	r6, r6, #16
 8003102:	0436      	lsls	r6, r6, #16
 8003104:	433e      	orrs	r6, r7
 8003106:	606e      	str	r6, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003108:	682e      	ldr	r6, [r5, #0]
 800310a:	4326      	orrs	r6, r4
 800310c:	602e      	str	r6, [r5, #0]
 800310e:	2622      	movs	r6, #34	; 0x22
 8003110:	5d96      	ldrb	r6, [r2, r6]
 8003112:	40b1      	lsls	r1, r6
 8003114:	034e      	lsls	r6, r1, #13
 8003116:	4659      	mov	r1, fp
 8003118:	0b76      	lsrs	r6, r6, #13
 800311a:	628e      	str	r6, [r1, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800311c:	4e3b      	ldr	r6, [pc, #236]	; (800320c <R1_SwitchOnPWM+0x258>)
 800311e:	6971      	ldr	r1, [r6, #20]
 8003120:	468c      	mov	ip, r1
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 8003122:	2123      	movs	r1, #35	; 0x23
 8003124:	5c52      	ldrb	r2, [r2, r1]
 8003126:	391c      	subs	r1, #28
 8003128:	468b      	mov	fp, r1
 800312a:	9201      	str	r2, [sp, #4]
 800312c:	4661      	mov	r1, ip
 800312e:	465a      	mov	r2, fp
 8003130:	4391      	bics	r1, r2
 8003132:	000a      	movs	r2, r1
 8003134:	9901      	ldr	r1, [sp, #4]
 8003136:	4311      	orrs	r1, r2
 8003138:	6171      	str	r1, [r6, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800313a:	4651      	mov	r1, sl
 800313c:	68f2      	ldr	r2, [r6, #12]
 800313e:	438a      	bics	r2, r1
 8003140:	4322      	orrs	r2, r4
 8003142:	60f2      	str	r2, [r6, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003144:	68f2      	ldr	r2, [r6, #12]
 8003146:	4932      	ldr	r1, [pc, #200]	; (8003210 <R1_SwitchOnPWM+0x25c>)
 8003148:	4011      	ands	r1, r2
 800314a:	2288      	movs	r2, #136	; 0x88
 800314c:	00d2      	lsls	r2, r2, #3
 800314e:	430a      	orrs	r2, r1
 8003150:	60f2      	str	r2, [r6, #12]
  MODIFY_REG(ADCx->CR,
 8003152:	68b2      	ldr	r2, [r6, #8]
 8003154:	492f      	ldr	r1, [pc, #188]	; (8003214 <R1_SwitchOnPWM+0x260>)
 8003156:	400a      	ands	r2, r1
 8003158:	2104      	movs	r1, #4
 800315a:	430a      	orrs	r2, r1
 800315c:	60b2      	str	r2, [r6, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800315e:	2670      	movs	r6, #112	; 0x70
 8003160:	685a      	ldr	r2, [r3, #4]
  pHandle->FOCDurationFlag = false;
 8003162:	4649      	mov	r1, r9
 8003164:	4332      	orrs	r2, r6
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	22c8      	movs	r2, #200	; 0xc8
 800316a:	5481      	strb	r1, [r0, r2]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800316c:	9903      	ldr	r1, [sp, #12]
  pHandle->ADCRegularLocked=true;
 800316e:	3202      	adds	r2, #2
 8003170:	5484      	strb	r4, [r0, r2]
 8003172:	680a      	ldr	r2, [r1, #0]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003174:	2010      	movs	r0, #16
 8003176:	433a      	orrs	r2, r7
 8003178:	600a      	str	r2, [r1, #0]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800317a:	2101      	movs	r1, #1
 800317c:	682a      	ldr	r2, [r5, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800317e:	3c03      	subs	r4, #3
 8003180:	433a      	orrs	r2, r7
 8003182:	602a      	str	r2, [r5, #0]
 8003184:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	4211      	tst	r1, r2
 800318a:	d0fc      	beq.n	8003186 <R1_SwitchOnPWM+0x1d2>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800318c:	681a      	ldr	r2, [r3, #0]
  while ((LL_TIM_IsActiveFlag_UPDATE(TIMx) == RESET) || (LL_TIM_GetDirection(TIMx) == LL_TIM_COUNTERDIRECTION_DOWN))
 800318e:	4210      	tst	r0, r2
 8003190:	d1f9      	bne.n	8003186 <R1_SwitchOnPWM+0x1d2>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003192:	4821      	ldr	r0, [pc, #132]	; (8003218 <R1_SwitchOnPWM+0x264>)
 8003194:	68c2      	ldr	r2, [r0, #12]
 8003196:	430a      	orrs	r2, r1
 8003198:	60c2      	str	r2, [r0, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800319a:	4642      	mov	r2, r8
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800319e:	b005      	add	sp, #20
 80031a0:	bcf0      	pop	{r4, r5, r6, r7}
 80031a2:	46bb      	mov	fp, r7
 80031a4:	46b2      	mov	sl, r6
 80031a6:	46a9      	mov	r9, r5
 80031a8:	46a0      	mov	r8, r4
 80031aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80031ac:	6819      	ldr	r1, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 80031ae:	420c      	tst	r4, r1
 80031b0:	d1fc      	bne.n	80031ac <R1_SwitchOnPWM+0x1f8>
 80031b2:	2410      	movs	r4, #16
 80031b4:	6819      	ldr	r1, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80031b6:	420c      	tst	r4, r1
 80031b8:	d0fc      	beq.n	80031b4 <R1_SwitchOnPWM+0x200>
  LL_DMA_ClearFlag_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 80031ba:	68d1      	ldr	r1, [r2, #12]
 80031bc:	9701      	str	r7, [sp, #4]
  if (NULL == DMAx)
 80031be:	2f00      	cmp	r7, #0
 80031c0:	d000      	beq.n	80031c4 <R1_SwitchOnPWM+0x210>
 80031c2:	e73c      	b.n	800303e <R1_SwitchOnPWM+0x8a>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80031c4:	6916      	ldr	r6, [r2, #16]
 80031c6:	3901      	subs	r1, #1
 80031c8:	3e01      	subs	r6, #1
 80031ca:	e74e      	b.n	800306a <R1_SwitchOnPWM+0xb6>
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80031cc:	6a1c      	ldr	r4, [r3, #32]
 80031ce:	4913      	ldr	r1, [pc, #76]	; (800321c <R1_SwitchOnPWM+0x268>)
 80031d0:	420c      	tst	r4, r1
 80031d2:	d00c      	beq.n	80031ee <R1_SwitchOnPWM+0x23a>
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80031d4:	2448      	movs	r4, #72	; 0x48
 80031d6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80031d8:	5b04      	ldrh	r4, [r0, r4]
 80031da:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80031dc:	244a      	movs	r4, #74	; 0x4a
 80031de:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80031e0:	5b04      	ldrh	r4, [r0, r4]
 80031e2:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80031e4:	244c      	movs	r4, #76	; 0x4c
 80031e6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80031e8:	5b04      	ldrh	r4, [r0, r4]
 80031ea:	618c      	str	r4, [r1, #24]
}
 80031ec:	e719      	b.n	8003022 <R1_SwitchOnPWM+0x6e>
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80031ee:	2448      	movs	r4, #72	; 0x48
 80031f0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80031f2:	5b04      	ldrh	r4, [r0, r4]
  WRITE_REG(GPIOx->BRR, PinMask);
 80031f4:	628c      	str	r4, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80031f6:	244a      	movs	r4, #74	; 0x4a
 80031f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80031fa:	5b04      	ldrh	r4, [r0, r4]
 80031fc:	628c      	str	r4, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80031fe:	244c      	movs	r4, #76	; 0x4c
 8003200:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003202:	5b04      	ldrh	r4, [r0, r4]
 8003204:	628c      	str	r4, [r1, #40]	; 0x28
}
 8003206:	e70c      	b.n	8003022 <R1_SwitchOnPWM+0x6e>
 8003208:	08006d04 	.word	0x08006d04
 800320c:	40012400 	.word	0x40012400
 8003210:	fffff23f 	.word	0xfffff23f
 8003214:	7fffffe8 	.word	0x7fffffe8
 8003218:	40012c00 	.word	0x40012c00
 800321c:	00000555 	.word	0x00000555

08003220 <R1_SwitchOffPWM>:
{
 8003220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003222:	4657      	mov	r7, sl
 8003224:	464e      	mov	r6, r9
 8003226:	4645      	mov	r5, r8
 8003228:	46de      	mov	lr, fp
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800322a:	23cc      	movs	r3, #204	; 0xcc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800322c:	22b8      	movs	r2, #184	; 0xb8
{
 800322e:	b5e0      	push	{r5, r6, r7, lr}
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003230:	5a82      	ldrh	r2, [r0, r2]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8003232:	58c6      	ldr	r6, [r0, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003234:	0855      	lsrs	r5, r2, #1
 8003236:	8bf4      	ldrh	r4, [r6, #30]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003238:	4694      	mov	ip, r2
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800323a:	8c32      	ldrh	r2, [r6, #32]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800323c:	6873      	ldr	r3, [r6, #4]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800323e:	1912      	adds	r2, r2, r4
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003240:	24ba      	movs	r4, #186	; 0xba
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003242:	b292      	uxth	r2, r2
 8003244:	1aaf      	subs	r7, r5, r2
 8003246:	b2bf      	uxth	r7, r7
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003248:	18ad      	adds	r5, r5, r2
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 800324a:	68b1      	ldr	r1, [r6, #8]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800324c:	b2ad      	uxth	r5, r5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800324e:	5307      	strh	r7, [r0, r4]
{
 8003250:	b083      	sub	sp, #12
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003252:	3402      	adds	r4, #2
 8003254:	5305      	strh	r5, [r0, r4]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003256:	9501      	str	r5, [sp, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003258:	2501      	movs	r5, #1
 800325a:	68dc      	ldr	r4, [r3, #12]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800325c:	9700      	str	r7, [sp, #0]
 800325e:	43ac      	bics	r4, r5
 8003260:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8003262:	681c      	ldr	r4, [r3, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8003264:	06e4      	lsls	r4, r4, #27
 8003266:	d400      	bmi.n	800326a <R1_SwitchOffPWM+0x4a>
 8003268:	e0c3      	b.n	80033f2 <R1_SwitchOffPWM+0x1d2>
 800326a:	2410      	movs	r4, #16
 800326c:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 800326e:	4645      	mov	r5, r8
 8003270:	681c      	ldr	r4, [r3, #0]
 8003272:	4225      	tst	r5, r4
 8003274:	d1fb      	bne.n	800326e <R1_SwitchOffPWM+0x4e>
 8003276:	2410      	movs	r4, #16
 8003278:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 800327a:	4645      	mov	r5, r8
 800327c:	681c      	ldr	r4, [r3, #0]
 800327e:	4225      	tst	r5, r4
 8003280:	d0fb      	beq.n	800327a <R1_SwitchOffPWM+0x5a>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8003282:	4c6c      	ldr	r4, [pc, #432]	; (8003434 <R1_SwitchOffPWM+0x214>)
 8003284:	46a2      	mov	sl, r4
 8003286:	68f4      	ldr	r4, [r6, #12]
 8003288:	4454      	add	r4, sl
 800328a:	3c01      	subs	r4, #1
 800328c:	7824      	ldrb	r4, [r4, #0]
 800328e:	1864      	adds	r4, r4, r1
 8003290:	6825      	ldr	r5, [r4, #0]
 8003292:	46a8      	mov	r8, r5
 8003294:	2502      	movs	r5, #2
 8003296:	46a9      	mov	r9, r5
 8003298:	4645      	mov	r5, r8
 800329a:	464f      	mov	r7, r9
 800329c:	43bd      	bics	r5, r7
 800329e:	6025      	str	r5, [r4, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80032a0:	6825      	ldr	r5, [r4, #0]
 80032a2:	46a8      	mov	r8, r5
 80032a4:	2504      	movs	r5, #4
 80032a6:	46a9      	mov	r9, r5
 80032a8:	4645      	mov	r5, r8
 80032aa:	464f      	mov	r7, r9
 80032ac:	43bd      	bics	r5, r7
 80032ae:	6025      	str	r5, [r4, #0]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80032b0:	257e      	movs	r5, #126	; 0x7e
 80032b2:	46a8      	mov	r8, r5
 80032b4:	2500      	movs	r5, #0
 80032b6:	46a9      	mov	r9, r5
 80032b8:	4645      	mov	r5, r8
 80032ba:	464f      	mov	r7, r9
 80032bc:	5547      	strb	r7, [r0, r5]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80032be:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80032c0:	46a8      	mov	r8, r5
 80032c2:	4d5d      	ldr	r5, [pc, #372]	; (8003438 <R1_SwitchOffPWM+0x218>)
 80032c4:	46a9      	mov	r9, r5
 80032c6:	4645      	mov	r5, r8
 80032c8:	464f      	mov	r7, r9
 80032ca:	403d      	ands	r5, r7
 80032cc:	645d      	str	r5, [r3, #68]	; 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 80032ce:	2585      	movs	r5, #133	; 0x85
 80032d0:	5d45      	ldrb	r5, [r0, r5]
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	d104      	bne.n	80032e0 <R1_SwitchOffPWM+0xc0>
    if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 80032d6:	357d      	adds	r5, #125	; 0x7d
 80032d8:	5d45      	ldrb	r5, [r0, r5]
 80032da:	2d02      	cmp	r5, #2
 80032dc:	d100      	bne.n	80032e0 <R1_SwitchOffPWM+0xc0>
 80032de:	e08f      	b.n	8003400 <R1_SwitchOffPWM+0x1e0>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80032e0:	69b5      	ldr	r5, [r6, #24]
 80032e2:	46a8      	mov	r8, r5
 80032e4:	2501      	movs	r5, #1
 80032e6:	426d      	negs	r5, r5
 80032e8:	46a9      	mov	r9, r5
 80032ea:	44d0      	add	r8, sl
 80032ec:	44c8      	add	r8, r9
 80032ee:	4645      	mov	r5, r8
 80032f0:	782d      	ldrb	r5, [r5, #0]
 80032f2:	46a8      	mov	r8, r5
 80032f4:	4488      	add	r8, r1
 80032f6:	4645      	mov	r5, r8
 80032f8:	682d      	ldr	r5, [r5, #0]
 80032fa:	46ab      	mov	fp, r5
 80032fc:	2501      	movs	r5, #1
 80032fe:	46a9      	mov	r9, r5
 8003300:	465d      	mov	r5, fp
 8003302:	464f      	mov	r7, r9
 8003304:	43bd      	bics	r5, r7
 8003306:	46ab      	mov	fp, r5
 8003308:	4645      	mov	r5, r8
 800330a:	465f      	mov	r7, fp
 800330c:	602f      	str	r7, [r5, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 800330e:	464d      	mov	r5, r9
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003310:	464f      	mov	r7, r9
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8003312:	604d      	str	r5, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8003314:	3501      	adds	r5, #1
 8003316:	604d      	str	r5, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8003318:	3502      	adds	r5, #2
 800331a:	604d      	str	r5, [r1, #4]
 800331c:	46a8      	mov	r8, r5
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800331e:	6825      	ldr	r5, [r4, #0]
 8003320:	43bd      	bics	r5, r7
 8003322:	6025      	str	r5, [r4, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UDE);
 8003324:	68dc      	ldr	r4, [r3, #12]
 8003326:	4d45      	ldr	r5, [pc, #276]	; (800343c <R1_SwitchOffPWM+0x21c>)
 8003328:	402c      	ands	r4, r5
 800332a:	60dc      	str	r4, [r3, #12]
 800332c:	6934      	ldr	r4, [r6, #16]
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 800332e:	4666      	mov	r6, ip
 8003330:	4454      	add	r4, sl
 8003332:	3c01      	subs	r4, #1
 8003334:	7824      	ldrb	r4, [r4, #0]
 8003336:	3601      	adds	r6, #1
 8003338:	1909      	adds	r1, r1, r4
 800333a:	680c      	ldr	r4, [r1, #0]
 800333c:	43bc      	bics	r4, r7
 800333e:	600c      	str	r4, [r1, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8003340:	68d9      	ldr	r1, [r3, #12]
 8003342:	4c3f      	ldr	r4, [pc, #252]	; (8003440 <R1_SwitchOffPWM+0x220>)
 8003344:	4021      	ands	r1, r4
 8003346:	60d9      	str	r1, [r3, #12]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8003348:	21ae      	movs	r1, #174	; 0xae
 800334a:	9c01      	ldr	r4, [sp, #4]
 800334c:	5244      	strh	r4, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 800334e:	9c00      	ldr	r4, [sp, #0]
 8003350:	3104      	adds	r1, #4
 8003352:	5244      	strh	r4, [r0, r1]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003354:	2470      	movs	r4, #112	; 0x70
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003356:	641e      	str	r6, [r3, #64]	; 0x40
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	43a1      	bics	r1, r4
  if (LL_ADC_REG_IsConversionOngoing (ADC1))
 800335c:	4644      	mov	r4, r8
 800335e:	6059      	str	r1, [r3, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8003360:	4938      	ldr	r1, [pc, #224]	; (8003444 <R1_SwitchOffPWM+0x224>)
 8003362:	688b      	ldr	r3, [r1, #8]
 8003364:	421c      	tst	r4, r3
 8003366:	d009      	beq.n	800337c <R1_SwitchOffPWM+0x15c>
  MODIFY_REG(ADCx->CR,
 8003368:	688b      	ldr	r3, [r1, #8]
 800336a:	4c37      	ldr	r4, [pc, #220]	; (8003448 <R1_SwitchOffPWM+0x228>)
 800336c:	4023      	ands	r3, r4
 800336e:	2410      	movs	r4, #16
 8003370:	4323      	orrs	r3, r4
 8003372:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8003374:	3c0c      	subs	r4, #12
 8003376:	688b      	ldr	r3, [r1, #8]
    while (LL_ADC_REG_IsConversionOngoing(ADC1))
 8003378:	421c      	tst	r4, r3
 800337a:	d1fc      	bne.n	8003376 <R1_SwitchOffPWM+0x156>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800337c:	4931      	ldr	r1, [pc, #196]	; (8003444 <R1_SwitchOffPWM+0x224>)
 800337e:	4c33      	ldr	r4, [pc, #204]	; (800344c <R1_SwitchOffPWM+0x22c>)
 8003380:	68cb      	ldr	r3, [r1, #12]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003382:	27ba      	movs	r7, #186	; 0xba
 8003384:	4023      	ands	r3, r4
 8003386:	60cb      	str	r3, [r1, #12]
  pHandle->ADCRegularLocked=false;
 8003388:	2400      	movs	r4, #0
 800338a:	23ca      	movs	r3, #202	; 0xca
 800338c:	54c4      	strb	r4, [r0, r3]
  pHandle->iflag = 0;
 800338e:	3b05      	subs	r3, #5
 8003390:	54c4      	strb	r4, [r0, r3]
  pHandle->FOCDurationFlag = false;
 8003392:	3303      	adds	r3, #3
 8003394:	54c4      	strb	r4, [r0, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8003396:	3b56      	subs	r3, #86	; 0x56
 8003398:	5ac1      	ldrh	r1, [r0, r3]
 800339a:	3346      	adds	r3, #70	; 0x46
 800339c:	084e      	lsrs	r6, r1, #1
 800339e:	52c6      	strh	r6, [r0, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80033a0:	088b      	lsrs	r3, r1, #2
 80033a2:	1a9d      	subs	r5, r3, r2
 80033a4:	b2ad      	uxth	r5, r5
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80033a6:	18d2      	adds	r2, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80033a8:	53c5      	strh	r5, [r0, r7]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80033aa:	b292      	uxth	r2, r2
 80033ac:	0419      	lsls	r1, r3, #16
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80033ae:	3702      	adds	r7, #2
 80033b0:	53c2      	strh	r2, [r0, r7]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 80033b2:	4319      	orrs	r1, r3
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80033b4:	3f68      	subs	r7, #104	; 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 80033b6:	6501      	str	r1, [r0, #80]	; 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80033b8:	53c3      	strh	r3, [r0, r7]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 80033ba:	2388      	movs	r3, #136	; 0x88
 80033bc:	50c1      	str	r1, [r0, r3]
 80033be:	3304      	adds	r3, #4
 80033c0:	50c1      	str	r1, [r0, r3]
 80033c2:	3304      	adds	r3, #4
 80033c4:	50c1      	str	r1, [r0, r3]
 80033c6:	3304      	adds	r3, #4
 80033c8:	50c1      	str	r1, [r0, r3]
 80033ca:	3304      	adds	r3, #4
 80033cc:	50c1      	str	r1, [r0, r3]
 80033ce:	3304      	adds	r3, #4
 80033d0:	50c1      	str	r1, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80033d2:	3312      	adds	r3, #18
 80033d4:	52c2      	strh	r2, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 80033d6:	22b0      	movs	r2, #176	; 0xb0
 80033d8:	3e01      	subs	r6, #1
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80033da:	3304      	adds	r3, #4
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 80033dc:	5286      	strh	r6, [r0, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80033de:	52c5      	strh	r5, [r0, r3]
  pHandle->_Super.BrakeActionLock = false;
 80033e0:	3b2d      	subs	r3, #45	; 0x2d
 80033e2:	54c4      	strb	r4, [r0, r3]
}
 80033e4:	b003      	add	sp, #12
 80033e6:	bcf0      	pop	{r4, r5, r6, r7}
 80033e8:	46bb      	mov	fp, r7
 80033ea:	46b2      	mov	sl, r6
 80033ec:	46a9      	mov	r9, r5
 80033ee:	46a0      	mov	r8, r4
 80033f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80033f2:	2410      	movs	r4, #16
 80033f4:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80033f6:	4645      	mov	r5, r8
 80033f8:	681c      	ldr	r4, [r3, #0]
 80033fa:	4225      	tst	r5, r4
 80033fc:	d0fb      	beq.n	80033f6 <R1_SwitchOffPWM+0x1d6>
 80033fe:	e740      	b.n	8003282 <R1_SwitchOffPWM+0x62>
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8003400:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8003402:	46a8      	mov	r8, r5
 8003404:	2548      	movs	r5, #72	; 0x48
 8003406:	5b45      	ldrh	r5, [r0, r5]
 8003408:	46a9      	mov	r9, r5
  WRITE_REG(GPIOx->BRR, PinMask);
 800340a:	4645      	mov	r5, r8
 800340c:	464f      	mov	r7, r9
 800340e:	62af      	str	r7, [r5, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8003410:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003412:	46a8      	mov	r8, r5
 8003414:	254a      	movs	r5, #74	; 0x4a
 8003416:	5b45      	ldrh	r5, [r0, r5]
 8003418:	46a9      	mov	r9, r5
 800341a:	4645      	mov	r5, r8
 800341c:	464f      	mov	r7, r9
 800341e:	62af      	str	r7, [r5, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8003420:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8003422:	46a8      	mov	r8, r5
 8003424:	254c      	movs	r5, #76	; 0x4c
 8003426:	5b45      	ldrh	r5, [r0, r5]
 8003428:	46a9      	mov	r9, r5
 800342a:	4645      	mov	r5, r8
 800342c:	464f      	mov	r7, r9
 800342e:	62af      	str	r7, [r5, #40]	; 0x28
}
 8003430:	e756      	b.n	80032e0 <R1_SwitchOffPWM+0xc0>
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	08006d04 	.word	0x08006d04
 8003438:	ffff7fff 	.word	0xffff7fff
 800343c:	fffffeff 	.word	0xfffffeff
 8003440:	ffffefff 	.word	0xffffefff
 8003444:	40012400 	.word	0x40012400
 8003448:	7fffffe8 	.word	0x7fffffe8
 800344c:	fffff23f 	.word	0xfffff23f

08003450 <R1_CurrentReadingCalibration>:
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	0004      	movs	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003454:	26cc      	movs	r6, #204	; 0xcc
  if (false == pHandle->_Super.offsetCalibStatus)
 8003456:	2781      	movs	r7, #129	; 0x81
{
 8003458:	46c6      	mov	lr, r8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800345a:	5980      	ldr	r0, [r0, r6]
  if (false == pHandle->_Super.offsetCalibStatus)
 800345c:	5de3      	ldrb	r3, [r4, r7]
{
 800345e:	b500      	push	{lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8003460:	6845      	ldr	r5, [r0, #4]
  if (false == pHandle->_Super.offsetCalibStatus)
 8003462:	2b00      	cmp	r3, #0
 8003464:	d037      	beq.n	80034d6 <R1_CurrentReadingCalibration+0x86>
  SET_BIT(TIMx->CCER, Channels);
 8003466:	6a2a      	ldr	r2, [r5, #32]
 8003468:	4b32      	ldr	r3, [pc, #200]	; (8003534 <R1_CurrentReadingCalibration+0xe4>)
  pHandle->iflag = 0;
 800346a:	2600      	movs	r6, #0
 800346c:	4313      	orrs	r3, r2
 800346e:	622b      	str	r3, [r5, #32]
 8003470:	23c5      	movs	r3, #197	; 0xc5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003472:	27ba      	movs	r7, #186	; 0xba
  pHandle->iflag = 0;
 8003474:	54e6      	strb	r6, [r4, r3]
  pHandle->FOCDurationFlag = false;
 8003476:	3303      	adds	r3, #3
 8003478:	54e6      	strb	r6, [r4, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 800347a:	3b56      	subs	r3, #86	; 0x56
 800347c:	5ae2      	ldrh	r2, [r4, r3]
 800347e:	3346      	adds	r3, #70	; 0x46
 8003480:	0855      	lsrs	r5, r2, #1
 8003482:	52e5      	strh	r5, [r4, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003484:	8c03      	ldrh	r3, [r0, #32]
 8003486:	8bc0      	ldrh	r0, [r0, #30]
 8003488:	0892      	lsrs	r2, r2, #2
 800348a:	181b      	adds	r3, r3, r0
 800348c:	b29b      	uxth	r3, r3
 800348e:	1ad0      	subs	r0, r2, r3
 8003490:	b280      	uxth	r0, r0
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003492:	18d3      	adds	r3, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8003494:	53e0      	strh	r0, [r4, r7]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8003496:	b29b      	uxth	r3, r3
 8003498:	0411      	lsls	r1, r2, #16
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800349a:	3702      	adds	r7, #2
 800349c:	53e3      	strh	r3, [r4, r7]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 800349e:	4311      	orrs	r1, r2
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80034a0:	3f68      	subs	r7, #104	; 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 80034a2:	6521      	str	r1, [r4, #80]	; 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80034a4:	53e2      	strh	r2, [r4, r7]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 80034a6:	2288      	movs	r2, #136	; 0x88
 80034a8:	50a1      	str	r1, [r4, r2]
 80034aa:	3204      	adds	r2, #4
 80034ac:	50a1      	str	r1, [r4, r2]
 80034ae:	3204      	adds	r2, #4
 80034b0:	50a1      	str	r1, [r4, r2]
 80034b2:	3204      	adds	r2, #4
 80034b4:	50a1      	str	r1, [r4, r2]
 80034b6:	3204      	adds	r2, #4
 80034b8:	50a1      	str	r1, [r4, r2]
 80034ba:	3204      	adds	r2, #4
 80034bc:	50a1      	str	r1, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80034be:	3212      	adds	r2, #18
 80034c0:	52a3      	strh	r3, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80034c2:	23b2      	movs	r3, #178	; 0xb2
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 80034c4:	3d01      	subs	r5, #1
 80034c6:	3202      	adds	r2, #2
 80034c8:	52a5      	strh	r5, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80034ca:	52e0      	strh	r0, [r4, r3]
  pHandle->_Super.BrakeActionLock = false;
 80034cc:	3b2d      	subs	r3, #45	; 0x2d
 80034ce:	54e6      	strb	r6, [r4, r3]
}
 80034d0:	bc80      	pop	{r7}
 80034d2:	46b8      	mov	r8, r7
 80034d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->PhaseOffset = 0u;
 80034d6:	22a0      	movs	r2, #160	; 0xa0
 80034d8:	50a3      	str	r3, [r4, r2]
 80034da:	4690      	mov	r8, r2
    pHandle->Index = 0u;
 80034dc:	3224      	adds	r2, #36	; 0x24
 80034de:	54a3      	strb	r3, [r4, r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 80034e0:	6a2b      	ldr	r3, [r5, #32]
 80034e2:	4a15      	ldr	r2, [pc, #84]	; (8003538 <R1_CurrentReadingCalibration+0xe8>)
    R1_SwitchOnPWM(&pHandle->_Super);
 80034e4:	0020      	movs	r0, r4
 80034e6:	4013      	ands	r3, r2
 80034e8:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_HFCurrentsCalibration;
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <R1_CurrentReadingCalibration+0xec>)
 80034ec:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_SetADCSampPointPolarization;
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <R1_CurrentReadingCalibration+0xf0>)
 80034f0:	6163      	str	r3, [r4, #20]
    R1_SwitchOnPWM(&pHandle->_Super);
 80034f2:	f7ff fd5f 	bl	8002fb4 <R1_SwitchOnPWM>
            pHandle->pParams_str->RepetitionCounter,
 80034f6:	2324      	movs	r3, #36	; 0x24
 80034f8:	59a2      	ldr	r2, [r4, r6]
    waitForPolarizationEnd(TIMx,
 80034fa:	0021      	movs	r1, r4
 80034fc:	5cd2      	ldrb	r2, [r2, r3]
 80034fe:	0023      	movs	r3, r4
 8003500:	0028      	movs	r0, r5
 8003502:	33c4      	adds	r3, #196	; 0xc4
 8003504:	3156      	adds	r1, #86	; 0x56
 8003506:	f002 ff63 	bl	80063d0 <waitForPolarizationEnd>
    R1_SwitchOffPWM(&pHandle->_Super);
 800350a:	0020      	movs	r0, r4
 800350c:	f7ff fe88 	bl	8003220 <R1_SwitchOffPWM>
    pHandle->PhaseOffset >>= 4u;
 8003510:	4643      	mov	r3, r8
 8003512:	4642      	mov	r2, r8
 8003514:	58e3      	ldr	r3, [r4, r3]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	50a3      	str	r3, [r4, r2]
    if (0U == pHandle->_Super.SWerror)
 800351a:	2356      	movs	r3, #86	; 0x56
 800351c:	5ae3      	ldrh	r3, [r4, r3]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <R1_CurrentReadingCalibration+0xd6>
      pHandle->_Super.offsetCalibStatus = true;
 8003522:	3301      	adds	r3, #1
 8003524:	55e3      	strb	r3, [r4, r7]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_GetPhaseCurrents;
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <R1_CurrentReadingCalibration+0xf4>)
 8003528:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_CalcDutyCycles;
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <R1_CurrentReadingCalibration+0xf8>)
 800352c:	6163      	str	r3, [r4, #20]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800352e:	23cc      	movs	r3, #204	; 0xcc
 8003530:	58e0      	ldr	r0, [r4, r3]
 8003532:	e798      	b.n	8003466 <R1_CurrentReadingCalibration+0x16>
 8003534:	00000555 	.word	0x00000555
 8003538:	fffffaaa 	.word	0xfffffaaa
 800353c:	08002865 	.word	0x08002865
 8003540:	080028a1 	.word	0x080028a1
 8003544:	08002601 	.word	0x08002601
 8003548:	0800290d 	.word	0x0800290d

0800354c <R1_TIM1_UP_IRQHandler>:
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_TIM1_UP_IRQHandler(PWMC_R1_Handle_t *pHandle)
{

  if (pHandle->TCDoneFlag ==true)
 800354c:	23c9      	movs	r3, #201	; 0xc9
 800354e:	5cc3      	ldrb	r3, [r0, r3]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <R1_TIM1_UP_IRQHandler+0x26>
  MODIFY_REG(ADCx->CR,
 8003554:	4a08      	ldr	r2, [pc, #32]	; (8003578 <R1_TIM1_UP_IRQHandler+0x2c>)
 8003556:	4909      	ldr	r1, [pc, #36]	; (800357c <R1_TIM1_UP_IRQHandler+0x30>)
 8003558:	6893      	ldr	r3, [r2, #8]
 800355a:	400b      	ands	r3, r1
 800355c:	2104      	movs	r1, #4
 800355e:	430b      	orrs	r3, r1
 8003560:	6093      	str	r3, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003562:	4a07      	ldr	r2, [pc, #28]	; (8003580 <R1_TIM1_UP_IRQHandler+0x34>)
 8003564:	316c      	adds	r1, #108	; 0x6c
 8003566:	6853      	ldr	r3, [r2, #4]
 8003568:	430b      	orrs	r3, r1
 800356a:	6053      	str	r3, [r2, #4]
  {
    LL_ADC_REG_StartConversion(ADC1);
    LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
    pHandle->FOCDurationFlag = true;
 800356c:	23c8      	movs	r3, #200	; 0xc8
 800356e:	2201      	movs	r2, #1
 8003570:	52c2      	strh	r2, [r0, r3]
  else
  {
    /* Nothing to do */
  }

  return (&(pHandle->_Super.Motor));
 8003572:	307a      	adds	r0, #122	; 0x7a
}
 8003574:	4770      	bx	lr
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	40012400 	.word	0x40012400
 800357c:	7fffffe8 	.word	0x7fffffe8
 8003580:	40012c00 	.word	0x40012c00

08003584 <R1_DMAx_TC_IRQHandler>:
  *         Required only for R1 with rep rate > 1
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_DMAx_TC_IRQHandler(PWMC_R1_Handle_t *pHandle)
{
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8003584:	23cc      	movs	r3, #204	; 0xcc
 8003586:	58c2      	ldr	r2, [r0, r3]
{
 8003588:	b530      	push	{r4, r5, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 800358a:	6894      	ldr	r4, [r2, #8]
  if (NULL == DMAx)
 800358c:	2c00      	cmp	r4, #0
 800358e:	d005      	beq.n	800359c <R1_DMAx_TC_IRQHandler+0x18>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003590:	2104      	movs	r1, #4
 8003592:	68d3      	ldr	r3, [r2, #12]
 8003594:	3b01      	subs	r3, #1
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4099      	lsls	r1, r3
 800359a:	6061      	str	r1, [r4, #4]

  LL_DMA_ClearFlag_HT(DMAx, pHandle->pParams_str->DMAChannelX);
  pHandle->TCCnt++;
 800359c:	21c6      	movs	r1, #198	; 0xc6
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 800359e:	2424      	movs	r4, #36	; 0x24
  pHandle->TCCnt++;
 80035a0:	5c43      	ldrb	r3, [r0, r1]
 80035a2:	3301      	adds	r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	5443      	strb	r3, [r0, r1]
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 80035a8:	5d12      	ldrb	r2, [r2, r4]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d110      	bne.n	80035d0 <R1_DMAx_TC_IRQHandler+0x4c>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 80035ae:	2398      	movs	r3, #152	; 0x98
 80035b0:	58c4      	ldr	r4, [r0, r3]
 80035b2:	3304      	adds	r3, #4
 80035b4:	58c2      	ldr	r2, [r0, r3]
 80035b6:	3b08      	subs	r3, #8
 80035b8:	58c5      	ldr	r5, [r0, r3]
 80035ba:	3b0c      	subs	r3, #12
 80035bc:	50c5      	str	r5, [r0, r3]
 80035be:	3304      	adds	r3, #4
 80035c0:	50c4      	str	r4, [r0, r3]
 80035c2:	3304      	adds	r3, #4
 80035c4:	50c2      	str	r2, [r0, r3]
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];

    pHandle->TCCnt = 0;
 80035c6:	2300      	movs	r3, #0
    pHandle->TCDoneFlag =true;
 80035c8:	2201      	movs	r2, #1
    pHandle->TCCnt = 0;
 80035ca:	5443      	strb	r3, [r0, r1]
    pHandle->TCDoneFlag =true;
 80035cc:	33c9      	adds	r3, #201	; 0xc9
 80035ce:	54c2      	strb	r2, [r0, r3]
  }
  else
  {
  }

  return (&(pHandle->_Super.Motor));
 80035d0:	307a      	adds	r0, #122	; 0x7a
}
 80035d2:	bd30      	pop	{r4, r5, pc}

080035d4 <RI_SetRegisterGlobal>:
#include "mcp.h"
#include "mcp_config.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 80035d4:	b530      	push	{r4, r5, lr}
 80035d6:	ac03      	add	r4, sp, #12
 80035d8:	2500      	movs	r5, #0
 80035da:	5f64      	ldrsh	r4, [r4, r5]
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 80035dc:	2918      	cmp	r1, #24
 80035de:	d031      	beq.n	8003644 <RI_SetRegisterGlobal+0x70>
 80035e0:	d815      	bhi.n	800360e <RI_SetRegisterGlobal+0x3a>
 80035e2:	2908      	cmp	r1, #8
 80035e4:	d039      	beq.n	800365a <RI_SetRegisterGlobal+0x86>
 80035e6:	2910      	cmp	r1, #16
 80035e8:	d133      	bne.n	8003652 <RI_SetRegisterGlobal+0x7e>
      break;
    }

    case TYPE_DATA_16BIT:
    {
      switch (regID)
 80035ea:	22e5      	movs	r2, #229	; 0xe5
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	4290      	cmp	r0, r2
 80035f0:	d03a      	beq.n	8003668 <RI_SetRegisterGlobal+0x94>
 80035f2:	d91e      	bls.n	8003632 <RI_SetRegisterGlobal+0x5e>
 80035f4:	22e9      	movs	r2, #233	; 0xe9
 80035f6:	0112      	lsls	r2, r2, #4
 80035f8:	4290      	cmp	r0, r2
 80035fa:	d035      	beq.n	8003668 <RI_SetRegisterGlobal+0x94>
 80035fc:	4a1e      	ldr	r2, [pc, #120]	; (8003678 <RI_SetRegisterGlobal+0xa4>)
 80035fe:	4694      	mov	ip, r2
 8003600:	4460      	add	r0, ip
 8003602:	1e42      	subs	r2, r0, #1
 8003604:	4190      	sbcs	r0, r2
 8003606:	3004      	adds	r0, #4
        {
          retVal = MCP_ERROR_UNKNOWN_REG;
          break;
        }
      }
      *size = 2;
 8003608:	2202      	movs	r2, #2
 800360a:	801a      	strh	r2, [r3, #0]
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
      break;
    }
  }
  return (retVal);
}
 800360c:	bd30      	pop	{r4, r5, pc}
  switch(typeID)
 800360e:	2928      	cmp	r1, #40	; 0x28
 8003610:	d11f      	bne.n	8003652 <RI_SetRegisterGlobal+0x7e>
      *size = rawSize + 2U;
 8003612:	8812      	ldrh	r2, [r2, #0]
      if (*size > (uint16_t)dataAvailable)
 8003614:	b2a4      	uxth	r4, r4
      *size = rawSize + 2U;
 8003616:	3202      	adds	r2, #2
 8003618:	b292      	uxth	r2, r2
 800361a:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 800361c:	42a2      	cmp	r2, r4
 800361e:	d825      	bhi.n	800366c <RI_SetRegisterGlobal+0x98>
        switch (regID)
 8003620:	28e8      	cmp	r0, #232	; 0xe8
 8003622:	d027      	beq.n	8003674 <RI_SetRegisterGlobal+0xa0>
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	4398      	bics	r0, r3
            retVal = MCP_ERROR_RO_REG;
 8003628:	3828      	subs	r0, #40	; 0x28
 800362a:	1e43      	subs	r3, r0, #1
 800362c:	4198      	sbcs	r0, r3
 800362e:	3004      	adds	r0, #4
 8003630:	e7ec      	b.n	800360c <RI_SetRegisterGlobal+0x38>
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	4390      	bics	r0, r2
 8003636:	4a11      	ldr	r2, [pc, #68]	; (800367c <RI_SetRegisterGlobal+0xa8>)
 8003638:	4694      	mov	ip, r2
 800363a:	4460      	add	r0, ip
 800363c:	1e42      	subs	r2, r0, #1
 800363e:	4190      	sbcs	r0, r2
 8003640:	3004      	adds	r0, #4
 8003642:	e7e1      	b.n	8003608 <RI_SetRegisterGlobal+0x34>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8003644:	3818      	subs	r0, #24
 8003646:	1e42      	subs	r2, r0, #1
 8003648:	4190      	sbcs	r0, r2
      *size = 4;
 800364a:	2204      	movs	r2, #4
          retVal = MCP_ERROR_UNKNOWN_REG;
 800364c:	3004      	adds	r0, #4
      *size = 4;
 800364e:	801a      	strh	r2, [r3, #0]
      break;
 8003650:	e7dc      	b.n	800360c <RI_SetRegisterGlobal+0x38>
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003652:	2200      	movs	r2, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003654:	2007      	movs	r0, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003656:	801a      	strh	r2, [r3, #0]
      break;
 8003658:	e7d8      	b.n	800360c <RI_SetRegisterGlobal+0x38>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800365a:	3848      	subs	r0, #72	; 0x48
 800365c:	1e42      	subs	r2, r0, #1
 800365e:	4190      	sbcs	r0, r2
      *size = 1;
 8003660:	2201      	movs	r2, #1
          retVal = MCP_ERROR_UNKNOWN_REG;
 8003662:	3004      	adds	r0, #4
      *size = 1;
 8003664:	801a      	strh	r2, [r3, #0]
      break;
 8003666:	e7d1      	b.n	800360c <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 8003668:	2000      	movs	r0, #0
 800366a:	e7cd      	b.n	8003608 <RI_SetRegisterGlobal+0x34>
        *size = 0;
 800366c:	2200      	movs	r2, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800366e:	200a      	movs	r0, #10
        *size = 0;
 8003670:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8003672:	e7cb      	b.n	800360c <RI_SetRegisterGlobal+0x38>
            retVal = MCP_ERROR_RO_REG;
 8003674:	2004      	movs	r0, #4
 8003676:	e7c9      	b.n	800360c <RI_SetRegisterGlobal+0x38>
 8003678:	ffffe4a8 	.word	0xffffe4a8
 800367c:	fffffa70 	.word	0xfffffa70

08003680 <RI_SetRegisterMotor1>:

uint8_t RI_SetRegisterMotor1(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	001d      	movs	r5, r3
 8003684:	ab04      	add	r3, sp, #16
 8003686:	2400      	movs	r4, #0
 8003688:	5f1b      	ldrsh	r3, [r3, r4]
  uint8_t retVal = MCP_CMD_OK;
  uint8_t motorID=0;
  MCI_Handle_t *pMCIN = &Mci[motorID];

  switch(typeID)
 800368a:	2918      	cmp	r1, #24
 800368c:	d100      	bne.n	8003690 <RI_SetRegisterMotor1+0x10>
 800368e:	e070      	b.n	8003772 <RI_SetRegisterMotor1+0xf2>
 8003690:	d821      	bhi.n	80036d6 <RI_SetRegisterMotor1+0x56>
 8003692:	2908      	cmp	r1, #8
 8003694:	d100      	bne.n	8003698 <RI_SetRegisterMotor1+0x18>
 8003696:	e089      	b.n	80037ac <RI_SetRegisterMotor1+0x12c>
 8003698:	2910      	cmp	r1, #16
 800369a:	d000      	beq.n	800369e <RI_SetRegisterMotor1+0x1e>
 800369c:	e082      	b.n	80037a4 <RI_SetRegisterMotor1+0x124>
      break;
    }

    case TYPE_DATA_16BIT:
    {
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 800369e:	23ba      	movs	r3, #186	; 0xba
 80036a0:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4298      	cmp	r0, r3
 80036a6:	d100      	bne.n	80036aa <RI_SetRegisterMotor1+0x2a>
 80036a8:	e0a0      	b.n	80037ec <RI_SetRegisterMotor1+0x16c>
 80036aa:	d92f      	bls.n	800370c <RI_SetRegisterMotor1+0x8c>
 80036ac:	23ad      	movs	r3, #173	; 0xad
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	4298      	cmp	r0, r3
 80036b2:	d100      	bne.n	80036b6 <RI_SetRegisterMotor1+0x36>
 80036b4:	e09a      	b.n	80037ec <RI_SetRegisterMotor1+0x16c>
 80036b6:	d936      	bls.n	8003726 <RI_SetRegisterMotor1+0xa6>
 80036b8:	23e9      	movs	r3, #233	; 0xe9
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4298      	cmp	r0, r3
 80036be:	d100      	bne.n	80036c2 <RI_SetRegisterMotor1+0x42>
 80036c0:	e096      	b.n	80037f0 <RI_SetRegisterMotor1+0x170>
 80036c2:	d962      	bls.n	800378a <RI_SetRegisterMotor1+0x10a>
 80036c4:	4b62      	ldr	r3, [pc, #392]	; (8003850 <RI_SetRegisterMotor1+0x1d0>)
 80036c6:	18c4      	adds	r4, r0, r3
 80036c8:	1e63      	subs	r3, r4, #1
 80036ca:	419c      	sbcs	r4, r3
 80036cc:	3404      	adds	r4, #4
        {
          retVal = MCP_ERROR_UNKNOWN_REG;
          break;
        }
      }
      *size = 2;
 80036ce:	2302      	movs	r3, #2
 80036d0:	802b      	strh	r3, [r5, #0]
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
      break;
    }
  }
  return (retVal);
}
 80036d2:	0020      	movs	r0, r4
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
  switch(typeID)
 80036d6:	2928      	cmp	r1, #40	; 0x28
 80036d8:	d164      	bne.n	80037a4 <RI_SetRegisterMotor1+0x124>
      *size = rawSize + 2U;
 80036da:	8811      	ldrh	r1, [r2, #0]
      if (*size > (uint16_t)dataAvailable)
 80036dc:	b29b      	uxth	r3, r3
      *size = rawSize + 2U;
 80036de:	3102      	adds	r1, #2
 80036e0:	b289      	uxth	r1, r1
 80036e2:	8029      	strh	r1, [r5, #0]
      if (*size > (uint16_t)dataAvailable)
 80036e4:	4299      	cmp	r1, r3
 80036e6:	d87b      	bhi.n	80037e0 <RI_SetRegisterMotor1+0x160>
        switch (regID)
 80036e8:	23d4      	movs	r3, #212	; 0xd4
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4298      	cmp	r0, r3
 80036ee:	d100      	bne.n	80036f2 <RI_SetRegisterMotor1+0x72>
 80036f0:	e092      	b.n	8003818 <RI_SetRegisterMotor1+0x198>
 80036f2:	d900      	bls.n	80036f6 <RI_SetRegisterMotor1+0x76>
 80036f4:	e09f      	b.n	8003836 <RI_SetRegisterMotor1+0x1b6>
            retVal = MCP_ERROR_RO_REG;
 80036f6:	2404      	movs	r4, #4
 80036f8:	28e8      	cmp	r0, #232	; 0xe8
 80036fa:	d0ea      	beq.n	80036d2 <RI_SetRegisterMotor1+0x52>
 80036fc:	3b29      	subs	r3, #41	; 0x29
 80036fe:	3bff      	subs	r3, #255	; 0xff
 8003700:	4398      	bics	r0, r3
 8003702:	3828      	subs	r0, #40	; 0x28
 8003704:	1e43      	subs	r3, r0, #1
 8003706:	4198      	sbcs	r0, r3
 8003708:	1d04      	adds	r4, r0, #4
 800370a:	e7e2      	b.n	80036d2 <RI_SetRegisterMotor1+0x52>
 800370c:	28d0      	cmp	r0, #208	; 0xd0
 800370e:	d071      	beq.n	80037f4 <RI_SetRegisterMotor1+0x174>
 8003710:	d91b      	bls.n	800374a <RI_SetRegisterMotor1+0xca>
 8003712:	2388      	movs	r3, #136	; 0x88
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4298      	cmp	r0, r3
 8003718:	d111      	bne.n	800373e <RI_SetRegisterMotor1+0xbe>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800371a:	484e      	ldr	r0, [pc, #312]	; (8003854 <RI_SetRegisterMotor1+0x1d4>)
 800371c:	b209      	sxth	r1, r1
 800371e:	f002 fdd7 	bl	80062d0 <PID_SetKD>
  uint8_t retVal = MCP_CMD_OK;
 8003722:	2400      	movs	r4, #0
          break;
 8003724:	e7d3      	b.n	80036ce <RI_SetRegisterMotor1+0x4e>
 8003726:	3bc0      	subs	r3, #192	; 0xc0
 8003728:	4298      	cmp	r0, r3
 800372a:	d05f      	beq.n	80037ec <RI_SetRegisterMotor1+0x16c>
 800372c:	d916      	bls.n	800375c <RI_SetRegisterMotor1+0xdc>
 800372e:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <RI_SetRegisterMotor1+0x1d8>)
 8003730:	18c4      	adds	r4, r0, r3
 8003732:	4b4a      	ldr	r3, [pc, #296]	; (800385c <RI_SetRegisterMotor1+0x1dc>)
 8003734:	401c      	ands	r4, r3
 8003736:	1e63      	subs	r3, r4, #1
 8003738:	419c      	sbcs	r4, r3
 800373a:	3404      	adds	r4, #4
 800373c:	e7c7      	b.n	80036ce <RI_SetRegisterMotor1+0x4e>
 800373e:	4b48      	ldr	r3, [pc, #288]	; (8003860 <RI_SetRegisterMotor1+0x1e0>)
 8003740:	18c4      	adds	r4, r0, r3
 8003742:	1e63      	subs	r3, r4, #1
 8003744:	419c      	sbcs	r4, r3
 8003746:	3404      	adds	r4, #4
 8003748:	e7c1      	b.n	80036ce <RI_SetRegisterMotor1+0x4e>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800374a:	2405      	movs	r4, #5
 800374c:	2890      	cmp	r0, #144	; 0x90
 800374e:	d1be      	bne.n	80036ce <RI_SetRegisterMotor1+0x4e>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003750:	4840      	ldr	r0, [pc, #256]	; (8003854 <RI_SetRegisterMotor1+0x1d4>)
 8003752:	b209      	sxth	r1, r1
 8003754:	f002 fdae 	bl	80062b4 <PID_SetKP>
  uint8_t retVal = MCP_CMD_OK;
 8003758:	2400      	movs	r4, #0
          break;
 800375a:	e7b8      	b.n	80036ce <RI_SetRegisterMotor1+0x4e>
 800375c:	23f2      	movs	r3, #242	; 0xf2
 800375e:	2404      	movs	r4, #4
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4298      	cmp	r0, r3
 8003764:	d0b3      	beq.n	80036ce <RI_SetRegisterMotor1+0x4e>
 8003766:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <RI_SetRegisterMotor1+0x1e4>)
 8003768:	18c4      	adds	r4, r0, r3
 800376a:	1e63      	subs	r3, r4, #1
 800376c:	419c      	sbcs	r4, r3
 800376e:	3404      	adds	r4, #4
 8003770:	e7ad      	b.n	80036ce <RI_SetRegisterMotor1+0x4e>
      switch (regID)
 8003772:	2858      	cmp	r0, #88	; 0x58
 8003774:	d044      	beq.n	8003800 <RI_SetRegisterMotor1+0x180>
 8003776:	2898      	cmp	r0, #152	; 0x98
 8003778:	d026      	beq.n	80037c8 <RI_SetRegisterMotor1+0x148>
          retVal = MCP_ERROR_RO_REG;
 800377a:	3818      	subs	r0, #24
 800377c:	0004      	movs	r4, r0
 800377e:	1e63      	subs	r3, r4, #1
 8003780:	419c      	sbcs	r4, r3
 8003782:	3404      	adds	r4, #4
      *size = 4;
 8003784:	2304      	movs	r3, #4
 8003786:	802b      	strh	r3, [r5, #0]
      break;
 8003788:	e7a3      	b.n	80036d2 <RI_SetRegisterMotor1+0x52>
 800378a:	23b1      	movs	r3, #177	; 0xb1
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	4298      	cmp	r0, r3
 8003790:	d02c      	beq.n	80037ec <RI_SetRegisterMotor1+0x16c>
  uint8_t retVal = MCP_CMD_OK;
 8003792:	4b35      	ldr	r3, [pc, #212]	; (8003868 <RI_SetRegisterMotor1+0x1e8>)
 8003794:	2405      	movs	r4, #5
 8003796:	469c      	mov	ip, r3
 8003798:	4460      	add	r0, ip
 800379a:	1e43      	subs	r3, r0, #1
 800379c:	4198      	sbcs	r0, r3
 800379e:	4240      	negs	r0, r0
 80037a0:	4004      	ands	r4, r0
 80037a2:	e794      	b.n	80036ce <RI_SetRegisterMotor1+0x4e>
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80037a4:	2300      	movs	r3, #0
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80037a6:	2407      	movs	r4, #7
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80037a8:	802b      	strh	r3, [r5, #0]
      break;
 80037aa:	e792      	b.n	80036d2 <RI_SetRegisterMotor1+0x52>
      switch (regID)
 80037ac:	2848      	cmp	r0, #72	; 0x48
 80037ae:	d01b      	beq.n	80037e8 <RI_SetRegisterMotor1+0x168>
 80037b0:	2405      	movs	r4, #5
 80037b2:	2888      	cmp	r0, #136	; 0x88
 80037b4:	d105      	bne.n	80037c2 <RI_SetRegisterMotor1+0x142>
          uint8_t regdata8 = *data;
 80037b6:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d03e      	beq.n	800383a <RI_SetRegisterMotor1+0x1ba>
  uint8_t retVal = MCP_CMD_OK;
 80037bc:	2400      	movs	r4, #0
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d020      	beq.n	8003804 <RI_SetRegisterMotor1+0x184>
      *size = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	802b      	strh	r3, [r5, #0]
      break;
 80037c6:	e784      	b.n	80036d2 <RI_SetRegisterMotor1+0x52>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80037c8:	2300      	movs	r3, #0
 80037ca:	5ed0      	ldrsh	r0, [r2, r3]
 80037cc:	2106      	movs	r1, #6
 80037ce:	f7fc fd25 	bl	800021c <__divsi3>
 80037d2:	2200      	movs	r2, #0
 80037d4:	b201      	sxth	r1, r0
 80037d6:	4825      	ldr	r0, [pc, #148]	; (800386c <RI_SetRegisterMotor1+0x1ec>)
 80037d8:	f7fd fdb6 	bl	8001348 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80037dc:	2400      	movs	r4, #0
          break;
 80037de:	e7d1      	b.n	8003784 <RI_SetRegisterMotor1+0x104>
        *size = 0;
 80037e0:	2300      	movs	r3, #0
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80037e2:	240a      	movs	r4, #10
        *size = 0;
 80037e4:	802b      	strh	r3, [r5, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80037e6:	e774      	b.n	80036d2 <RI_SetRegisterMotor1+0x52>
            retVal = MCP_ERROR_RO_REG;
 80037e8:	2404      	movs	r4, #4
 80037ea:	e7ea      	b.n	80037c2 <RI_SetRegisterMotor1+0x142>
 80037ec:	2404      	movs	r4, #4
 80037ee:	e76e      	b.n	80036ce <RI_SetRegisterMotor1+0x4e>
  uint8_t retVal = MCP_CMD_OK;
 80037f0:	2400      	movs	r4, #0
 80037f2:	e76c      	b.n	80036ce <RI_SetRegisterMotor1+0x4e>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80037f4:	4817      	ldr	r0, [pc, #92]	; (8003854 <RI_SetRegisterMotor1+0x1d4>)
 80037f6:	b209      	sxth	r1, r1
 80037f8:	f002 fd5e 	bl	80062b8 <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 80037fc:	2400      	movs	r4, #0
          break;
 80037fe:	e766      	b.n	80036ce <RI_SetRegisterMotor1+0x4e>
          retVal = MCP_ERROR_RO_REG;
 8003800:	2404      	movs	r4, #4
 8003802:	e7bf      	b.n	8003784 <RI_SetRegisterMotor1+0x104>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8003804:	4e19      	ldr	r6, [pc, #100]	; (800386c <RI_SetRegisterMotor1+0x1ec>)
 8003806:	0030      	movs	r0, r6
 8003808:	f7fd fe7c 	bl	8001504 <MCI_GetMecSpeedRefUnit>
 800380c:	2200      	movs	r2, #0
 800380e:	0001      	movs	r1, r0
 8003810:	0030      	movs	r0, r6
 8003812:	f7fd fd99 	bl	8001348 <MCI_ExecSpeedRamp>
 8003816:	e7d4      	b.n	80037c2 <RI_SetRegisterMotor1+0x142>
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8003818:	8890      	ldrh	r0, [r2, #4]
 800381a:	8853      	ldrh	r3, [r2, #2]
 800381c:	0400      	lsls	r0, r0, #16
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 800381e:	2106      	movs	r1, #6
            rpm = (((int32_t)(*(int16_t *)&rawData[2])) << 16) | *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 8003820:	4318      	orrs	r0, r3
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8003822:	88d4      	ldrh	r4, [r2, #6]
 8003824:	f7fc fcfa 	bl	800021c <__divsi3>
 8003828:	0022      	movs	r2, r4
 800382a:	b201      	sxth	r1, r0
 800382c:	480f      	ldr	r0, [pc, #60]	; (800386c <RI_SetRegisterMotor1+0x1ec>)
 800382e:	f7fd fd8b 	bl	8001348 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003832:	2400      	movs	r4, #0
            break;
 8003834:	e74d      	b.n	80036d2 <RI_SetRegisterMotor1+0x52>
 8003836:	2405      	movs	r4, #5
 8003838:	e74b      	b.n	80036d2 <RI_SetRegisterMotor1+0x52>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 800383a:	4c0c      	ldr	r4, [pc, #48]	; (800386c <RI_SetRegisterMotor1+0x1ec>)
 800383c:	0020      	movs	r0, r4
 800383e:	f7fd fe87 	bl	8001550 <MCI_GetTeref>
 8003842:	2200      	movs	r2, #0
 8003844:	0001      	movs	r1, r0
 8003846:	0020      	movs	r0, r4
 8003848:	f7fd fd88 	bl	800135c <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 800384c:	2400      	movs	r4, #0
 800384e:	e7b8      	b.n	80037c2 <RI_SetRegisterMotor1+0x142>
 8003850:	ffffe4a8 	.word	0xffffe4a8
 8003854:	20000114 	.word	0x20000114
 8003858:	fffff5b0 	.word	0xfffff5b0
 800385c:	0000ffbf 	.word	0x0000ffbf
 8003860:	fffffa70 	.word	0xfffffa70
 8003864:	fffff630 	.word	0xfffff630
 8003868:	fffff1b0 	.word	0xfffff1b0
 800386c:	20000650 	.word	0x20000650

08003870 <RI_GetRegisterGlobal>:

uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8003870:	b570      	push	{r4, r5, r6, lr}
    uint8_t retVal = MCP_CMD_OK;
    switch (typeID)
 8003872:	000c      	movs	r4, r1
 8003874:	3c08      	subs	r4, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8003876:	001e      	movs	r6, r3
    switch (typeID)
 8003878:	b2e4      	uxtb	r4, r4
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 800387a:	ab04      	add	r3, sp, #16
 800387c:	0005      	movs	r5, r0
 800387e:	2000      	movs	r0, #0
 8003880:	5e1b      	ldrsh	r3, [r3, r0]
    switch (typeID)
 8003882:	2c20      	cmp	r4, #32
 8003884:	d803      	bhi.n	800388e <RI_GetRegisterGlobal+0x1e>
 8003886:	4821      	ldr	r0, [pc, #132]	; (800390c <RI_GetRegisterGlobal+0x9c>)
 8003888:	00a4      	lsls	r4, r4, #2
 800388a:	5900      	ldr	r0, [r0, r4]
 800388c:	4687      	mov	pc, r0
 800388e:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
  return (retVal);
}
 8003890:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8003892:	2d28      	cmp	r5, #40	; 0x28
 8003894:	d025      	beq.n	80038e2 <RI_GetRegisterGlobal+0x72>
        *size = (*rawSize) + 2U;
 8003896:	8813      	ldrh	r3, [r2, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003898:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 800389a:	3302      	adds	r3, #2
 800389c:	b29b      	uxth	r3, r3
 800389e:	8033      	strh	r3, [r6, #0]
        break;
 80038a0:	e7f6      	b.n	8003890 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80038a2:	0008      	movs	r0, r1
        if (freeSpace > 0)
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	ddf3      	ble.n	8003890 <RI_GetRegisterGlobal+0x20>
          *size = 1;
 80038a8:	2301      	movs	r3, #1
              retVal = MCP_ERROR_UNKNOWN_REG;
 80038aa:	2005      	movs	r0, #5
          *size = 1;
 80038ac:	8033      	strh	r3, [r6, #0]
 80038ae:	e7ef      	b.n	8003890 <RI_GetRegisterGlobal+0x20>
        if (freeSpace >= 2)
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	dd28      	ble.n	8003906 <RI_GetRegisterGlobal+0x96>
          switch (regID)
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <RI_GetRegisterGlobal+0xa0>)
 80038b6:	4a17      	ldr	r2, [pc, #92]	; (8003914 <RI_GetRegisterGlobal+0xa4>)
 80038b8:	18eb      	adds	r3, r5, r3
 80038ba:	4013      	ands	r3, r2
    uint8_t retVal = MCP_CMD_OK;
 80038bc:	1e5a      	subs	r2, r3, #1
 80038be:	4193      	sbcs	r3, r2
 80038c0:	2005      	movs	r0, #5
 80038c2:	425b      	negs	r3, r3
 80038c4:	4018      	ands	r0, r3
          *size = 2;
 80038c6:	2302      	movs	r3, #2
 80038c8:	8033      	strh	r3, [r6, #0]
 80038ca:	e7e1      	b.n	8003890 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80038cc:	2008      	movs	r0, #8
        if (freeSpace >= 4)
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	ddde      	ble.n	8003890 <RI_GetRegisterGlobal+0x20>
          *size = 4;
 80038d2:	2304      	movs	r3, #4
              retVal = MCP_ERROR_UNKNOWN_REG;
 80038d4:	3803      	subs	r0, #3
          *size = 4;
 80038d6:	8033      	strh	r3, [r6, #0]
 80038d8:	e7da      	b.n	8003890 <RI_GetRegisterGlobal+0x20>
            *size= 0 ; /* */
 80038da:	2300      	movs	r3, #0
            retVal = MCP_ERROR_UNKNOWN_REG;
 80038dc:	2005      	movs	r0, #5
            *size= 0 ; /* */
 80038de:	8033      	strh	r3, [r6, #0]
            break;
 80038e0:	e7d6      	b.n	8003890 <RI_GetRegisterGlobal+0x20>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80038e2:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80038e4:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80038e6:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80038e8:	2b0b      	cmp	r3, #11
 80038ea:	d803      	bhi.n	80038f4 <RI_GetRegisterGlobal+0x84>
 80038ec:	230c      	movs	r3, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80038ee:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 80038f0:	8033      	strh	r3, [r6, #0]
        break;
 80038f2:	e7cd      	b.n	8003890 <RI_GetRegisterGlobal+0x20>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80038f4:	1c90      	adds	r0, r2, #2
 80038f6:	4908      	ldr	r1, [pc, #32]	; (8003918 <RI_GetRegisterGlobal+0xa8>)
 80038f8:	220a      	movs	r2, #10
 80038fa:	f002 ff91 	bl	8006820 <memcpy>
 80038fe:	230c      	movs	r3, #12
    uint8_t retVal = MCP_CMD_OK;
 8003900:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8003902:	8033      	strh	r3, [r6, #0]
        break;
 8003904:	e7c4      	b.n	8003890 <RI_GetRegisterGlobal+0x20>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003906:	2008      	movs	r0, #8
 8003908:	e7c2      	b.n	8003890 <RI_GetRegisterGlobal+0x20>
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	08006d0c 	.word	0x08006d0c
 8003910:	fffff1b0 	.word	0xfffff1b0
 8003914:	0000ffbf 	.word	0x0000ffbf
 8003918:	0800697c 	.word	0x0800697c

0800391c <RI_GetRegisterMotor1>:

  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 800391c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t retVal = MCP_CMD_OK;
    uint8_t motorID=0;
    MCI_Handle_t *pMCIN = &Mci[motorID];
    BusVoltageSensor_Handle_t* BusVoltageSensor= &BusVoltageSensor_M1._Super;
    switch (typeID)
 800391e:	000c      	movs	r4, r1
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003920:	b085      	sub	sp, #20
    switch (typeID)
 8003922:	3c08      	subs	r4, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003924:	001f      	movs	r7, r3
    switch (typeID)
 8003926:	b2e4      	uxtb	r4, r4
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003928:	ab0a      	add	r3, sp, #40	; 0x28
 800392a:	0016      	movs	r6, r2
 800392c:	0005      	movs	r5, r0
 800392e:	2200      	movs	r2, #0
 8003930:	5e9b      	ldrsh	r3, [r3, r2]
    switch (typeID)
 8003932:	2c20      	cmp	r4, #32
 8003934:	d803      	bhi.n	800393e <RI_GetRegisterMotor1+0x22>
 8003936:	4a98      	ldr	r2, [pc, #608]	; (8003b98 <RI_GetRegisterMotor1+0x27c>)
 8003938:	00a4      	lsls	r4, r4, #2
 800393a:	5912      	ldr	r2, [r2, r4]
 800393c:	4697      	mov	pc, r2
 800393e:	2007      	movs	r0, #7
        retVal = MCP_ERROR_BAD_DATA_TYPE;
        break;
      }
    }
    return (retVal);
  }
 8003940:	b005      	add	sp, #20
 8003942:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rawData++;
 8003944:	2294      	movs	r2, #148	; 0x94
 8003946:	1cb0      	adds	r0, r6, #2
        switch (regID)
 8003948:	0052      	lsls	r2, r2, #1
 800394a:	4295      	cmp	r5, r2
 800394c:	d100      	bne.n	8003950 <RI_GetRegisterMotor1+0x34>
 800394e:	e0ce      	b.n	8003aee <RI_GetRegisterMotor1+0x1d2>
 8003950:	d858      	bhi.n	8003a04 <RI_GetRegisterMotor1+0xe8>
 8003952:	2da8      	cmp	r5, #168	; 0xa8
 8003954:	d100      	bne.n	8003958 <RI_GetRegisterMotor1+0x3c>
 8003956:	e0d7      	b.n	8003b08 <RI_GetRegisterMotor1+0x1ec>
 8003958:	2de8      	cmp	r5, #232	; 0xe8
 800395a:	d000      	beq.n	800395e <RI_GetRegisterMotor1+0x42>
 800395c:	e0c1      	b.n	8003ae2 <RI_GetRegisterMotor1+0x1c6>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 800395e:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003960:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003962:	8032      	strh	r2, [r6, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003964:	2b0f      	cmp	r3, #15
 8003966:	d900      	bls.n	800396a <RI_GetRegisterMotor1+0x4e>
 8003968:	e0ab      	b.n	8003ac2 <RI_GetRegisterMotor1+0x1a6>
 800396a:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800396c:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 800396e:	803b      	strh	r3, [r7, #0]
        break;
 8003970:	e7e6      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003972:	0008      	movs	r0, r1
        if (freeSpace > 0)
 8003974:	2b00      	cmp	r3, #0
 8003976:	dde3      	ble.n	8003940 <RI_GetRegisterMotor1+0x24>
          switch (regID)
 8003978:	2d48      	cmp	r5, #72	; 0x48
 800397a:	d100      	bne.n	800397e <RI_GetRegisterMotor1+0x62>
 800397c:	e0a9      	b.n	8003ad2 <RI_GetRegisterMotor1+0x1b6>
 800397e:	2005      	movs	r0, #5
 8003980:	2d88      	cmp	r5, #136	; 0x88
 8003982:	d104      	bne.n	800398e <RI_GetRegisterMotor1+0x72>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003984:	4885      	ldr	r0, [pc, #532]	; (8003b9c <RI_GetRegisterMotor1+0x280>)
 8003986:	f7fd fda5 	bl	80014d4 <MCI_GetControlMode>
 800398a:	7030      	strb	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 800398c:	2000      	movs	r0, #0
          *size = 1;
 800398e:	2301      	movs	r3, #1
 8003990:	803b      	strh	r3, [r7, #0]
 8003992:	e7d5      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
        if (freeSpace >= 2)
 8003994:	2b01      	cmp	r3, #1
 8003996:	dc00      	bgt.n	800399a <RI_GetRegisterMotor1+0x7e>
 8003998:	e091      	b.n	8003abe <RI_GetRegisterMotor1+0x1a2>
          switch (regID)
 800399a:	23a1      	movs	r3, #161	; 0xa1
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	4298      	cmp	r0, r3
 80039a0:	d100      	bne.n	80039a4 <RI_GetRegisterMotor1+0x88>
 80039a2:	e0f0      	b.n	8003b86 <RI_GetRegisterMotor1+0x26a>
 80039a4:	d85f      	bhi.n	8003a66 <RI_GetRegisterMotor1+0x14a>
 80039a6:	23b2      	movs	r3, #178	; 0xb2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4298      	cmp	r0, r3
 80039ac:	d100      	bne.n	80039b0 <RI_GetRegisterMotor1+0x94>
 80039ae:	e0e4      	b.n	8003b7a <RI_GetRegisterMotor1+0x25e>
 80039b0:	d849      	bhi.n	8003a46 <RI_GetRegisterMotor1+0x12a>
 80039b2:	28d0      	cmp	r0, #208	; 0xd0
 80039b4:	d100      	bne.n	80039b8 <RI_GetRegisterMotor1+0x9c>
 80039b6:	e0c8      	b.n	8003b4a <RI_GetRegisterMotor1+0x22e>
 80039b8:	2388      	movs	r3, #136	; 0x88
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4298      	cmp	r0, r3
 80039be:	d139      	bne.n	8003a34 <RI_GetRegisterMotor1+0x118>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 80039c0:	4877      	ldr	r0, [pc, #476]	; (8003ba0 <RI_GetRegisterMotor1+0x284>)
 80039c2:	f002 fc87 	bl	80062d4 <PID_GetKD>
 80039c6:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 80039c8:	2000      	movs	r0, #0
          *size = 2;
 80039ca:	2302      	movs	r3, #2
 80039cc:	803b      	strh	r3, [r7, #0]
 80039ce:	e7b7      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
        if (freeSpace >= 4)
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	dd74      	ble.n	8003abe <RI_GetRegisterMotor1+0x1a2>
          switch (regID)
 80039d4:	2898      	cmp	r0, #152	; 0x98
 80039d6:	d100      	bne.n	80039da <RI_GetRegisterMotor1+0xbe>
 80039d8:	e0a7      	b.n	8003b2a <RI_GetRegisterMotor1+0x20e>
 80039da:	d866      	bhi.n	8003aaa <RI_GetRegisterMotor1+0x18e>
 80039dc:	2818      	cmp	r0, #24
 80039de:	d100      	bne.n	80039e2 <RI_GetRegisterMotor1+0xc6>
 80039e0:	e09d      	b.n	8003b1e <RI_GetRegisterMotor1+0x202>
 80039e2:	2858      	cmp	r0, #88	; 0x58
 80039e4:	d17b      	bne.n	8003ade <RI_GetRegisterMotor1+0x1c2>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80039e6:	486d      	ldr	r0, [pc, #436]	; (8003b9c <RI_GetRegisterMotor1+0x280>)
 80039e8:	f7fd fd84 	bl	80014f4 <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80039ec:	0043      	lsls	r3, r0, #1
 80039ee:	181b      	adds	r3, r3, r0
    uint8_t retVal = MCP_CMD_OK;
 80039f0:	2000      	movs	r0, #0
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	6033      	str	r3, [r6, #0]
          *size = 4;
 80039f6:	2304      	movs	r3, #4
 80039f8:	803b      	strh	r3, [r7, #0]
 80039fa:	e7a1      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
            *size= 0 ; /* */
 80039fc:	2300      	movs	r3, #0
            retVal = MCP_ERROR_UNKNOWN_REG;
 80039fe:	2005      	movs	r0, #5
            *size= 0 ; /* */
 8003a00:	803b      	strh	r3, [r7, #0]
            break;
 8003a02:	e79d      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
 8003a04:	23d4      	movs	r3, #212	; 0xd4
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	429d      	cmp	r5, r3
 8003a0a:	d16a      	bne.n	8003ae2 <RI_GetRegisterMotor1+0x1c6>
            int32_t rpm32 = ((int32_t)(MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003a0c:	4c63      	ldr	r4, [pc, #396]	; (8003b9c <RI_GetRegisterMotor1+0x280>)
 8003a0e:	0020      	movs	r0, r4
 8003a10:	f7fd fd64 	bl	80014dc <MCI_GetLastRampFinalSpeed>
 8003a14:	0043      	lsls	r3, r0, #1
 8003a16:	1818      	adds	r0, r3, r0
 8003a18:	0040      	lsls	r0, r0, #1
            *rpm16p = (uint16_t)rpm32;
 8003a1a:	8070      	strh	r0, [r6, #2]
            *(rpm16p+1) = (uint16_t)(rpm32>>16);
 8003a1c:	1400      	asrs	r0, r0, #16
 8003a1e:	80b0      	strh	r0, [r6, #4]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003a20:	0020      	movs	r0, r4
 8003a22:	f7fd fd5f 	bl	80014e4 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003a26:	2306      	movs	r3, #6
 8003a28:	8033      	strh	r3, [r6, #0]
            break;
 8003a2a:	3302      	adds	r3, #2
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003a2c:	80f0      	strh	r0, [r6, #6]
    uint8_t retVal = MCP_CMD_OK;
 8003a2e:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8003a30:	803b      	strh	r3, [r7, #0]
        break;
 8003a32:	e785      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
 8003a34:	2890      	cmp	r0, #144	; 0x90
 8003a36:	d000      	beq.n	8003a3a <RI_GetRegisterMotor1+0x11e>
 8003a38:	e0ac      	b.n	8003b94 <RI_GetRegisterMotor1+0x278>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8003a3a:	4859      	ldr	r0, [pc, #356]	; (8003ba0 <RI_GetRegisterMotor1+0x284>)
 8003a3c:	f002 fc3e 	bl	80062bc <PID_GetKP>
 8003a40:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003a42:	2000      	movs	r0, #0
              break;
 8003a44:	e7c1      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
 8003a46:	23ba      	movs	r3, #186	; 0xba
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4298      	cmp	r0, r3
 8003a4c:	d100      	bne.n	8003a50 <RI_GetRegisterMotor1+0x134>
 8003a4e:	e08e      	b.n	8003b6e <RI_GetRegisterMotor1+0x252>
 8003a50:	239d      	movs	r3, #157	; 0x9d
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	4298      	cmp	r0, r3
 8003a56:	d000      	beq.n	8003a5a <RI_GetRegisterMotor1+0x13e>
 8003a58:	e09c      	b.n	8003b94 <RI_GetRegisterMotor1+0x278>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003a5a:	4850      	ldr	r0, [pc, #320]	; (8003b9c <RI_GetRegisterMotor1+0x280>)
 8003a5c:	f7fd fd58 	bl	8001510 <MCI_GetVqd>
 8003a60:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003a62:	2000      	movs	r0, #0
              break;
 8003a64:	e7b1      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
 8003a66:	23ad      	movs	r3, #173	; 0xad
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	4298      	cmp	r0, r3
 8003a6c:	d073      	beq.n	8003b56 <RI_GetRegisterMotor1+0x23a>
 8003a6e:	d90f      	bls.n	8003a90 <RI_GetRegisterMotor1+0x174>
 8003a70:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <RI_GetRegisterMotor1+0x288>)
 8003a72:	4a4d      	ldr	r2, [pc, #308]	; (8003ba8 <RI_GetRegisterMotor1+0x28c>)
 8003a74:	18c3      	adds	r3, r0, r3
 8003a76:	4213      	tst	r3, r2
 8003a78:	d04f      	beq.n	8003b1a <RI_GetRegisterMotor1+0x1fe>
 8003a7a:	23b1      	movs	r3, #177	; 0xb1
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	4298      	cmp	r0, r3
 8003a80:	d000      	beq.n	8003a84 <RI_GetRegisterMotor1+0x168>
 8003a82:	e087      	b.n	8003b94 <RI_GetRegisterMotor1+0x278>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8003a84:	4849      	ldr	r0, [pc, #292]	; (8003bac <RI_GetRegisterMotor1+0x290>)
 8003a86:	f002 fd77 	bl	8006578 <SPD_GetS16Speed>
 8003a8a:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003a8c:	2000      	movs	r0, #0
              break;
 8003a8e:	e79c      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
 8003a90:	3b80      	subs	r3, #128	; 0x80
 8003a92:	4298      	cmp	r0, r3
 8003a94:	d065      	beq.n	8003b62 <RI_GetRegisterMotor1+0x246>
 8003a96:	3340      	adds	r3, #64	; 0x40
 8003a98:	4298      	cmp	r0, r3
 8003a9a:	d17b      	bne.n	8003b94 <RI_GetRegisterMotor1+0x278>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8003a9c:	483f      	ldr	r0, [pc, #252]	; (8003b9c <RI_GetRegisterMotor1+0x280>)
 8003a9e:	f7fd fd47 	bl	8001530 <MCI_GetValphabeta>
 8003aa2:	0c00      	lsrs	r0, r0, #16
 8003aa4:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003aa6:	2000      	movs	r0, #0
              break;
 8003aa8:	e78f      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
 8003aaa:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <RI_GetRegisterMotor1+0x294>)
 8003aac:	4298      	cmp	r0, r3
 8003aae:	d116      	bne.n	8003ade <RI_GetRegisterMotor1+0x1c2>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8003ab0:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <RI_GetRegisterMotor1+0x298>)
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	f002 fc74 	bl	80063a0 <PQD_GetAvrgElMotorPowerW>
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8003ab8:	6030      	str	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003aba:	2000      	movs	r0, #0
 8003abc:	e79b      	b.n	80039f6 <RI_GetRegisterMotor1+0xda>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003abe:	2008      	movs	r0, #8
 8003ac0:	e73e      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8003ac2:	4b3d      	ldr	r3, [pc, #244]	; (8003bb8 <RI_GetRegisterMotor1+0x29c>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003ac4:	6819      	ldr	r1, [r3, #0]
 8003ac6:	f002 feab 	bl	8006820 <memcpy>
 8003aca:	2310      	movs	r3, #16
    uint8_t retVal = MCP_CMD_OK;
 8003acc:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8003ace:	803b      	strh	r3, [r7, #0]
        break;
 8003ad0:	e736      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003ad2:	4832      	ldr	r0, [pc, #200]	; (8003b9c <RI_GetRegisterMotor1+0x280>)
 8003ad4:	f7fd fc90 	bl	80013f8 <MCI_GetSTMState>
 8003ad8:	7030      	strb	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003ada:	2000      	movs	r0, #0
              break;
 8003adc:	e757      	b.n	800398e <RI_GetRegisterMotor1+0x72>
 8003ade:	2005      	movs	r0, #5
 8003ae0:	e789      	b.n	80039f6 <RI_GetRegisterMotor1+0xda>
        *size = (*rawSize) + 2U;
 8003ae2:	8833      	ldrh	r3, [r6, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003ae4:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	803b      	strh	r3, [r7, #0]
        break;
 8003aec:	e728      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
            *rawSize = 12;
 8003aee:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003af0:	b29b      	uxth	r3, r3
            *rawSize = 12;
 8003af2:	8032      	strh	r2, [r6, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003af4:	2b0d      	cmp	r3, #13
 8003af6:	d91c      	bls.n	8003b32 <RI_GetRegisterMotor1+0x216>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003af8:	4930      	ldr	r1, [pc, #192]	; (8003bbc <RI_GetRegisterMotor1+0x2a0>)
 8003afa:	3204      	adds	r2, #4
 8003afc:	f002 fe90 	bl	8006820 <memcpy>
 8003b00:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 8003b02:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8003b04:	803b      	strh	r3, [r7, #0]
        break;
 8003b06:	e71b      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003b08:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003b0a:	b29b      	uxth	r3, r3
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003b0c:	8032      	strh	r2, [r6, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003b0e:	2b11      	cmp	r3, #17
 8003b10:	d813      	bhi.n	8003b3a <RI_GetRegisterMotor1+0x21e>
 8003b12:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003b14:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8003b16:	803b      	strh	r3, [r7, #0]
        break;
 8003b18:	e712      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
    uint8_t retVal = MCP_CMD_OK;
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	e755      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003b1e:	481f      	ldr	r0, [pc, #124]	; (8003b9c <RI_GetRegisterMotor1+0x280>)
 8003b20:	f7fd fcd2 	bl	80014c8 <MCI_GetFaultState>
 8003b24:	6030      	str	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003b26:	2000      	movs	r0, #0
              break;
 8003b28:	e765      	b.n	80039f6 <RI_GetRegisterMotor1+0xda>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003b2a:	481c      	ldr	r0, [pc, #112]	; (8003b9c <RI_GetRegisterMotor1+0x280>)
 8003b2c:	f7fd fcea 	bl	8001504 <MCI_GetMecSpeedRefUnit>
 8003b30:	e75c      	b.n	80039ec <RI_GetRegisterMotor1+0xd0>
 8003b32:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003b34:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8003b36:	803b      	strh	r3, [r7, #0]
        break;
 8003b38:	e702      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8003b3a:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <RI_GetRegisterMotor1+0x2a4>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8003b3c:	6819      	ldr	r1, [r3, #0]
 8003b3e:	f002 fe6f 	bl	8006820 <memcpy>
 8003b42:	2312      	movs	r3, #18
    uint8_t retVal = MCP_CMD_OK;
 8003b44:	2000      	movs	r0, #0
        *size = (*rawSize) + 2U;
 8003b46:	803b      	strh	r3, [r7, #0]
        break;
 8003b48:	e6fa      	b.n	8003940 <RI_GetRegisterMotor1+0x24>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8003b4a:	4815      	ldr	r0, [pc, #84]	; (8003ba0 <RI_GetRegisterMotor1+0x284>)
 8003b4c:	f002 fbba 	bl	80062c4 <PID_GetKI>
 8003b50:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003b52:	2000      	movs	r0, #0
              break;
 8003b54:	e739      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8003b56:	4815      	ldr	r0, [pc, #84]	; (8003bac <RI_GetRegisterMotor1+0x290>)
 8003b58:	f002 fcd2 	bl	8006500 <SPD_GetElAngle>
 8003b5c:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003b5e:	2000      	movs	r0, #0
              break;
 8003b60:	e733      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003b62:	480e      	ldr	r0, [pc, #56]	; (8003b9c <RI_GetRegisterMotor1+0x280>)
 8003b64:	f7fd fce4 	bl	8001530 <MCI_GetValphabeta>
 8003b68:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003b6a:	2000      	movs	r0, #0
              break;
 8003b6c:	e72d      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8003b6e:	4815      	ldr	r0, [pc, #84]	; (8003bc4 <RI_GetRegisterMotor1+0x2a8>)
 8003b70:	f002 fb88 	bl	8006284 <NTC_GetAvTemp_C>
 8003b74:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003b76:	2000      	movs	r0, #0
              break;
 8003b78:	e727      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8003b7a:	4813      	ldr	r0, [pc, #76]	; (8003bc8 <RI_GetRegisterMotor1+0x2ac>)
 8003b7c:	f002 f990 	bl	8005ea0 <VBS_GetAvBusVoltage_V>
 8003b80:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003b82:	2000      	movs	r0, #0
              break;
 8003b84:	e721      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003b86:	4805      	ldr	r0, [pc, #20]	; (8003b9c <RI_GetRegisterMotor1+0x280>)
 8003b88:	f7fd fcc2 	bl	8001510 <MCI_GetVqd>
 8003b8c:	0c00      	lsrs	r0, r0, #16
 8003b8e:	8030      	strh	r0, [r6, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003b90:	2000      	movs	r0, #0
              break;
 8003b92:	e71a      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
 8003b94:	2005      	movs	r0, #5
 8003b96:	e718      	b.n	80039ca <RI_GetRegisterMotor1+0xae>
 8003b98:	08006d90 	.word	0x08006d90
 8003b9c:	20000650 	.word	0x20000650
 8003ba0:	20000114 	.word	0x20000114
 8003ba4:	fffff1b0 	.word	0xfffff1b0
 8003ba8:	0000ffbf 	.word	0x0000ffbf
 8003bac:	20000020 	.word	0x20000020
 8003bb0:	00001b58 	.word	0x00001b58
 8003bb4:	200002d0 	.word	0x200002d0
 8003bb8:	200002e4 	.word	0x200002e4
 8003bbc:	200002e8 	.word	0x200002e8
 8003bc0:	200002e0 	.word	0x200002e0
 8003bc4:	2000026c 	.word	0x2000026c
 8003bc8:	20000000 	.word	0x20000000

08003bcc <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003bcc:	4955      	ldr	r1, [pc, #340]	; (8003d24 <RCM_RegisterRegConv+0x158>)
{
 8003bce:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003bd0:	680b      	ldr	r3, [r1, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d029      	beq.n	8003c2a <RCM_RegisterRegConv+0x5e>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003bd6:	791e      	ldrb	r6, [r3, #4]
 8003bd8:	7904      	ldrb	r4, [r0, #4]
 8003bda:	42a6      	cmp	r6, r4
 8003bdc:	d019      	beq.n	8003c12 <RCM_RegisterRegConv+0x46>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003bde:	684d      	ldr	r5, [r1, #4]
 8003be0:	2d00      	cmp	r5, #0
 8003be2:	d03b      	beq.n	8003c5c <RCM_RegisterRegConv+0x90>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003be4:	792a      	ldrb	r2, [r5, #4]
  uint8_t handle = 255U;
 8003be6:	23ff      	movs	r3, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003be8:	42a2      	cmp	r2, r4
 8003bea:	d025      	beq.n	8003c38 <RCM_RegisterRegConv+0x6c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003bec:	688d      	ldr	r5, [r1, #8]
 8003bee:	2d00      	cmp	r5, #0
 8003bf0:	d05d      	beq.n	8003cae <RCM_RegisterRegConv+0xe2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003bf2:	792a      	ldrb	r2, [r5, #4]
 8003bf4:	42a2      	cmp	r2, r4
 8003bf6:	d029      	beq.n	8003c4c <RCM_RegisterRegConv+0x80>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003bf8:	68cd      	ldr	r5, [r1, #12]
 8003bfa:	2d00      	cmp	r5, #0
 8003bfc:	d064      	beq.n	8003cc8 <RCM_RegisterRegConv+0xfc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003bfe:	792a      	ldrb	r2, [r5, #4]
 8003c00:	42a2      	cmp	r2, r4
 8003c02:	d068      	beq.n	8003cd6 <RCM_RegisterRegConv+0x10a>
    while (i < RCM_MAX_CONV)
 8003c04:	021c      	lsls	r4, r3, #8
 8003c06:	431c      	orrs	r4, r3
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d95b      	bls.n	8003cc4 <RCM_RegisterRegConv+0xf8>
 8003c0c:	23ff      	movs	r3, #255	; 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8003c0e:	7303      	strb	r3, [r0, #12]
}
 8003c10:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6802      	ldr	r2, [r0, #0]
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d026      	beq.n	8003c68 <RCM_RegisterRegConv+0x9c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c1a:	684d      	ldr	r5, [r1, #4]
 8003c1c:	2d00      	cmp	r5, #0
 8003c1e:	d1e1      	bne.n	8003be4 <RCM_RegisterRegConv+0x18>
 8003c20:	688d      	ldr	r5, [r1, #8]
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	d071      	beq.n	8003d0a <RCM_RegisterRegConv+0x13e>
      i++;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e7e3      	b.n	8003bf2 <RCM_RegisterRegConv+0x26>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c2a:	684d      	ldr	r5, [r1, #4]
 8003c2c:	2d00      	cmp	r5, #0
 8003c2e:	d065      	beq.n	8003cfc <RCM_RegisterRegConv+0x130>
 8003c30:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c32:	792a      	ldrb	r2, [r5, #4]
 8003c34:	42a2      	cmp	r2, r4
 8003c36:	d1d9      	bne.n	8003bec <RCM_RegisterRegConv+0x20>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c38:	682d      	ldr	r5, [r5, #0]
 8003c3a:	6802      	ldr	r2, [r0, #0]
 8003c3c:	4295      	cmp	r5, r2
 8003c3e:	d1d5      	bne.n	8003bec <RCM_RegisterRegConv+0x20>
 8003c40:	2302      	movs	r3, #2
 8003c42:	33ff      	adds	r3, #255	; 0xff
 8003c44:	1c1c      	adds	r4, r3, #0
      i++;
 8003c46:	3b01      	subs	r3, #1
 8003c48:	3bff      	subs	r3, #255	; 0xff
 8003c4a:	e00f      	b.n	8003c6c <RCM_RegisterRegConv+0xa0>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c4c:	682d      	ldr	r5, [r5, #0]
 8003c4e:	6802      	ldr	r2, [r0, #0]
 8003c50:	4295      	cmp	r5, r2
 8003c52:	d1d1      	bne.n	8003bf8 <RCM_RegisterRegConv+0x2c>
 8003c54:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <RCM_RegisterRegConv+0x15c>)
 8003c56:	1c1c      	adds	r4, r3, #0
      i++;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e007      	b.n	8003c6c <RCM_RegisterRegConv+0xa0>
 8003c5c:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c5e:	688d      	ldr	r5, [r1, #8]
 8003c60:	2d00      	cmp	r5, #0
 8003c62:	d042      	beq.n	8003cea <RCM_RegisterRegConv+0x11e>
 8003c64:	7904      	ldrb	r4, [r0, #4]
 8003c66:	e7c4      	b.n	8003bf2 <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003c68:	2400      	movs	r4, #0
    uint8_t i = 0;
 8003c6a:	2300      	movs	r3, #0
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003c6c:	2600      	movs	r6, #0
      RCM_handle_array [handle] = regConv;
 8003c6e:	009d      	lsls	r5, r3, #2
 8003c70:	5148      	str	r0, [r1, r5]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003c72:	492e      	ldr	r1, [pc, #184]	; (8003d2c <RCM_RegisterRegConv+0x160>)
 8003c74:	00dd      	lsls	r5, r3, #3
 8003c76:	506e      	str	r6, [r5, r1]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003c78:	6891      	ldr	r1, [r2, #8]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003c7a:	07c9      	lsls	r1, r1, #31
 8003c7c:	d40e      	bmi.n	8003c9c <RCM_RegisterRegConv+0xd0>
  MODIFY_REG(ADCx->CR,
 8003c7e:	6895      	ldr	r5, [r2, #8]
 8003c80:	492b      	ldr	r1, [pc, #172]	; (8003d30 <RCM_RegisterRegConv+0x164>)
 8003c82:	400d      	ands	r5, r1
 8003c84:	3118      	adds	r1, #24
 8003c86:	4329      	orrs	r1, r5
 8003c88:	6091      	str	r1, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8003c8a:	6891      	ldr	r1, [r2, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8003c8c:	2900      	cmp	r1, #0
 8003c8e:	dbfc      	blt.n	8003c8a <RCM_RegisterRegConv+0xbe>
  MODIFY_REG(ADCx->CR,
 8003c90:	6891      	ldr	r1, [r2, #8]
 8003c92:	4d27      	ldr	r5, [pc, #156]	; (8003d30 <RCM_RegisterRegConv+0x164>)
 8003c94:	4029      	ands	r1, r5
 8003c96:	2501      	movs	r5, #1
 8003c98:	4329      	orrs	r1, r5
 8003c9a:	6091      	str	r1, [r2, #8]
      RCM_NoInj_array[handle].enable = false;
 8003c9c:	2500      	movs	r5, #0
 8003c9e:	0059      	lsls	r1, r3, #1
 8003ca0:	4a24      	ldr	r2, [pc, #144]	; (8003d34 <RCM_RegisterRegConv+0x168>)
 8003ca2:	18c9      	adds	r1, r1, r3
 8003ca4:	0049      	lsls	r1, r1, #1
 8003ca6:	548d      	strb	r5, [r1, r2]
      RCM_NoInj_array[handle].prev = handle;
 8003ca8:	1852      	adds	r2, r2, r1
 8003caa:	8094      	strh	r4, [r2, #4]
 8003cac:	e7af      	b.n	8003c0e <RCM_RegisterRegConv+0x42>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d91a      	bls.n	8003ce8 <RCM_RegisterRegConv+0x11c>
 8003cb2:	68cb      	ldr	r3, [r1, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <RCM_RegisterRegConv+0xf2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003cb8:	791a      	ldrb	r2, [r3, #4]
 8003cba:	4294      	cmp	r4, r2
 8003cbc:	d020      	beq.n	8003d00 <RCM_RegisterRegConv+0x134>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <RCM_RegisterRegConv+0x15c>)
 8003cc0:	1c1c      	adds	r4, r3, #0
      i++;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	6802      	ldr	r2, [r0, #0]
 8003cc6:	e7d1      	b.n	8003c6c <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d913      	bls.n	8003cf4 <RCM_RegisterRegConv+0x128>
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <RCM_RegisterRegConv+0x16c>)
 8003cce:	6802      	ldr	r2, [r0, #0]
 8003cd0:	1c1c      	adds	r4, r3, #0
      i++;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e7ca      	b.n	8003c6c <RCM_RegisterRegConv+0xa0>
 8003cd6:	6802      	ldr	r2, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003cd8:	682c      	ldr	r4, [r5, #0]
 8003cda:	4294      	cmp	r4, r2
 8003cdc:	d000      	beq.n	8003ce0 <RCM_RegisterRegConv+0x114>
 8003cde:	e791      	b.n	8003c04 <RCM_RegisterRegConv+0x38>
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <RCM_RegisterRegConv+0x16c>)
 8003ce2:	1c1c      	adds	r4, r3, #0
      i++;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e7c1      	b.n	8003c6c <RCM_RegisterRegConv+0xa0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003ce8:	2300      	movs	r3, #0
 8003cea:	68cd      	ldr	r5, [r1, #12]
 8003cec:	2d00      	cmp	r5, #0
 8003cee:	d001      	beq.n	8003cf4 <RCM_RegisterRegConv+0x128>
 8003cf0:	7904      	ldrb	r4, [r0, #4]
 8003cf2:	e784      	b.n	8003bfe <RCM_RegisterRegConv+0x32>
 8003cf4:	6802      	ldr	r2, [r0, #0]
    while (i < RCM_MAX_CONV)
 8003cf6:	021c      	lsls	r4, r3, #8
 8003cf8:	431c      	orrs	r4, r3
    if (handle < RCM_MAX_CONV)
 8003cfa:	e7b7      	b.n	8003c6c <RCM_RegisterRegConv+0xa0>
    uint8_t i = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e7ae      	b.n	8003c5e <RCM_RegisterRegConv+0x92>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6802      	ldr	r2, [r0, #0]
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d0eb      	beq.n	8003ce0 <RCM_RegisterRegConv+0x114>
 8003d08:	e7a4      	b.n	8003c54 <RCM_RegisterRegConv+0x88>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003d0a:	68cd      	ldr	r5, [r1, #12]
 8003d0c:	2d00      	cmp	r5, #0
 8003d0e:	d006      	beq.n	8003d1e <RCM_RegisterRegConv+0x152>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003d10:	792c      	ldrb	r4, [r5, #4]
      i++;
 8003d12:	2301      	movs	r3, #1
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003d14:	42b4      	cmp	r4, r6
 8003d16:	d0df      	beq.n	8003cd8 <RCM_RegisterRegConv+0x10c>
 8003d18:	2402      	movs	r4, #2
 8003d1a:	34ff      	adds	r4, #255	; 0xff
 8003d1c:	e7a6      	b.n	8003c6c <RCM_RegisterRegConv+0xa0>
      i++;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e7e9      	b.n	8003cf6 <RCM_RegisterRegConv+0x12a>
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	20000820 	.word	0x20000820
 8003d28:	00000202 	.word	0x00000202
 8003d2c:	200007dc 	.word	0x200007dc
 8003d30:	7fffffe8 	.word	0x7fffffe8
 8003d34:	200007fc 	.word	0x200007fc
 8003d38:	00000303 	.word	0x00000303

08003d3c <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8003d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8003d3e:	7b02      	ldrb	r2, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003d40:	4b5a      	ldr	r3, [pc, #360]	; (8003eac <RCM_ExecRegularConv+0x170>)
 8003d42:	0050      	lsls	r0, r2, #1
 8003d44:	1881      	adds	r1, r0, r2
 8003d46:	0049      	lsls	r1, r1, #1
 8003d48:	5c59      	ldrb	r1, [r3, r1]
 8003d4a:	2900      	cmp	r1, #0
 8003d4c:	d142      	bne.n	8003dd4 <RCM_ExecRegularConv+0x98>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8003d4e:	7819      	ldrb	r1, [r3, #0]
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d11c      	bne.n	8003d8e <RCM_ExecRegularConv+0x52>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003d54:	2504      	movs	r5, #4
      if (true == RCM_NoInj_array [i].enable)
 8003d56:	7999      	ldrb	r1, [r3, #6]
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	d100      	bne.n	8003d5e <RCM_ExecRegularConv+0x22>
 8003d5c:	e07a      	b.n	8003e54 <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array[i].next > handle)
 8003d5e:	7add      	ldrb	r5, [r3, #11]
 8003d60:	42aa      	cmp	r2, r5
 8003d62:	d200      	bcs.n	8003d66 <RCM_ExecRegularConv+0x2a>
 8003d64:	e094      	b.n	8003e90 <RCM_ExecRegularConv+0x154>
      if (true == RCM_NoInj_array [i].enable)
 8003d66:	7b19      	ldrb	r1, [r3, #12]
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	d100      	bne.n	8003d6e <RCM_ExecRegularConv+0x32>
 8003d6c:	e093      	b.n	8003e96 <RCM_ExecRegularConv+0x15a>
        if (RCM_NoInj_array[i].next > handle)
 8003d6e:	7c5d      	ldrb	r5, [r3, #17]
 8003d70:	42aa      	cmp	r2, r5
 8003d72:	d200      	bcs.n	8003d76 <RCM_ExecRegularConv+0x3a>
 8003d74:	e094      	b.n	8003ea0 <RCM_ExecRegularConv+0x164>
      if (true == RCM_NoInj_array [i].enable)
 8003d76:	7c99      	ldrb	r1, [r3, #18]
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 8003d78:	2502      	movs	r5, #2
      if (true == RCM_NoInj_array [i].enable)
 8003d7a:	2900      	cmp	r1, #0
 8003d7c:	d100      	bne.n	8003d80 <RCM_ExecRegularConv+0x44>
 8003d7e:	e073      	b.n	8003e68 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 8003d80:	7ddd      	ldrb	r5, [r3, #23]
 8003d82:	4295      	cmp	r5, r2
 8003d84:	d800      	bhi.n	8003d88 <RCM_ExecRegularConv+0x4c>
 8003d86:	e08e      	b.n	8003ea6 <RCM_ExecRegularConv+0x16a>
      i++;
 8003d88:	2603      	movs	r6, #3
      if (true == RCM_NoInj_array [i].enable)
 8003d8a:	2403      	movs	r4, #3
 8003d8c:	e005      	b.n	8003d9a <RCM_ExecRegularConv+0x5e>
        if (RCM_NoInj_array[i].next > handle)
 8003d8e:	795d      	ldrb	r5, [r3, #5]
 8003d90:	4295      	cmp	r5, r2
 8003d92:	d800      	bhi.n	8003d96 <RCM_ExecRegularConv+0x5a>
 8003d94:	e076      	b.n	8003e84 <RCM_ExecRegularConv+0x148>
  uint8_t i=0;
 8003d96:	2600      	movs	r6, #0
      if (true == RCM_NoInj_array [i].enable)
 8003d98:	2400      	movs	r4, #0
          RCM_NoInj_array[handle].next = formerNext;
 8003d9a:	1881      	adds	r1, r0, r2
 8003d9c:	0049      	lsls	r1, r1, #1
 8003d9e:	1859      	adds	r1, r3, r1
 8003da0:	714d      	strb	r5, [r1, #5]
          RCM_NoInj_array[handle].prev = i;
 8003da2:	710e      	strb	r6, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8003da4:	0061      	lsls	r1, r4, #1
 8003da6:	1909      	adds	r1, r1, r4
 8003da8:	0049      	lsls	r1, r1, #1
 8003daa:	1859      	adds	r1, r3, r1
 8003dac:	714a      	strb	r2, [r1, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8003dae:	0069      	lsls	r1, r5, #1
 8003db0:	1949      	adds	r1, r1, r5
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
         RCM_NoInj_array[handle].next = formerNext;
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
         RCM_NoInj_array[formerNext].prev = handle;
 8003db2:	0049      	lsls	r1, r1, #1
 8003db4:	1859      	adds	r1, r3, r1
 8003db6:	710a      	strb	r2, [r1, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003db8:	493d      	ldr	r1, [pc, #244]	; (8003eb0 <RCM_ExecRegularConv+0x174>)
 8003dba:	780d      	ldrb	r5, [r1, #0]
    RCM_NoInj_array[handle].enable = true;
 8003dbc:	2601      	movs	r6, #1
 8003dbe:	1884      	adds	r4, r0, r2
 8003dc0:	0064      	lsls	r4, r4, #1
 8003dc2:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003dc4:	006c      	lsls	r4, r5, #1
 8003dc6:	1964      	adds	r4, r4, r5
 8003dc8:	0064      	lsls	r4, r4, #1
 8003dca:	191c      	adds	r4, r3, r4
 8003dcc:	7864      	ldrb	r4, [r4, #1]
 8003dce:	2c01      	cmp	r4, #1
 8003dd0:	d000      	beq.n	8003dd4 <RCM_ExecRegularConv+0x98>
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8003dd2:	700a      	strb	r2, [r1, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8003dd4:	24ca      	movs	r4, #202	; 0xca
 8003dd6:	4937      	ldr	r1, [pc, #220]	; (8003eb4 <RCM_ExecRegularConv+0x178>)
 8003dd8:	5d09      	ldrb	r1, [r1, r4]
 8003dda:	2900      	cmp	r1, #0
 8003ddc:	d135      	bne.n	8003e4a <RCM_ExecRegularConv+0x10e>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003dde:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8003de0:	4e35      	ldr	r6, [pc, #212]	; (8003eb8 <RCM_ExecRegularConv+0x17c>)
 8003de2:	0091      	lsls	r1, r2, #2
 8003de4:	5875      	ldr	r5, [r6, r1]
 8003de6:	6829      	ldr	r1, [r5, #0]
 8003de8:	68cc      	ldr	r4, [r1, #12]
 8003dea:	43bc      	bics	r4, r7
 8003dec:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003dee:	68cc      	ldr	r4, [r1, #12]
 8003df0:	4f32      	ldr	r7, [pc, #200]	; (8003ebc <RCM_ExecRegularConv+0x180>)
 8003df2:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003df4:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003df6:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003df8:	694c      	ldr	r4, [r1, #20]
 8003dfa:	43bc      	bics	r4, r7
 8003dfc:	68af      	ldr	r7, [r5, #8]
 8003dfe:	433c      	orrs	r4, r7
 8003e00:	614c      	str	r4, [r1, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e02:	2480      	movs	r4, #128	; 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003e04:	792d      	ldrb	r5, [r5, #4]
 8003e06:	01a4      	lsls	r4, r4, #6
 8003e08:	40ac      	lsls	r4, r5
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003e0a:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e0c:	0b64      	lsrs	r4, r4, #13
 8003e0e:	628c      	str	r4, [r1, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003e10:	600d      	str	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 8003e12:	688c      	ldr	r4, [r1, #8]
 8003e14:	4f2a      	ldr	r7, [pc, #168]	; (8003ec0 <RCM_ExecRegularConv+0x184>)
 8003e16:	403c      	ands	r4, r7
 8003e18:	432c      	orrs	r4, r5
 8003e1a:	608c      	str	r4, [r1, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003e1c:	680c      	ldr	r4, [r1, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 8003e1e:	4225      	tst	r5, r4
 8003e20:	d0fc      	beq.n	8003e1c <RCM_ExecRegularConv+0xe0>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003e22:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003e24:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8003e26:	1881      	adds	r1, r0, r2
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8003e28:	4d21      	ldr	r5, [pc, #132]	; (8003eb0 <RCM_ExecRegularConv+0x174>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8003e2a:	0049      	lsls	r1, r1, #1
 8003e2c:	1859      	adds	r1, r3, r1
 8003e2e:	804c      	strh	r4, [r1, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8003e30:	782c      	ldrb	r4, [r5, #0]
 8003e32:	00a4      	lsls	r4, r4, #2
 8003e34:	5934      	ldr	r4, [r6, r4]
 8003e36:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003e38:	68f4      	ldr	r4, [r6, #12]
 8003e3a:	43bc      	bics	r4, r7
 8003e3c:	3f02      	subs	r7, #2
 8003e3e:	433c      	orrs	r4, r7
 8003e40:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003e42:	794c      	ldrb	r4, [r1, #5]
 8003e44:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 8003e46:	2402      	movs	r4, #2
 8003e48:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8003e4a:	1880      	adds	r0, r0, r2
 8003e4c:	0040      	lsls	r0, r0, #1
 8003e4e:	181b      	adds	r3, r3, r0
  return (retVal);
 8003e50:	8858      	ldrh	r0, [r3, #2]
}
 8003e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (true == RCM_NoInj_array [i].enable)
 8003e54:	7b19      	ldrb	r1, [r3, #12]
 8003e56:	2900      	cmp	r1, #0
 8003e58:	d000      	beq.n	8003e5c <RCM_ExecRegularConv+0x120>
 8003e5a:	e788      	b.n	8003d6e <RCM_ExecRegularConv+0x32>
 8003e5c:	7c99      	ldrb	r1, [r3, #18]
 8003e5e:	2900      	cmp	r1, #0
 8003e60:	d000      	beq.n	8003e64 <RCM_ExecRegularConv+0x128>
 8003e62:	e78d      	b.n	8003d80 <RCM_ExecRegularConv+0x44>
       if (LastEnable != RCM_MAX_CONV )
 8003e64:	2d04      	cmp	r5, #4
 8003e66:	d00f      	beq.n	8003e88 <RCM_ExecRegularConv+0x14c>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003e68:	0069      	lsls	r1, r5, #1
 8003e6a:	1949      	adds	r1, r1, r5
 8003e6c:	0049      	lsls	r1, r1, #1
 8003e6e:	1859      	adds	r1, r3, r1
         RCM_NoInj_array[handle].next = formerNext;
 8003e70:	1884      	adds	r4, r0, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003e72:	794e      	ldrb	r6, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8003e74:	0064      	lsls	r4, r4, #1
 8003e76:	191c      	adds	r4, r3, r4
 8003e78:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array[LastEnable].next = handle;
 8003e7a:	714a      	strb	r2, [r1, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003e7c:	0071      	lsls	r1, r6, #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003e7e:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array[formerNext].prev = handle;
 8003e80:	1989      	adds	r1, r1, r6
 8003e82:	e796      	b.n	8003db2 <RCM_ExecRegularConv+0x76>
  uint8_t i=0;
 8003e84:	2500      	movs	r5, #0
 8003e86:	e766      	b.n	8003d56 <RCM_ExecRegularConv+0x1a>
         RCM_currentHandle = handle;
 8003e88:	4909      	ldr	r1, [pc, #36]	; (8003eb0 <RCM_ExecRegularConv+0x174>)
 8003e8a:	0015      	movs	r5, r2
 8003e8c:	700a      	strb	r2, [r1, #0]
    while (i < RCM_MAX_CONV)
 8003e8e:	e795      	b.n	8003dbc <RCM_ExecRegularConv+0x80>
      i++;
 8003e90:	2601      	movs	r6, #1
      if (true == RCM_NoInj_array [i].enable)
 8003e92:	2401      	movs	r4, #1
 8003e94:	e781      	b.n	8003d9a <RCM_ExecRegularConv+0x5e>
 8003e96:	7c99      	ldrb	r1, [r3, #18]
      i++;
 8003e98:	2501      	movs	r5, #1
      if (true == RCM_NoInj_array [i].enable)
 8003e9a:	2900      	cmp	r1, #0
 8003e9c:	d0e4      	beq.n	8003e68 <RCM_ExecRegularConv+0x12c>
 8003e9e:	e76f      	b.n	8003d80 <RCM_ExecRegularConv+0x44>
      i++;
 8003ea0:	2602      	movs	r6, #2
      if (true == RCM_NoInj_array [i].enable)
 8003ea2:	2402      	movs	r4, #2
 8003ea4:	e779      	b.n	8003d9a <RCM_ExecRegularConv+0x5e>
      i++;
 8003ea6:	2503      	movs	r5, #3
 8003ea8:	e7de      	b.n	8003e68 <RCM_ExecRegularConv+0x12c>
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	200007fc 	.word	0x200007fc
 8003eb0:	2000081c 	.word	0x2000081c
 8003eb4:	20000150 	.word	0x20000150
 8003eb8:	20000820 	.word	0x20000820
 8003ebc:	fffff23f 	.word	0xfffff23f
 8003ec0:	7fffffe8 	.word	0x7fffffe8

08003ec4 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <RCM_ExecUserConv+0x50>)
 8003ec8:	681c      	ldr	r4, [r3, #0]
 8003eca:	2c00      	cmp	r4, #0
 8003ecc:	d004      	beq.n	8003ed8 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003ece:	4d12      	ldr	r5, [pc, #72]	; (8003f18 <RCM_ExecUserConv+0x54>)
    handle = RCM_UserConvHandle->convHandle;
 8003ed0:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003ed2:	782b      	ldrb	r3, [r5, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d000      	beq.n	8003eda <RCM_ExecUserConv+0x16>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003eda:	0020      	movs	r0, r4
 8003edc:	f7ff ff2e 	bl	8003d3c <RCM_ExecRegularConv>
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <RCM_ExecUserConv+0x58>)
      if (RCM_NoInj_array [handle].status != notvalid)
 8003ee2:	0072      	lsls	r2, r6, #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003ee4:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8003ee6:	1992      	adds	r2, r2, r6
 8003ee8:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <RCM_ExecUserConv+0x5c>)
 8003eea:	0052      	lsls	r2, r2, #1
 8003eec:	189b      	adds	r3, r3, r2
 8003eee:	785b      	ldrb	r3, [r3, #1]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003ef0:	0001      	movs	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <RCM_ExecUserConv+0x60>)
 8003efc:	00f6      	lsls	r6, r6, #3
 8003efe:	58f7      	ldr	r7, [r6, r3]
 8003f00:	2f00      	cmp	r7, #0
 8003f02:	d0e9      	beq.n	8003ed8 <RCM_ExecUserConv+0x14>
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003f04:	2200      	movs	r2, #0
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003f06:	199b      	adds	r3, r3, r6
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003f08:	702a      	strb	r2, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003f0a:	0020      	movs	r0, r4
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	47b8      	blx	r7
}
 8003f10:	e7e2      	b.n	8003ed8 <RCM_ExecUserConv+0x14>
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	20000814 	.word	0x20000814
 8003f18:	20000818 	.word	0x20000818
 8003f1c:	2000081a 	.word	0x2000081a
 8003f20:	200007fc 	.word	0x200007fc
 8003f24:	200007dc 	.word	0x200007dc

08003f28 <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 8003f28:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003f2a:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <RCM_ExecNextConv+0x5c>)
 8003f2c:	4916      	ldr	r1, [pc, #88]	; (8003f88 <RCM_ExecNextConv+0x60>)
 8003f2e:	781a      	ldrb	r2, [r3, #0]
 8003f30:	0053      	lsls	r3, r2, #1
 8003f32:	189b      	adds	r3, r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	5c58      	ldrb	r0, [r3, r1]
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d021      	beq.n	8003f80 <RCM_ExecNextConv+0x58>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003f3c:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003f3e:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003f40:	4812      	ldr	r0, [pc, #72]	; (8003f8c <RCM_ExecNextConv+0x64>)
 8003f42:	0092      	lsls	r2, r2, #2
 8003f44:	5814      	ldr	r4, [r2, r0]
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003f46:	18c9      	adds	r1, r1, r3
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003f48:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003f4a:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003f4c:	68d0      	ldr	r0, [r2, #12]
 8003f4e:	43b0      	bics	r0, r6
 8003f50:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003f52:	68d0      	ldr	r0, [r2, #12]
 8003f54:	4e0e      	ldr	r6, [pc, #56]	; (8003f90 <RCM_ExecNextConv+0x68>)
 8003f56:	4030      	ands	r0, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003f58:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8003f5a:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8003f5c:	6950      	ldr	r0, [r2, #20]
 8003f5e:	43b0      	bics	r0, r6
 8003f60:	68a6      	ldr	r6, [r4, #8]
 8003f62:	4330      	orrs	r0, r6
 8003f64:	6150      	str	r0, [r2, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003f66:	7920      	ldrb	r0, [r4, #4]
 8003f68:	2401      	movs	r4, #1
 8003f6a:	0026      	movs	r6, r4
 8003f6c:	4086      	lsls	r6, r0
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003f6e:	0370      	lsls	r0, r6, #13
 8003f70:	0b40      	lsrs	r0, r0, #13
 8003f72:	6290      	str	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CR,
 8003f74:	6890      	ldr	r0, [r2, #8]
 8003f76:	4e07      	ldr	r6, [pc, #28]	; (8003f94 <RCM_ExecNextConv+0x6c>)
 8003f78:	4030      	ands	r0, r6
 8003f7a:	4328      	orrs	r0, r5
 8003f7c:	6090      	str	r0, [r2, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003f7e:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	2000081c 	.word	0x2000081c
 8003f88:	200007fc 	.word	0x200007fc
 8003f8c:	20000820 	.word	0x20000820
 8003f90:	fffff23f 	.word	0xfffff23f
 8003f94:	7fffffe8 	.word	0x7fffffe8

08003f98 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003f98:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003f9a:	2702      	movs	r7, #2
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003f9c:	4d11      	ldr	r5, [pc, #68]	; (8003fe4 <RCM_ReadOngoingConv+0x4c>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <RCM_ReadOngoingConv+0x50>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003fa0:	7828      	ldrb	r0, [r5, #0]
 8003fa2:	4912      	ldr	r1, [pc, #72]	; (8003fec <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003fa4:	0082      	lsls	r2, r0, #2
 8003fa6:	58d3      	ldr	r3, [r2, r3]
 8003fa8:	681e      	ldr	r6, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003faa:	6833      	ldr	r3, [r6, #0]
 8003fac:	469c      	mov	ip, r3
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003fae:	0043      	lsls	r3, r0, #1
 8003fb0:	181a      	adds	r2, r3, r0
 8003fb2:	0052      	lsls	r2, r2, #1
 8003fb4:	188a      	adds	r2, r1, r2
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003fb6:	7854      	ldrb	r4, [r2, #1]
 8003fb8:	43bc      	bics	r4, r7
 8003fba:	d002      	beq.n	8003fc2 <RCM_ReadOngoingConv+0x2a>
 8003fbc:	4664      	mov	r4, ip
 8003fbe:	0764      	lsls	r4, r4, #29
 8003fc0:	d405      	bmi.n	8003fce <RCM_ReadOngoingConv+0x36>
    /* Restore back DMA configuration */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003fc2:	181b      	adds	r3, r3, r0
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	18c9      	adds	r1, r1, r3
 8003fc8:	794b      	ldrb	r3, [r1, #5]
 8003fca:	702b      	strb	r3, [r5, #0]
}
 8003fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003fce:	6c34      	ldr	r4, [r6, #64]	; 0x40
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003fd0:	7057      	strb	r7, [r2, #1]
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
 8003fd2:	8054      	strh	r4, [r2, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003fd4:	2403      	movs	r4, #3
 8003fd6:	68f2      	ldr	r2, [r6, #12]
 8003fd8:	43a2      	bics	r2, r4
 8003fda:	3c02      	subs	r4, #2
 8003fdc:	4322      	orrs	r2, r4
 8003fde:	60f2      	str	r2, [r6, #12]
}
 8003fe0:	e7ef      	b.n	8003fc2 <RCM_ReadOngoingConv+0x2a>
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	2000081c 	.word	0x2000081c
 8003fe8:	20000820 	.word	0x20000820
 8003fec:	200007fc 	.word	0x200007fc

08003ff0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_MspInit+0x2c>)
{
 8003ff4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff6:	6999      	ldr	r1, [r3, #24]
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	6199      	str	r1, [r3, #24]
 8003ffc:	6999      	ldr	r1, [r3, #24]
 8003ffe:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004002:	9200      	str	r2, [sp, #0]
 8004004:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	0549      	lsls	r1, r1, #21
 800400a:	430a      	orrs	r2, r1
 800400c:	61da      	str	r2, [r3, #28]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	400b      	ands	r3, r1
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004016:	b002      	add	sp, #8
 8004018:	4770      	bx	lr
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	40021000 	.word	0x40021000

08004020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	0004      	movs	r4, r0
 8004024:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004026:	2214      	movs	r2, #20
 8004028:	2100      	movs	r1, #0
 800402a:	a804      	add	r0, sp, #16
 800402c:	f002 fbcc 	bl	80067c8 <memset>
  if(hadc->Instance==ADC1)
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <HAL_ADC_MspInit+0xb0>)
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004038:	b00a      	add	sp, #40	; 0x28
 800403a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <HAL_ADC_MspInit+0xb4>)
 8004040:	0089      	lsls	r1, r1, #2
 8004042:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8004044:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004046:	430a      	orrs	r2, r1
 8004048:	619a      	str	r2, [r3, #24]
 800404a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 800404c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 800404e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004050:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004052:	9201      	str	r2, [sp, #4]
 8004054:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	0289      	lsls	r1, r1, #10
 800405a:	430a      	orrs	r2, r1
 800405c:	615a      	str	r2, [r3, #20]
 800405e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004060:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004064:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004066:	9202      	str	r2, [sp, #8]
 8004068:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	02c9      	lsls	r1, r1, #11
 800406e:	430a      	orrs	r2, r1
 8004070:	615a      	str	r2, [r3, #20]
 8004072:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8004074:	2220      	movs	r2, #32
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004076:	400b      	ands	r3, r1
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 800407c:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 800407e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8004080:	9204      	str	r2, [sp, #16]
 8004082:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8004084:	f000 fd0c 	bl	8004aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8004088:	2303      	movs	r3, #3
 800408a:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800408c:	4812      	ldr	r0, [pc, #72]	; (80040d8 <HAL_ADC_MspInit+0xb8>)
 800408e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8004090:	9204      	str	r2, [sp, #16]
 8004092:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8004096:	f000 fd03 	bl	8004aa0 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 800409a:	4d10      	ldr	r5, [pc, #64]	; (80040dc <HAL_ADC_MspInit+0xbc>)
 800409c:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800409e:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 80040a0:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040a6:	3380      	adds	r3, #128	; 0x80
 80040a8:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80040b0:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040b2:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80040b4:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80040b6:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80040b8:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80040ba:	f000 fcbd 	bl	8004a38 <HAL_DMA_Init>
 80040be:	2800      	cmp	r0, #0
 80040c0:	d102      	bne.n	80040c8 <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80040c2:	6325      	str	r5, [r4, #48]	; 0x30
 80040c4:	626c      	str	r4, [r5, #36]	; 0x24
}
 80040c6:	e7b7      	b.n	8004038 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80040c8:	f7fd f910 	bl	80012ec <Error_Handler>
 80040cc:	e7f9      	b.n	80040c2 <HAL_ADC_MspInit+0xa2>
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	40012400 	.word	0x40012400
 80040d4:	40021000 	.word	0x40021000
 80040d8:	48000400 	.word	0x48000400
 80040dc:	200003e4 	.word	0x200003e4
 80040e0:	40020008 	.word	0x40020008

080040e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040e4:	b530      	push	{r4, r5, lr}
 80040e6:	0004      	movs	r4, r0
 80040e8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ea:	2214      	movs	r2, #20
 80040ec:	2100      	movs	r1, #0
 80040ee:	a802      	add	r0, sp, #8
 80040f0:	f002 fb6a 	bl	80067c8 <memset>
  if(htim_pwm->Instance==TIM1)
 80040f4:	4b31      	ldr	r3, [pc, #196]	; (80041bc <HAL_TIM_PWM_MspInit+0xd8>)
 80040f6:	6822      	ldr	r2, [r4, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_TIM_PWM_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80040fc:	b009      	add	sp, #36	; 0x24
 80040fe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	4b2f      	ldr	r3, [pc, #188]	; (80041c0 <HAL_TIM_PWM_MspInit+0xdc>)
 8004104:	0109      	lsls	r1, r1, #4
 8004106:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004108:	482e      	ldr	r0, [pc, #184]	; (80041c4 <HAL_TIM_PWM_MspInit+0xe0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 800410a:	430a      	orrs	r2, r1
 800410c:	619a      	str	r2, [r3, #24]
 800410e:	699a      	ldr	r2, [r3, #24]
 8004110:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004112:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004114:	9200      	str	r2, [sp, #0]
 8004116:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	02c9      	lsls	r1, r1, #11
 800411c:	430a      	orrs	r2, r1
 800411e:	615a      	str	r2, [r3, #20]
 8004120:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8004122:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004124:	400b      	ands	r3, r1
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800412a:	2302      	movs	r3, #2
 800412c:	0152      	lsls	r2, r2, #5
 800412e:	9202      	str	r2, [sp, #8]
 8004130:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004132:	2301      	movs	r3, #1
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004134:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004136:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004138:	3301      	adds	r3, #1
 800413a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800413c:	f000 fcb0 	bl	8004aa0 <HAL_GPIO_Init>
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8004140:	4d21      	ldr	r5, [pc, #132]	; (80041c8 <HAL_TIM_PWM_MspInit+0xe4>)
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_TIM_PWM_MspInit+0xe8>)
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8004144:	0028      	movs	r0, r5
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8004146:	602b      	str	r3, [r5, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004148:	2310      	movs	r3, #16
 800414a:	606b      	str	r3, [r5, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800414c:	2300      	movs	r3, #0
 800414e:	60ab      	str	r3, [r5, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8004150:	3380      	adds	r3, #128	; 0x80
 8004152:	60eb      	str	r3, [r5, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004154:	3380      	adds	r3, #128	; 0x80
 8004156:	612b      	str	r3, [r5, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	616b      	str	r3, [r5, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 800415e:	2320      	movs	r3, #32
 8004160:	61ab      	str	r3, [r5, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	019b      	lsls	r3, r3, #6
 8004166:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8004168:	f000 fc66 	bl	8004a38 <HAL_DMA_Init>
 800416c:	2800      	cmp	r0, #0
 800416e:	d11f      	bne.n	80041b0 <HAL_TIM_PWM_MspInit+0xcc>
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8004170:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <HAL_TIM_PWM_MspInit+0xec>)
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8004172:	6325      	str	r5, [r4, #48]	; 0x30
 8004174:	626c      	str	r4, [r5, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8004176:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8004178:	6365      	str	r5, [r4, #52]	; 0x34
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 800417a:	4d16      	ldr	r5, [pc, #88]	; (80041d4 <HAL_TIM_PWM_MspInit+0xf0>)
 800417c:	602b      	str	r3, [r5, #0]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800417e:	2310      	movs	r3, #16
 8004180:	606b      	str	r3, [r5, #4]
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8004182:	2300      	movs	r3, #0
 8004184:	60ab      	str	r3, [r5, #8]
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8004186:	3380      	adds	r3, #128	; 0x80
 8004188:	60eb      	str	r3, [r5, #12]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800418a:	3380      	adds	r3, #128	; 0x80
 800418c:	612b      	str	r3, [r5, #16]
    hdma_tim1_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	616b      	str	r3, [r5, #20]
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8004194:	2320      	movs	r3, #32
 8004196:	61ab      	str	r3, [r5, #24]
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8004198:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 800419a:	0028      	movs	r0, r5
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800419c:	019b      	lsls	r3, r3, #6
 800419e:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 80041a0:	f000 fc4a 	bl	8004a38 <HAL_DMA_Init>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d106      	bne.n	80041b6 <HAL_TIM_PWM_MspInit+0xd2>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 80041a8:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
 80041aa:	62e5      	str	r5, [r4, #44]	; 0x2c
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 80041ac:	626c      	str	r4, [r5, #36]	; 0x24
}
 80041ae:	e7a5      	b.n	80040fc <HAL_TIM_PWM_MspInit+0x18>
      Error_Handler();
 80041b0:	f7fd f89c 	bl	80012ec <Error_Handler>
 80041b4:	e7dc      	b.n	8004170 <HAL_TIM_PWM_MspInit+0x8c>
      Error_Handler();
 80041b6:	f7fd f899 	bl	80012ec <Error_Handler>
 80041ba:	e7f5      	b.n	80041a8 <HAL_TIM_PWM_MspInit+0xc4>
 80041bc:	40012c00 	.word	0x40012c00
 80041c0:	40021000 	.word	0x40021000
 80041c4:	48000400 	.word	0x48000400
 80041c8:	2000046c 	.word	0x2000046c
 80041cc:	40020044 	.word	0x40020044
 80041d0:	40020058 	.word	0x40020058
 80041d4:	20000428 	.word	0x20000428

080041d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80041d8:	b510      	push	{r4, lr}
 80041da:	0004      	movs	r4, r0
 80041dc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041de:	2214      	movs	r2, #20
 80041e0:	2100      	movs	r1, #0
 80041e2:	a802      	add	r0, sp, #8
 80041e4:	f002 faf0 	bl	80067c8 <memset>
  if(htim_encoder->Instance==TIM2)
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	05db      	lsls	r3, r3, #23
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d001      	beq.n	80041f6 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80041f2:	b008      	add	sp, #32
 80041f4:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041f6:	2201      	movs	r2, #1
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <HAL_TIM_Encoder_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fa:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041fc:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fe:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004200:	4311      	orrs	r1, r2
 8004202:	61d9      	str	r1, [r3, #28]
 8004204:	69d9      	ldr	r1, [r3, #28]
 8004206:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004208:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 800420a:	9200      	str	r2, [sp, #0]
 800420c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	0289      	lsls	r1, r1, #10
 8004212:	430a      	orrs	r2, r1
 8004214:	615a      	str	r2, [r3, #20]
 8004216:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004218:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800421a:	400b      	ands	r3, r1
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004220:	2302      	movs	r3, #2
 8004222:	9202      	str	r2, [sp, #8]
 8004224:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004226:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004228:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800422a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422c:	f000 fc38 	bl	8004aa0 <HAL_GPIO_Init>
}
 8004230:	e7df      	b.n	80041f2 <HAL_TIM_Encoder_MspInit+0x1a>
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	40021000 	.word	0x40021000

08004238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004238:	b5d0      	push	{r4, r6, r7, lr}
 800423a:	0004      	movs	r4, r0
 800423c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423e:	2214      	movs	r2, #20
 8004240:	2100      	movs	r1, #0
 8004242:	a802      	add	r0, sp, #8
 8004244:	f002 fac0 	bl	80067c8 <memset>
  if(htim->Instance==TIM1)
 8004248:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_TIM_MspPostInit+0x7c>)
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004250:	b008      	add	sp, #32
 8004252:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <HAL_TIM_MspPostInit+0x80>)
 8004258:	02c9      	lsls	r1, r1, #11
 800425a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800425c:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800425e:	430a      	orrs	r2, r1
 8004260:	615a      	str	r2, [r3, #20]
 8004262:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004264:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004266:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004268:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426a:	9200      	str	r2, [sp, #0]
 800426c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	0289      	lsls	r1, r1, #10
 8004272:	430a      	orrs	r2, r1
 8004274:	615a      	str	r2, [r3, #20]
 8004276:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004278:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800427a:	400b      	ands	r3, r1
 800427c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800427e:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004280:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8004282:	2302      	movs	r3, #2
 8004284:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004286:	a902      	add	r1, sp, #8
 8004288:	480c      	ldr	r0, [pc, #48]	; (80042bc <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800428a:	9202      	str	r2, [sp, #8]
 800428c:	9303      	str	r3, [sp, #12]
 800428e:	9604      	str	r6, [sp, #16]
 8004290:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004292:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004294:	f000 fc04 	bl	8004aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004298:	22e0      	movs	r2, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800429c:	2302      	movs	r3, #2
 800429e:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a0:	a902      	add	r1, sp, #8
 80042a2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80042a4:	9202      	str	r2, [sp, #8]
 80042a6:	9303      	str	r3, [sp, #12]
 80042a8:	9604      	str	r6, [sp, #16]
 80042aa:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80042ac:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ae:	f000 fbf7 	bl	8004aa0 <HAL_GPIO_Init>
}
 80042b2:	e7cd      	b.n	8004250 <HAL_TIM_MspPostInit+0x18>
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40021000 	.word	0x40021000
 80042bc:	48000400 	.word	0x48000400

080042c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042c0:	b530      	push	{r4, r5, lr}
 80042c2:	0004      	movs	r4, r0
 80042c4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c6:	2214      	movs	r2, #20
 80042c8:	2100      	movs	r1, #0
 80042ca:	a802      	add	r0, sp, #8
 80042cc:	f002 fa7c 	bl	80067c8 <memset>
  if(huart->Instance==USART1)
 80042d0:	4b27      	ldr	r3, [pc, #156]	; (8004370 <HAL_UART_MspInit+0xb0>)
 80042d2:	6822      	ldr	r2, [r4, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80042d8:	b009      	add	sp, #36	; 0x24
 80042da:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	4b25      	ldr	r3, [pc, #148]	; (8004374 <HAL_UART_MspInit+0xb4>)
 80042e0:	01c9      	lsls	r1, r1, #7
 80042e2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e4:	4824      	ldr	r0, [pc, #144]	; (8004378 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80042e6:	430a      	orrs	r2, r1
 80042e8:	619a      	str	r2, [r3, #24]
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ee:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80042f0:	9200      	str	r2, [sp, #0]
 80042f2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	02c9      	lsls	r1, r1, #11
 80042f8:	430a      	orrs	r2, r1
 80042fa:	615a      	str	r2, [r3, #20]
 80042fc:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80042fe:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004300:	400b      	ands	r3, r1
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004306:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004308:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800430a:	9202      	str	r2, [sp, #8]
 800430c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800430e:	f000 fbc7 	bl	8004aa0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8004312:	4d1a      	ldr	r5, [pc, #104]	; (800437c <HAL_UART_MspInit+0xbc>)
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <HAL_UART_MspInit+0xc0>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004316:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8004318:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800431a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800431c:	0028      	movs	r0, r5
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800431e:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004320:	60ab      	str	r3, [r5, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004322:	60ea      	str	r2, [r5, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004324:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004326:	616b      	str	r3, [r5, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004328:	61ab      	str	r3, [r5, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800432a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800432c:	f000 fb84 	bl	8004a38 <HAL_DMA_Init>
 8004330:	2800      	cmp	r0, #0
 8004332:	d116      	bne.n	8004362 <HAL_UART_MspInit+0xa2>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004334:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_UART_MspInit+0xc4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004336:	6765      	str	r5, [r4, #116]	; 0x74
 8004338:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800433a:	4d13      	ldr	r5, [pc, #76]	; (8004388 <HAL_UART_MspInit+0xc8>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800433c:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800433e:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004340:	2310      	movs	r3, #16
 8004342:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004344:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004346:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004348:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800434a:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800434c:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800434e:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004350:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004352:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004354:	f000 fb70 	bl	8004a38 <HAL_DMA_Init>
 8004358:	2800      	cmp	r0, #0
 800435a:	d105      	bne.n	8004368 <HAL_UART_MspInit+0xa8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800435c:	6725      	str	r5, [r4, #112]	; 0x70
 800435e:	626c      	str	r4, [r5, #36]	; 0x24
}
 8004360:	e7ba      	b.n	80042d8 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8004362:	f7fc ffc3 	bl	80012ec <Error_Handler>
 8004366:	e7e5      	b.n	8004334 <HAL_UART_MspInit+0x74>
      Error_Handler();
 8004368:	f7fc ffc0 	bl	80012ec <Error_Handler>
 800436c:	e7f6      	b.n	800435c <HAL_UART_MspInit+0x9c>
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	40013800 	.word	0x40013800
 8004374:	40021000 	.word	0x40021000
 8004378:	48000400 	.word	0x48000400
 800437c:	200004b0 	.word	0x200004b0
 8004380:	40020030 	.word	0x40020030
 8004384:	4002001c 	.word	0x4002001c
 8004388:	200004f4 	.word	0x200004f4

0800438c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800438c:	e7fe      	b.n	800438c <NMI_Handler>
 800438e:	46c0      	nop			; (mov r8, r8)

08004390 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004390:	4770      	bx	lr
 8004392:	46c0      	nop			; (mov r8, r8)

08004394 <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8004394:	2207      	movs	r2, #7
{
 8004396:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8004398:	4b02      	ldr	r3, [pc, #8]	; (80043a4 <DMA1_Channel1_IRQHandler+0x10>)
 800439a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
    TSK_HighFrequencyTask();
 800439c:	f7fd fc52 	bl	8001c44 <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	40020000 	.word	0x40020000

080043a8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80043a8:	2301      	movs	r3, #1
/**
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 80043aa:	b510      	push	{r4, lr}
 80043ac:	4c0e      	ldr	r4, [pc, #56]	; (80043e8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 80043ae:	6922      	ldr	r2, [r4, #16]
 80043b0:	4213      	tst	r3, r2
 80043b2:	d002      	beq.n	80043ba <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 80043b4:	68e2      	ldr	r2, [r4, #12]
 80043b6:	4213      	tst	r3, r2
 80043b8:	d10e      	bne.n	80043d8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 80043be:	6919      	ldr	r1, [r3, #16]
 80043c0:	420a      	tst	r2, r1
 80043c2:	d008      	beq.n	80043d6 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 80043c4:	68d9      	ldr	r1, [r3, #12]
 80043c6:	420a      	tst	r2, r1
 80043c8:	d005      	beq.n	80043d6 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80043ca:	3a02      	subs	r2, #2
 80043cc:	3aff      	subs	r2, #255	; 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(TIM1) && LL_TIM_IsEnabledIT_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 80043ce:	4807      	ldr	r0, [pc, #28]	; (80043ec <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 80043d0:	611a      	str	r2, [r3, #16]
 80043d2:	f7fe f8db 	bl	800258c <PWMC_OCP_Handler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 80043d6:	bd10      	pop	{r4, pc}
    R1_TIM1_UP_IRQHandler(&PWM_Handle_M1);
 80043d8:	4804      	ldr	r0, [pc, #16]	; (80043ec <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 80043da:	f7ff f8b7 	bl	800354c <R1_TIM1_UP_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80043de:	2302      	movs	r3, #2
 80043e0:	425b      	negs	r3, r3
 80043e2:	6123      	str	r3, [r4, #16]
}
 80043e4:	e7e9      	b.n	80043ba <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	20000150 	.word	0x20000150

080043f0 <DMA1_Channel4_5_IRQHandler>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 80043f0:	2280      	movs	r2, #128	; 0x80
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <DMA1_Channel4_5_IRQHandler+0x1c>)
 80043f4:	0292      	lsls	r2, r2, #10
 80043f6:	6819      	ldr	r1, [r3, #0]
  * @brief  This function handles first motor DMAx TC interrupt request.
  *         Required only for R1 with rep rate > 1
  * @param  None
  */
void DMAx_R1_M1_IRQHandler(void)
{
 80043f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 80043fa:	4211      	tst	r1, r2
 80043fc:	d100      	bne.n	8004400 <DMA1_Channel4_5_IRQHandler+0x10>
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 80043fe:	bd10      	pop	{r4, pc}
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8004400:	605a      	str	r2, [r3, #4]
    R1_DMAx_TC_IRQHandler(&PWM_Handle_M1);
 8004402:	4803      	ldr	r0, [pc, #12]	; (8004410 <DMA1_Channel4_5_IRQHandler+0x20>)
 8004404:	f7ff f8be 	bl	8003584 <R1_DMAx_TC_IRQHandler>
}
 8004408:	e7f9      	b.n	80043fe <DMA1_Channel4_5_IRQHandler+0xe>
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	40020000 	.word	0x40020000
 8004410:	20000150 	.word	0x20000150

08004414 <TIM2_IRQHandler>:
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8004414:	2201      	movs	r2, #1
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8004416:	4807      	ldr	r0, [pc, #28]	; (8004434 <TIM2_IRQHandler+0x20>)
{
 8004418:	b510      	push	{r4, lr}
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 800441a:	6a03      	ldr	r3, [r0, #32]
 800441c:	68d9      	ldr	r1, [r3, #12]
 800441e:	420a      	tst	r2, r1
 8004420:	d006      	beq.n	8004430 <TIM2_IRQHandler+0x1c>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004422:	6919      	ldr	r1, [r3, #16]
 8004424:	420a      	tst	r2, r1
 8004426:	d003      	beq.n	8004430 <TIM2_IRQHandler+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004428:	3a03      	subs	r2, #3
 800442a:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
    ENC_IRQHandler(&ENCODER_M1);
 800442c:	f001 ff12 	bl	8006254 <ENC_IRQHandler>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8004430:	bd10      	pop	{r4, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	20000020 	.word	0x20000020

08004438 <DMA1_Channel2_3_IRQHandler>:
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8004438:	2280      	movs	r2, #128	; 0x80
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <DMA1_Channel2_3_IRQHandler+0x18>)
 800443c:	0092      	lsls	r2, r2, #2
 800443e:	6819      	ldr	r1, [r3, #0]

void DMA1_Channel2_3_IRQHandler (void)
{
 8004440:	b510      	push	{r4, lr}
 8004442:	4211      	tst	r1, r2
 8004444:	d003      	beq.n	800444e <DMA1_Channel2_3_IRQHandler+0x16>
  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A) ){
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8004446:	4803      	ldr	r0, [pc, #12]	; (8004454 <DMA1_Channel2_3_IRQHandler+0x1c>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	f7fc fd01 	bl	8000e50 <ASPEP_HWDataReceivedIT>
  }
}
 800444e:	bd10      	pop	{r4, pc}
 8004450:	40020000 	.word	0x40020000
 8004454:	2000031c 	.word	0x2000031c

08004458 <USART1_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <USART1_IRQHandler+0x94>)

void USART1_IRQHandler(void)
{
 800445c:	b510      	push	{r4, lr}
 800445e:	69d9      	ldr	r1, [r3, #28]
 8004460:	420a      	tst	r2, r1
 8004462:	d008      	beq.n	8004476 <USART1_IRQHandler+0x1e>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004464:	2401      	movs	r4, #1
 8004466:	4822      	ldr	r0, [pc, #136]	; (80044f0 <USART1_IRQHandler+0x98>)
 8004468:	6801      	ldr	r1, [r0, #0]
 800446a:	43a1      	bics	r1, r4
 800446c:	6001      	str	r1, [r0, #0]
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 800446e:	4821      	ldr	r0, [pc, #132]	; (80044f4 <USART1_IRQHandler+0x9c>)
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004470:	621a      	str	r2, [r3, #32]
 8004472:	f7fc fb19 	bl	8000aa8 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004476:	2208      	movs	r2, #8
 8004478:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <USART1_IRQHandler+0x94>)
 800447a:	69d9      	ldr	r1, [r3, #28]
 800447c:	420a      	tst	r2, r1
 800447e:	d00b      	beq.n	8004498 <USART1_IRQHandler+0x40>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004480:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004482:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004486:	3a07      	subs	r2, #7
 8004488:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800448c:	2010      	movs	r0, #16
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4302      	orrs	r2, r0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f381 8810 	msr	PRIMASK, r1
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004498:	2210      	movs	r2, #16
 800449a:	4b14      	ldr	r3, [pc, #80]	; (80044ec <USART1_IRQHandler+0x94>)
 800449c:	69d9      	ldr	r1, [r3, #28]
 800449e:	420a      	tst	r2, r1
 80044a0:	d023      	beq.n	80044ea <USART1_IRQHandler+0x92>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	420a      	tst	r2, r1
 80044a6:	d020      	beq.n	80044ea <USART1_IRQHandler+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ac:	2101      	movs	r1, #1
 80044ae:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	4390      	bics	r0, r2
 80044b6:	6018      	str	r0, [r3, #0]
 80044b8:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044bc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c0:	f381 8810 	msr	PRIMASK, r1
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 80044c4:	2040      	movs	r0, #64	; 0x40
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	4382      	bics	r2, r0
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	f384 8810 	msr	PRIMASK, r4
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80044d0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d6:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	4302      	orrs	r2, r0
 80044de:	609a      	str	r2, [r3, #8]
 80044e0:	f384 8810 	msr	PRIMASK, r4
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 80044e4:	4803      	ldr	r0, [pc, #12]	; (80044f4 <USART1_IRQHandler+0x9c>)
 80044e6:	f7fc fd01 	bl	8000eec <ASPEP_HWDMAReset>
  /* USER CODE END USART1_IRQHandlern 0 */

  /* USER CODE BEGIN USART1_IRQHandler 1 */

  /* USER CODE END USART1_IRQHandler 1 */
}
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	40013800 	.word	0x40013800
 80044f0:	4002001c 	.word	0x4002001c
 80044f4:	2000031c 	.word	0x2000031c

080044f8 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 80044f8:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80044fa:	f7fd fc8d 	bl	8001e18 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80044fe:	e7fe      	b.n	80044fe <HardFault_Handler+0x6>

08004500 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004500:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004502:	4c0d      	ldr	r4, [pc, #52]	; (8004538 <SysTick_Handler+0x38>)
 8004504:	7823      	ldrb	r3, [r4, #0]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d00f      	beq.n	800452a <SysTick_Handler+0x2a>
  }
  else
  {
    /* Nothing to do */
  }
  SystickDividerCounter ++;
 800450a:	3301      	adds	r3, #1
 800450c:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	7023      	strb	r3, [r4, #0]
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <SysTick_Handler+0x3c>)
 8004514:	0092      	lsls	r2, r2, #2
 8004516:	6819      	ldr	r1, [r3, #0]
 8004518:	4211      	tst	r1, r2
 800451a:	d003      	beq.n	8004524 <SysTick_Handler+0x24>

  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 800451c:	4808      	ldr	r0, [pc, #32]	; (8004540 <SysTick_Handler+0x40>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	f7fc fc96 	bl	8000e50 <ASPEP_HWDataReceivedIT>
  }

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 8004524:	f7fd fc6a 	bl	8001dfc <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004528:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 800452a:	f000 f8d9 	bl	80046e0 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800452e:	f000 fa7f 	bl	8004a30 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8004532:	2301      	movs	r3, #1
 8004534:	e7eb      	b.n	800450e <SysTick_Handler+0xe>
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	20000378 	.word	0x20000378
 800453c:	40020000 	.word	0x40020000
 8004540:	2000031c 	.word	0x2000031c

08004544 <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8004544:	2280      	movs	r2, #128	; 0x80
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <EXTI4_15_IRQHandler+0x18>)
 8004548:	0212      	lsls	r2, r2, #8
 800454a:	6959      	ldr	r1, [r3, #20]

/**
  * @brief  This function handles Button IRQ on PIN PC15.
  */
void EXTI4_15_IRQHandler (void)
{
 800454c:	b510      	push	{r4, lr}
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_15) )
 800454e:	4211      	tst	r1, r2
 8004550:	d100      	bne.n	8004554 <EXTI4_15_IRQHandler+0x10>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_15);
    UI_HandleStartStopButton_cb ();
  }

}
 8004552:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8004554:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8004556:	f7fd fc6f 	bl	8001e38 <UI_HandleStartStopButton_cb>
}
 800455a:	e7fa      	b.n	8004552 <EXTI4_15_IRQHandler+0xe>
 800455c:	40010400 	.word	0x40010400

08004560 <UASPEP_INIT>:
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004560:	2240      	movs	r2, #64	; 0x40
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8004562:	6803      	ldr	r3, [r0, #0]
{
 8004564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004566:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004568:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456c:	2101      	movs	r1, #1
 800456e:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004572:	681c      	ldr	r4, [r3, #0]
 8004574:	4314      	orrs	r4, r2
 8004576:	601c      	str	r4, [r3, #0]
 8004578:	f385 8810 	msr	PRIMASK, r5
    LL_USART_EnableIT_TC(pHandle->USARTx);

    /* Enable DMA UART to start the TX request */
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 800457c:	6804      	ldr	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004582:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004586:	2680      	movs	r6, #128	; 0x80
 8004588:	68a3      	ldr	r3, [r4, #8]
 800458a:	4333      	orrs	r3, r6
 800458c:	60a3      	str	r3, [r4, #8]
 800458e:	f385 8810 	msr	PRIMASK, r5

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8004592:	6805      	ldr	r5, [r0, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8004594:	6904      	ldr	r4, [r0, #16]
 8004596:	002e      	movs	r6, r5
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <UASPEP_INIT+0x88>)
 800459a:	3628      	adds	r6, #40	; 0x28
 800459c:	191c      	adds	r4, r3, r4
 800459e:	3c01      	subs	r4, #1
 80045a0:	7827      	ldrb	r7, [r4, #0]
 80045a2:	6884      	ldr	r4, [r0, #8]
 80045a4:	19e4      	adds	r4, r4, r7
 80045a6:	60a6      	str	r6, [r4, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80045a8:	622a      	str	r2, [r5, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045aa:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ae:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80045b2:	68ac      	ldr	r4, [r5, #8]
 80045b4:	430c      	orrs	r4, r1
 80045b6:	60ac      	str	r4, [r5, #8]
 80045b8:	f386 8810 	msr	PRIMASK, r6
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 80045bc:	6804      	ldr	r4, [r0, #0]
 80045be:	68c6      	ldr	r6, [r0, #12]
 80045c0:	0025      	movs	r5, r4
 80045c2:	199b      	adds	r3, r3, r6
 80045c4:	3b01      	subs	r3, #1
 80045c6:	781e      	ldrb	r6, [r3, #0]
 80045c8:	6843      	ldr	r3, [r0, #4]
 80045ca:	3524      	adds	r5, #36	; 0x24
 80045cc:	199b      	adds	r3, r3, r6
 80045ce:	609d      	str	r5, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80045d0:	6222      	str	r2, [r4, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d6:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80045da:	68a3      	ldr	r3, [r4, #8]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60a3      	str	r3, [r4, #8]
 80045e0:	f380 8810 	msr	PRIMASK, r0
}
 80045e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	08006e14 	.word	0x08006e14

080045ec <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 80045ec:	b530      	push	{r4, r5, lr}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 80045ee:	2501      	movs	r5, #1
{
 80045f0:	0014      	movs	r4, r2
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80045f2:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <UASPEP_SEND_PACKET+0x34>)
 80045f4:	6902      	ldr	r2, [r0, #16]
 80045f6:	189b      	adds	r3, r3, r2
 80045f8:	3b01      	subs	r3, #1
 80045fa:	781a      	ldrb	r2, [r3, #0]
 80045fc:	6883      	ldr	r3, [r0, #8]
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
  }
  else
  {
    result = false;
 80045fe:	2000      	movs	r0, #0
 8004600:	189b      	adds	r3, r3, r2
 8004602:	681a      	ldr	r2, [r3, #0]
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8004604:	4215      	tst	r5, r2
 8004606:	d109      	bne.n	800461c <UASPEP_SEND_PACKET+0x30>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004608:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800460a:	6859      	ldr	r1, [r3, #4]
    result = true;
 800460c:	3001      	adds	r0, #1
 800460e:	0c09      	lsrs	r1, r1, #16
 8004610:	040a      	lsls	r2, r1, #16
 8004612:	4322      	orrs	r2, r4
 8004614:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	432a      	orrs	r2, r5
 800461a:	601a      	str	r2, [r3, #0]
  }
  return (result);
}
 800461c:	bd30      	pop	{r4, r5, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	08006e14 	.word	0x08006e14

08004624 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8004624:	b510      	push	{r4, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <UASPEP_RECEIVE_BUFFER+0x2c>)
 8004628:	68c4      	ldr	r4, [r0, #12]
 800462a:	191b      	adds	r3, r3, r4
 800462c:	3b01      	subs	r3, #1
 800462e:	781c      	ldrb	r4, [r3, #0]
 8004630:	6843      	ldr	r3, [r0, #4]
 8004632:	191b      	adds	r3, r3, r4
 8004634:	2401      	movs	r4, #1
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	43a0      	bics	r0, r4
 800463a:	6018      	str	r0, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800463c:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	0c09      	lsrs	r1, r1, #16
 8004642:	0409      	lsls	r1, r1, #16
 8004644:	4311      	orrs	r1, r2
 8004646:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4322      	orrs	r2, r4
 800464c:	601a      	str	r2, [r3, #0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 800464e:	bd10      	pop	{r4, pc}
 8004650:	08006e14 	.word	0x08006e14

08004654 <UASPEP_IDLE_ENABLE>:
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004654:	2110      	movs	r1, #16
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004656:	6803      	ldr	r3, [r0, #0]
 8004658:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465e:	2201      	movs	r2, #1
 8004660:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f380 8810 	msr	PRIMASK, r0
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 800466e:	4770      	bx	lr

08004670 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004670:	4770      	bx	lr
 8004672:	46c0      	nop			; (mov r8, r8)

08004674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004678:	20fa      	movs	r0, #250	; 0xfa
 800467a:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <HAL_InitTick+0x40>)
 800467c:	0080      	lsls	r0, r0, #2
 800467e:	7819      	ldrb	r1, [r3, #0]
 8004680:	f7fb fd42 	bl	8000108 <__udivsi3>
 8004684:	4d0c      	ldr	r5, [pc, #48]	; (80046b8 <HAL_InitTick+0x44>)
 8004686:	0001      	movs	r1, r0
 8004688:	6828      	ldr	r0, [r5, #0]
 800468a:	f7fb fd3d 	bl	8000108 <__udivsi3>
 800468e:	f000 f9b3 	bl	80049f8 <HAL_SYSTICK_Config>
 8004692:	2800      	cmp	r0, #0
 8004694:	d10c      	bne.n	80046b0 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8004696:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004698:	2c03      	cmp	r4, #3
 800469a:	d900      	bls.n	800469e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800469c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800469e:	3802      	subs	r0, #2
 80046a0:	2200      	movs	r2, #0
 80046a2:	0021      	movs	r1, r4
 80046a4:	f000 f96a 	bl	800497c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <HAL_InitTick+0x48>)
 80046aa:	2000      	movs	r0, #0
 80046ac:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80046ae:	e7f5      	b.n	800469c <HAL_InitTick+0x28>
    return HAL_ERROR;
 80046b0:	2001      	movs	r0, #1
 80046b2:	e7f3      	b.n	800469c <HAL_InitTick+0x28>
 80046b4:	20000380 	.word	0x20000380
 80046b8:	2000037c 	.word	0x2000037c
 80046bc:	20000384 	.word	0x20000384

080046c0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046c0:	2110      	movs	r1, #16
 80046c2:	4a06      	ldr	r2, [pc, #24]	; (80046dc <HAL_Init+0x1c>)
{
 80046c4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046c6:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80046c8:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046ca:	430b      	orrs	r3, r1
 80046cc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80046ce:	f7ff ffd1 	bl	8004674 <HAL_InitTick>
  HAL_MspInit();
 80046d2:	f7ff fc8d 	bl	8003ff0 <HAL_MspInit>
}
 80046d6:	2000      	movs	r0, #0
 80046d8:	bd10      	pop	{r4, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	40022000 	.word	0x40022000

080046e0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80046e0:	4a03      	ldr	r2, [pc, #12]	; (80046f0 <HAL_IncTick+0x10>)
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <HAL_IncTick+0x14>)
 80046e4:	6811      	ldr	r1, [r2, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	185b      	adds	r3, r3, r1
 80046ea:	6013      	str	r3, [r2, #0]
}
 80046ec:	4770      	bx	lr
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	20000830 	.word	0x20000830
 80046f4:	20000380 	.word	0x20000380

080046f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80046f8:	4b01      	ldr	r3, [pc, #4]	; (8004700 <HAL_GetTick+0x8>)
 80046fa:	6818      	ldr	r0, [r3, #0]
}
 80046fc:	4770      	bx	lr
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	20000830 	.word	0x20000830

08004704 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004704:	b570      	push	{r4, r5, r6, lr}
 8004706:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 8004708:	d100      	bne.n	800470c <HAL_ADC_Init+0x8>
 800470a:	e082      	b.n	8004812 <HAL_ADC_Init+0x10e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800470c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800470e:	2b00      	cmp	r3, #0
 8004710:	d069      	beq.n	80047e6 <HAL_ADC_Init+0xe2>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004712:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004714:	06db      	lsls	r3, r3, #27
 8004716:	d460      	bmi.n	80047da <HAL_ADC_Init+0xd6>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800471c:	075b      	lsls	r3, r3, #29
 800471e:	d45c      	bmi.n	80047da <HAL_ADC_Init+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004720:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004722:	4949      	ldr	r1, [pc, #292]	; (8004848 <HAL_ADC_Init+0x144>)
 8004724:	400b      	ands	r3, r1
 8004726:	3106      	adds	r1, #6
 8004728:	31ff      	adds	r1, #255	; 0xff
 800472a:	430b      	orrs	r3, r1
 800472c:	63a3      	str	r3, [r4, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800472e:	2303      	movs	r3, #3
 8004730:	6891      	ldr	r1, [r2, #8]
 8004732:	400b      	ands	r3, r1
 8004734:	2b01      	cmp	r3, #1
 8004736:	d05c      	beq.n	80047f2 <HAL_ADC_Init+0xee>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004738:	2118      	movs	r1, #24
 800473a:	68d3      	ldr	r3, [r2, #12]
 800473c:	438b      	bics	r3, r1
 800473e:	68a1      	ldr	r1, [r4, #8]
 8004740:	430b      	orrs	r3, r1
 8004742:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004744:	6913      	ldr	r3, [r2, #16]
 8004746:	6861      	ldr	r1, [r4, #4]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	430b      	orrs	r3, r1
 800474e:	6113      	str	r3, [r2, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004750:	68d3      	ldr	r3, [r2, #12]
 8004752:	493e      	ldr	r1, [pc, #248]	; (800484c <HAL_ADC_Init+0x148>)
 8004754:	400b      	ands	r3, r1
 8004756:	60d3      	str	r3, [r2, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004758:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800475a:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800475c:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800475e:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004760:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004762:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004764:	68e1      	ldr	r1, [r4, #12]
 8004766:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004768:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800476a:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800476c:	2124      	movs	r1, #36	; 0x24
 800476e:	5c61      	ldrb	r1, [r4, r1]
 8004770:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004772:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004774:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004776:	3901      	subs	r1, #1
 8004778:	1e4d      	subs	r5, r1, #1
 800477a:	41a9      	sbcs	r1, r5
 800477c:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800477e:	430b      	orrs	r3, r1
 8004780:	6921      	ldr	r1, [r4, #16]
 8004782:	3902      	subs	r1, #2
 8004784:	424d      	negs	r5, r1
 8004786:	4169      	adcs	r1, r5
 8004788:	0089      	lsls	r1, r1, #2
 800478a:	430b      	orrs	r3, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800478c:	7ee1      	ldrb	r1, [r4, #27]
 800478e:	2901      	cmp	r1, #1
 8004790:	d04b      	beq.n	800482a <HAL_ADC_Init+0x126>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004792:	20c2      	movs	r0, #194	; 0xc2
 8004794:	69e1      	ldr	r1, [r4, #28]
 8004796:	30ff      	adds	r0, #255	; 0xff
 8004798:	4281      	cmp	r1, r0
 800479a:	d002      	beq.n	80047a2 <HAL_ADC_Init+0x9e>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800479c:	6a20      	ldr	r0, [r4, #32]
 800479e:	4301      	orrs	r1, r0
 80047a0:	430b      	orrs	r3, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80047a2:	68d1      	ldr	r1, [r2, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80047a4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80047a6:	4319      	orrs	r1, r3
 80047a8:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80047aa:	2180      	movs	r1, #128	; 0x80
 80047ac:	0549      	lsls	r1, r1, #21
 80047ae:	428d      	cmp	r5, r1
 80047b0:	d026      	beq.n	8004800 <HAL_ADC_Init+0xfc>
 80047b2:	1e69      	subs	r1, r5, #1
 80047b4:	2906      	cmp	r1, #6
 80047b6:	d923      	bls.n	8004800 <HAL_ADC_Init+0xfc>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80047b8:	68d2      	ldr	r2, [r2, #12]
 80047ba:	4925      	ldr	r1, [pc, #148]	; (8004850 <HAL_ADC_Init+0x14c>)
 80047bc:	400a      	ands	r2, r1
 80047be:	429a      	cmp	r2, r3
 80047c0:	d029      	beq.n	8004816 <HAL_ADC_Init+0x112>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80047c2:	2212      	movs	r2, #18
 80047c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 80047c6:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80047c8:	4393      	bics	r3, r2
 80047ca:	3a02      	subs	r2, #2
 80047cc:	4313      	orrs	r3, r2
 80047ce:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047d2:	3a0f      	subs	r2, #15
 80047d4:	4313      	orrs	r3, r2
 80047d6:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 80047d8:	e004      	b.n	80047e4 <HAL_ADC_Init+0xe0>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047da:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 80047dc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047e0:	4313      	orrs	r3, r2
 80047e2:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Lock = HAL_UNLOCKED;
 80047e6:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80047e8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 80047ea:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80047ec:	f7ff fc18 	bl	8004020 <HAL_ADC_MspInit>
 80047f0:	e78f      	b.n	8004712 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80047f2:	6811      	ldr	r1, [r2, #0]
 80047f4:	420b      	tst	r3, r1
 80047f6:	d1ab      	bne.n	8004750 <HAL_ADC_Init+0x4c>
 80047f8:	68d3      	ldr	r3, [r2, #12]
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	d4a8      	bmi.n	8004750 <HAL_ADC_Init+0x4c>
 80047fe:	e79b      	b.n	8004738 <HAL_ADC_Init+0x34>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004800:	2107      	movs	r1, #7
 8004802:	6950      	ldr	r0, [r2, #20]
 8004804:	4388      	bics	r0, r1
 8004806:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004808:	6950      	ldr	r0, [r2, #20]
 800480a:	4029      	ands	r1, r5
 800480c:	4301      	orrs	r1, r0
 800480e:	6151      	str	r1, [r2, #20]
 8004810:	e7d2      	b.n	80047b8 <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 8004812:	2001      	movs	r0, #1
 8004814:	e7e6      	b.n	80047e4 <HAL_ADC_Init+0xe0>
      ADC_CLEAR_ERRORCODE(hadc);
 8004816:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004818:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800481a:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800481c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800481e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004820:	4393      	bics	r3, r2
 8004822:	3a02      	subs	r2, #2
 8004824:	4313      	orrs	r3, r2
 8004826:	63a3      	str	r3, [r4, #56]	; 0x38
 8004828:	e7dc      	b.n	80047e4 <HAL_ADC_Init+0xe0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800482a:	2800      	cmp	r0, #0
 800482c:	d103      	bne.n	8004836 <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800482e:	2180      	movs	r1, #128	; 0x80
 8004830:	0249      	lsls	r1, r1, #9
 8004832:	430b      	orrs	r3, r1
 8004834:	e7ad      	b.n	8004792 <HAL_ADC_Init+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004836:	2520      	movs	r5, #32
 8004838:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800483a:	4328      	orrs	r0, r5
 800483c:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004840:	4301      	orrs	r1, r0
 8004842:	63e1      	str	r1, [r4, #60]	; 0x3c
 8004844:	e7a5      	b.n	8004792 <HAL_ADC_Init+0x8e>
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	fffffefd 	.word	0xfffffefd
 800484c:	fffe0219 	.word	0xfffe0219
 8004850:	833fffe7 	.word	0x833fffe7

08004854 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8004854:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004856:	2234      	movs	r2, #52	; 0x34
{
 8004858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800485a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800485c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800485e:	5c83      	ldrb	r3, [r0, r2]
{
 8004860:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004862:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8004864:	2b01      	cmp	r3, #1
 8004866:	d060      	beq.n	800492a <HAL_ADC_ConfigChannel+0xd6>
 8004868:	2301      	movs	r3, #1
 800486a:	5483      	strb	r3, [r0, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800486c:	6805      	ldr	r5, [r0, #0]
 800486e:	68aa      	ldr	r2, [r5, #8]
 8004870:	0752      	lsls	r2, r2, #29
 8004872:	d509      	bpl.n	8004888 <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004874:	2220      	movs	r2, #32
 8004876:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004878:	4313      	orrs	r3, r2
 800487a:	6383      	str	r3, [r0, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800487c:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800487e:	2334      	movs	r3, #52	; 0x34
 8004880:	2200      	movs	r2, #0
 8004882:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8004884:	b003      	add	sp, #12
 8004886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8004888:	4a36      	ldr	r2, [pc, #216]	; (8004964 <HAL_ADC_ConfigChannel+0x110>)
 800488a:	6848      	ldr	r0, [r1, #4]
 800488c:	4290      	cmp	r0, r2
 800488e:	d030      	beq.n	80048f2 <HAL_ADC_ConfigChannel+0x9e>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004890:	680a      	ldr	r2, [r1, #0]
 8004892:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8004894:	4093      	lsls	r3, r2
 8004896:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004898:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800489a:	4338      	orrs	r0, r7
 800489c:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800489e:	055b      	lsls	r3, r3, #21
 80048a0:	429e      	cmp	r6, r3
 80048a2:	d00f      	beq.n	80048c4 <HAL_ADC_ConfigChannel+0x70>
 80048a4:	3e01      	subs	r6, #1
 80048a6:	2e06      	cmp	r6, #6
 80048a8:	d90c      	bls.n	80048c4 <HAL_ADC_ConfigChannel+0x70>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80048aa:	2307      	movs	r3, #7
 80048ac:	6888      	ldr	r0, [r1, #8]
 80048ae:	6969      	ldr	r1, [r5, #20]
 80048b0:	4019      	ands	r1, r3
 80048b2:	4288      	cmp	r0, r1
 80048b4:	d006      	beq.n	80048c4 <HAL_ADC_ConfigChannel+0x70>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80048b6:	6969      	ldr	r1, [r5, #20]
 80048b8:	4399      	bics	r1, r3
 80048ba:	6169      	str	r1, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80048bc:	6969      	ldr	r1, [r5, #20]
 80048be:	4003      	ands	r3, r0
 80048c0:	430b      	orrs	r3, r1
 80048c2:	616b      	str	r3, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048c4:	0013      	movs	r3, r2
 80048c6:	3b10      	subs	r3, #16
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d810      	bhi.n	80048ee <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80048cc:	4926      	ldr	r1, [pc, #152]	; (8004968 <HAL_ADC_ConfigChannel+0x114>)
 80048ce:	680b      	ldr	r3, [r1, #0]
 80048d0:	2a10      	cmp	r2, #16
 80048d2:	d02e      	beq.n	8004932 <HAL_ADC_ConfigChannel+0xde>
 80048d4:	3a11      	subs	r2, #17
 80048d6:	1e50      	subs	r0, r2, #1
 80048d8:	4182      	sbcs	r2, r0
 80048da:	20c0      	movs	r0, #192	; 0xc0
 80048dc:	4252      	negs	r2, r2
 80048de:	0400      	lsls	r0, r0, #16
 80048e0:	4002      	ands	r2, r0
 80048e2:	2080      	movs	r0, #128	; 0x80
 80048e4:	03c0      	lsls	r0, r0, #15
 80048e6:	4684      	mov	ip, r0
 80048e8:	4462      	add	r2, ip
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ee:	2000      	movs	r0, #0
 80048f0:	e7c5      	b.n	800487e <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80048f2:	680a      	ldr	r2, [r1, #0]
 80048f4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80048f6:	4093      	lsls	r3, r2
 80048f8:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048fa:	0013      	movs	r3, r2
 80048fc:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80048fe:	62a8      	str	r0, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004900:	2b02      	cmp	r3, #2
 8004902:	d8f4      	bhi.n	80048ee <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004904:	4b18      	ldr	r3, [pc, #96]	; (8004968 <HAL_ADC_ConfigChannel+0x114>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2a10      	cmp	r2, #16
 800490a:	d010      	beq.n	800492e <HAL_ADC_ConfigChannel+0xda>
 800490c:	3a11      	subs	r2, #17
 800490e:	4251      	negs	r1, r2
 8004910:	414a      	adcs	r2, r1
 8004912:	21c0      	movs	r1, #192	; 0xc0
 8004914:	4252      	negs	r2, r2
 8004916:	0409      	lsls	r1, r1, #16
 8004918:	400a      	ands	r2, r1
 800491a:	4914      	ldr	r1, [pc, #80]	; (800496c <HAL_ADC_ConfigChannel+0x118>)
 800491c:	468c      	mov	ip, r1
 800491e:	4462      	add	r2, ip
 8004920:	401a      	ands	r2, r3
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <HAL_ADC_ConfigChannel+0x114>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004924:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e7a9      	b.n	800487e <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800492a:	2002      	movs	r0, #2
 800492c:	e7aa      	b.n	8004884 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800492e:	4a10      	ldr	r2, [pc, #64]	; (8004970 <HAL_ADC_ConfigChannel+0x11c>)
 8004930:	e7f6      	b.n	8004920 <HAL_ADC_ConfigChannel+0xcc>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004932:	2280      	movs	r2, #128	; 0x80
 8004934:	0412      	lsls	r2, r2, #16
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800493a:	4b0e      	ldr	r3, [pc, #56]	; (8004974 <HAL_ADC_ConfigChannel+0x120>)
 800493c:	490e      	ldr	r1, [pc, #56]	; (8004978 <HAL_ADC_ConfigChannel+0x124>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	f7fb fbe2 	bl	8000108 <__udivsi3>
 8004944:	0083      	lsls	r3, r0, #2
 8004946:	181b      	adds	r3, r3, r0
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800494c:	9b01      	ldr	r3, [sp, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0cd      	beq.n	80048ee <HAL_ADC_ConfigChannel+0x9a>
            wait_loop_index--;
 8004952:	9b01      	ldr	r3, [sp, #4]
 8004954:	3b01      	subs	r3, #1
 8004956:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004958:	9b01      	ldr	r3, [sp, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f9      	bne.n	8004952 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800495e:	2000      	movs	r0, #0
 8004960:	e78d      	b.n	800487e <HAL_ADC_ConfigChannel+0x2a>
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	00001001 	.word	0x00001001
 8004968:	40012708 	.word	0x40012708
 800496c:	feffffff 	.word	0xfeffffff
 8004970:	ff7fffff 	.word	0xff7fffff
 8004974:	2000037c 	.word	0x2000037c
 8004978:	000f4240 	.word	0x000f4240

0800497c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800497c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800497e:	2800      	cmp	r0, #0
 8004980:	db14      	blt.n	80049ac <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_NVIC_SetPriority+0x5c>)
 8004984:	2203      	movs	r2, #3
 8004986:	469c      	mov	ip, r3
 8004988:	23ff      	movs	r3, #255	; 0xff
 800498a:	0884      	lsrs	r4, r0, #2
 800498c:	4002      	ands	r2, r0
 800498e:	0018      	movs	r0, r3
 8004990:	26c0      	movs	r6, #192	; 0xc0
 8004992:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004994:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004996:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004998:	400b      	ands	r3, r1
 800499a:	4093      	lsls	r3, r2
 800499c:	00a4      	lsls	r4, r4, #2
 800499e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049a0:	00b6      	lsls	r6, r6, #2
 80049a2:	59a5      	ldr	r5, [r4, r6]
 80049a4:	4385      	bics	r5, r0
 80049a6:	432b      	orrs	r3, r5
 80049a8:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049ac:	4a0b      	ldr	r2, [pc, #44]	; (80049dc <HAL_NVIC_SetPriority+0x60>)
 80049ae:	230f      	movs	r3, #15
 80049b0:	4694      	mov	ip, r2
 80049b2:	2203      	movs	r2, #3
 80049b4:	4003      	ands	r3, r0
 80049b6:	4010      	ands	r0, r2
 80049b8:	32fc      	adds	r2, #252	; 0xfc
 80049ba:	0015      	movs	r5, r2
 80049bc:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049be:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049c0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049c2:	400a      	ands	r2, r1
 80049c4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049c6:	3b08      	subs	r3, #8
 80049c8:	089b      	lsrs	r3, r3, #2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4463      	add	r3, ip
 80049ce:	69dc      	ldr	r4, [r3, #28]
 80049d0:	43ac      	bics	r4, r5
 80049d2:	4322      	orrs	r2, r4
 80049d4:	61da      	str	r2, [r3, #28]
 80049d6:	e7e8      	b.n	80049aa <HAL_NVIC_SetPriority+0x2e>
 80049d8:	e000e100 	.word	0xe000e100
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80049e0:	2800      	cmp	r0, #0
 80049e2:	db05      	blt.n	80049f0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049e4:	221f      	movs	r2, #31
 80049e6:	2301      	movs	r3, #1
 80049e8:	4002      	ands	r2, r0
 80049ea:	4093      	lsls	r3, r2
 80049ec:	4a01      	ldr	r2, [pc, #4]	; (80049f4 <HAL_NVIC_EnableIRQ+0x14>)
 80049ee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80049f0:	4770      	bx	lr
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	e000e100 	.word	0xe000e100

080049f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049f8:	2280      	movs	r2, #128	; 0x80
 80049fa:	1e43      	subs	r3, r0, #1
 80049fc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80049fe:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d20e      	bcs.n	8004a22 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a04:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a06:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a08:	4807      	ldr	r0, [pc, #28]	; (8004a28 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a0a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a0c:	6a03      	ldr	r3, [r0, #32]
 8004a0e:	0609      	lsls	r1, r1, #24
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a18:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a1a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a1c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a1e:	3307      	adds	r3, #7
 8004a20:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004a22:	4770      	bx	lr
 8004a24:	e000e010 	.word	0xe000e010
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004a2c:	4770      	bx	lr
 8004a2e:	46c0      	nop			; (mov r8, r8)

08004a30 <HAL_SYSTICK_IRQHandler>:
{
 8004a30:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8004a32:	f7ff fffb 	bl	8004a2c <HAL_SYSTICK_Callback>
}
 8004a36:	bd10      	pop	{r4, pc}

08004a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004a3c:	d027      	beq.n	8004a8e <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a3e:	2521      	movs	r5, #33	; 0x21
 8004a40:	2302      	movs	r3, #2
 8004a42:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a44:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8004a48:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a4a:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a4c:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a52:	68e1      	ldr	r1, [r4, #12]
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6921      	ldr	r1, [r4, #16]
 8004a58:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a5a:	6961      	ldr	r1, [r4, #20]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	69a1      	ldr	r1, [r4, #24]
 8004a60:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a62:	69e1      	ldr	r1, [r4, #28]
 8004a64:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8004a66:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a68:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_DMA_Init+0x60>)
 8004a6c:	2114      	movs	r1, #20
 8004a6e:	469c      	mov	ip, r3
 8004a70:	4460      	add	r0, ip
 8004a72:	f7fb fb49 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8004a78:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8004a7a:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a7c:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a7e:	0080      	lsls	r0, r0, #2
 8004a80:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8004a82:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a84:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8004a86:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8004a88:	321f      	adds	r2, #31
 8004a8a:	54a3      	strb	r3, [r4, r2]
}
 8004a8c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004a8e:	2001      	movs	r0, #1
 8004a90:	e7fc      	b.n	8004a8c <HAL_DMA_Init+0x54>
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	ffffc00f 	.word	0xffffc00f
 8004a98:	bffdfff8 	.word	0xbffdfff8
 8004a9c:	40020000 	.word	0x40020000

08004aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa2:	46de      	mov	lr, fp
 8004aa4:	4657      	mov	r7, sl
 8004aa6:	464e      	mov	r6, r9
 8004aa8:	4645      	mov	r5, r8
 8004aaa:	b5e0      	push	{r5, r6, r7, lr}
 8004aac:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aae:	6809      	ldr	r1, [r1, #0]
 8004ab0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8004ab2:	2300      	movs	r3, #0
{
 8004ab4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ab6:	2900      	cmp	r1, #0
 8004ab8:	d100      	bne.n	8004abc <HAL_GPIO_Init+0x1c>
 8004aba:	e0d0      	b.n	8004c5e <HAL_GPIO_Init+0x1be>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004abc:	4c72      	ldr	r4, [pc, #456]	; (8004c88 <HAL_GPIO_Init+0x1e8>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004abe:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac0:	46a3      	mov	fp, r4
 8004ac2:	e064      	b.n	8004b8e <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ac4:	4665      	mov	r5, ip
 8004ac6:	2d03      	cmp	r5, #3
 8004ac8:	d000      	beq.n	8004acc <HAL_GPIO_Init+0x2c>
 8004aca:	e0b6      	b.n	8004c3a <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004acc:	4666      	mov	r6, ip
 8004ace:	4096      	lsls	r6, r2
 8004ad0:	43f5      	mvns	r5, r6
 8004ad2:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8004ad4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004ad6:	9d02      	ldr	r5, [sp, #8]
 8004ad8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ada:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004adc:	25c0      	movs	r5, #192	; 0xc0
 8004ade:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8004ae0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ae2:	422c      	tst	r4, r5
 8004ae4:	d04d      	beq.n	8004b82 <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae6:	465d      	mov	r5, fp
 8004ae8:	2601      	movs	r6, #1
 8004aea:	465f      	mov	r7, fp
 8004aec:	69ad      	ldr	r5, [r5, #24]
 8004aee:	4335      	orrs	r5, r6
 8004af0:	61bd      	str	r5, [r7, #24]
 8004af2:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004af4:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af6:	4035      	ands	r5, r6
 8004af8:	4e64      	ldr	r6, [pc, #400]	; (8004c8c <HAL_GPIO_Init+0x1ec>)
 8004afa:	9505      	str	r5, [sp, #20]
 8004afc:	46b4      	mov	ip, r6
 8004afe:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b00:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b02:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b04:	00bf      	lsls	r7, r7, #2
 8004b06:	00ad      	lsls	r5, r5, #2
 8004b08:	4465      	add	r5, ip
 8004b0a:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b0c:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b0e:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b10:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b12:	4666      	mov	r6, ip
 8004b14:	40b7      	lsls	r7, r6
 8004b16:	003e      	movs	r6, r7
 8004b18:	464f      	mov	r7, r9
 8004b1a:	43b7      	bics	r7, r6
 8004b1c:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b1e:	2790      	movs	r7, #144	; 0x90
 8004b20:	05ff      	lsls	r7, r7, #23
 8004b22:	42b8      	cmp	r0, r7
 8004b24:	d00e      	beq.n	8004b44 <HAL_GPIO_Init+0xa4>
 8004b26:	4f5a      	ldr	r7, [pc, #360]	; (8004c90 <HAL_GPIO_Init+0x1f0>)
 8004b28:	42b8      	cmp	r0, r7
 8004b2a:	d100      	bne.n	8004b2e <HAL_GPIO_Init+0x8e>
 8004b2c:	e09e      	b.n	8004c6c <HAL_GPIO_Init+0x1cc>
 8004b2e:	4f59      	ldr	r7, [pc, #356]	; (8004c94 <HAL_GPIO_Init+0x1f4>)
 8004b30:	42b8      	cmp	r0, r7
 8004b32:	d100      	bne.n	8004b36 <HAL_GPIO_Init+0x96>
 8004b34:	e0a1      	b.n	8004c7a <HAL_GPIO_Init+0x1da>
 8004b36:	4666      	mov	r6, ip
 8004b38:	2705      	movs	r7, #5
 8004b3a:	40b7      	lsls	r7, r6
 8004b3c:	003e      	movs	r6, r7
 8004b3e:	464f      	mov	r7, r9
 8004b40:	4337      	orrs	r7, r6
 8004b42:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b44:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b46:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b48:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 8004b4a:	4d53      	ldr	r5, [pc, #332]	; (8004c98 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8004b4c:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b4e:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8004b50:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8004b52:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b54:	423c      	tst	r4, r7
 8004b56:	d17f      	bne.n	8004c58 <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 8004b58:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8004b5a:	4f4f      	ldr	r7, [pc, #316]	; (8004c98 <HAL_GPIO_Init+0x1f8>)
 8004b5c:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8004b5e:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b60:	02a7      	lsls	r7, r4, #10
 8004b62:	d476      	bmi.n	8004c52 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8004b64:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8004b66:	4f4c      	ldr	r7, [pc, #304]	; (8004c98 <HAL_GPIO_Init+0x1f8>)
 8004b68:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004b6a:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b6c:	03a7      	lsls	r7, r4, #14
 8004b6e:	d46d      	bmi.n	8004c4c <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8004b70:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004b72:	4f49      	ldr	r7, [pc, #292]	; (8004c98 <HAL_GPIO_Init+0x1f8>)
 8004b74:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8004b76:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b78:	03e4      	lsls	r4, r4, #15
 8004b7a:	d463      	bmi.n	8004c44 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8004b7c:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8004b7e:	4c46      	ldr	r4, [pc, #280]	; (8004c98 <HAL_GPIO_Init+0x1f8>)
 8004b80:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b82:	000c      	movs	r4, r1
      }
    }

    position++;
 8004b84:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b86:	40dc      	lsrs	r4, r3
 8004b88:	3202      	adds	r2, #2
 8004b8a:	2c00      	cmp	r4, #0
 8004b8c:	d067      	beq.n	8004c5e <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b8e:	2601      	movs	r6, #1
 8004b90:	000c      	movs	r4, r1
 8004b92:	409e      	lsls	r6, r3
 8004b94:	4034      	ands	r4, r6
 8004b96:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8004b98:	4231      	tst	r1, r6
 8004b9a:	d0f2      	beq.n	8004b82 <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b9c:	4654      	mov	r4, sl
 8004b9e:	2503      	movs	r5, #3
 8004ba0:	6864      	ldr	r4, [r4, #4]
 8004ba2:	4025      	ands	r5, r4
 8004ba4:	46ac      	mov	ip, r5
 8004ba6:	3d01      	subs	r5, #1
 8004ba8:	2d01      	cmp	r5, #1
 8004baa:	d88b      	bhi.n	8004ac4 <HAL_GPIO_Init+0x24>
        temp = GPIOx->OSPEEDR;
 8004bac:	6885      	ldr	r5, [r0, #8]
 8004bae:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004bb0:	2503      	movs	r5, #3
 8004bb2:	4095      	lsls	r5, r2
 8004bb4:	46a8      	mov	r8, r5
 8004bb6:	43ed      	mvns	r5, r5
 8004bb8:	464f      	mov	r7, r9
 8004bba:	9502      	str	r5, [sp, #8]
 8004bbc:	4645      	mov	r5, r8
 8004bbe:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bc0:	4655      	mov	r5, sl
 8004bc2:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004bc4:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bc6:	002f      	movs	r7, r5
 8004bc8:	4097      	lsls	r7, r2
 8004bca:	46b8      	mov	r8, r7
 8004bcc:	464f      	mov	r7, r9
 8004bce:	4645      	mov	r5, r8
 8004bd0:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8004bd2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004bd4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bd6:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bd8:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bda:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bdc:	0926      	lsrs	r6, r4, #4
 8004bde:	402e      	ands	r6, r5
 8004be0:	409e      	lsls	r6, r3
 8004be2:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8004be4:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8004be6:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004be8:	9d02      	ldr	r5, [sp, #8]
 8004bea:	402e      	ands	r6, r5
 8004bec:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bee:	4656      	mov	r6, sl
 8004bf0:	68b6      	ldr	r6, [r6, #8]
 8004bf2:	4647      	mov	r7, r8
 8004bf4:	4096      	lsls	r6, r2
 8004bf6:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8004bf8:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bfa:	4667      	mov	r7, ip
 8004bfc:	4666      	mov	r6, ip
 8004bfe:	4096      	lsls	r6, r2
 8004c00:	2f02      	cmp	r7, #2
 8004c02:	d000      	beq.n	8004c06 <HAL_GPIO_Init+0x166>
 8004c04:	e766      	b.n	8004ad4 <HAL_GPIO_Init+0x34>
        temp = GPIOx->AFR[position >> 3u];
 8004c06:	08dd      	lsrs	r5, r3, #3
 8004c08:	00ad      	lsls	r5, r5, #2
 8004c0a:	46ac      	mov	ip, r5
 8004c0c:	4484      	add	ip, r0
 8004c0e:	4665      	mov	r5, ip
 8004c10:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c12:	2507      	movs	r5, #7
 8004c14:	401d      	ands	r5, r3
 8004c16:	00ad      	lsls	r5, r5, #2
 8004c18:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8004c1a:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c1c:	250f      	movs	r5, #15
 8004c1e:	4647      	mov	r7, r8
 8004c20:	40bd      	lsls	r5, r7
 8004c22:	9f03      	ldr	r7, [sp, #12]
 8004c24:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c26:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c28:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c2a:	4647      	mov	r7, r8
 8004c2c:	692d      	ldr	r5, [r5, #16]
 8004c2e:	40bd      	lsls	r5, r7
 8004c30:	9f03      	ldr	r7, [sp, #12]
 8004c32:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8004c34:	4665      	mov	r5, ip
 8004c36:	622f      	str	r7, [r5, #32]
 8004c38:	e74c      	b.n	8004ad4 <HAL_GPIO_Init+0x34>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004c3a:	2503      	movs	r5, #3
 8004c3c:	4095      	lsls	r5, r2
 8004c3e:	43ed      	mvns	r5, r5
 8004c40:	9502      	str	r5, [sp, #8]
 8004c42:	e7d0      	b.n	8004be6 <HAL_GPIO_Init+0x146>
          temp |= iocurrent;
 8004c44:	9c01      	ldr	r4, [sp, #4]
 8004c46:	432c      	orrs	r4, r5
 8004c48:	0025      	movs	r5, r4
 8004c4a:	e798      	b.n	8004b7e <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 8004c4c:	9f01      	ldr	r7, [sp, #4]
 8004c4e:	433d      	orrs	r5, r7
 8004c50:	e78f      	b.n	8004b72 <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8004c52:	9f01      	ldr	r7, [sp, #4]
 8004c54:	433d      	orrs	r5, r7
 8004c56:	e786      	b.n	8004b66 <HAL_GPIO_Init+0xc6>
          temp |= iocurrent;
 8004c58:	9f01      	ldr	r7, [sp, #4]
 8004c5a:	433d      	orrs	r5, r7
 8004c5c:	e77d      	b.n	8004b5a <HAL_GPIO_Init+0xba>
  } 
}
 8004c5e:	b007      	add	sp, #28
 8004c60:	bcf0      	pop	{r4, r5, r6, r7}
 8004c62:	46bb      	mov	fp, r7
 8004c64:	46b2      	mov	sl, r6
 8004c66:	46a9      	mov	r9, r5
 8004c68:	46a0      	mov	r8, r4
 8004c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c6c:	4667      	mov	r7, ip
 8004c6e:	2601      	movs	r6, #1
 8004c70:	40be      	lsls	r6, r7
 8004c72:	464f      	mov	r7, r9
 8004c74:	4337      	orrs	r7, r6
 8004c76:	46b9      	mov	r9, r7
 8004c78:	e764      	b.n	8004b44 <HAL_GPIO_Init+0xa4>
 8004c7a:	4667      	mov	r7, ip
 8004c7c:	2602      	movs	r6, #2
 8004c7e:	40be      	lsls	r6, r7
 8004c80:	464f      	mov	r7, r9
 8004c82:	4337      	orrs	r7, r6
 8004c84:	46b9      	mov	r9, r7
 8004c86:	e75d      	b.n	8004b44 <HAL_GPIO_Init+0xa4>
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	48000400 	.word	0x48000400
 8004c94:	48000800 	.word	0x48000800
 8004c98:	40010400 	.word	0x40010400

08004c9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ca0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ca2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ca4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004ca6:	e7fc      	b.n	8004ca2 <HAL_GPIO_WritePin+0x6>

08004ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004caa:	46ce      	mov	lr, r9
 8004cac:	4647      	mov	r7, r8
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	0004      	movs	r4, r0
 8004cb2:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d100      	bne.n	8004cba <HAL_RCC_OscConfig+0x12>
 8004cb8:	e0ee      	b.n	8004e98 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cba:	6803      	ldr	r3, [r0, #0]
 8004cbc:	07da      	lsls	r2, r3, #31
 8004cbe:	d535      	bpl.n	8004d2c <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004cc0:	210c      	movs	r1, #12
 8004cc2:	48c3      	ldr	r0, [pc, #780]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004cc4:	6842      	ldr	r2, [r0, #4]
 8004cc6:	400a      	ands	r2, r1
 8004cc8:	2a04      	cmp	r2, #4
 8004cca:	d100      	bne.n	8004cce <HAL_RCC_OscConfig+0x26>
 8004ccc:	e101      	b.n	8004ed2 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cce:	6842      	ldr	r2, [r0, #4]
 8004cd0:	4011      	ands	r1, r2
 8004cd2:	2908      	cmp	r1, #8
 8004cd4:	d100      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x30>
 8004cd6:	e0f8      	b.n	8004eca <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd8:	6863      	ldr	r3, [r4, #4]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d00f      	beq.n	8004cfe <HAL_RCC_OscConfig+0x56>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d100      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x3c>
 8004ce2:	e11e      	b.n	8004f22 <HAL_RCC_OscConfig+0x27a>
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d100      	bne.n	8004cea <HAL_RCC_OscConfig+0x42>
 8004ce8:	e1a7      	b.n	800503a <HAL_RCC_OscConfig+0x392>
 8004cea:	4bb9      	ldr	r3, [pc, #740]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004cec:	49b9      	ldr	r1, [pc, #740]	; (8004fd4 <HAL_RCC_OscConfig+0x32c>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	49b8      	ldr	r1, [pc, #736]	; (8004fd8 <HAL_RCC_OscConfig+0x330>)
 8004cf8:	400a      	ands	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e005      	b.n	8004d0a <HAL_RCC_OscConfig+0x62>
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	4ab3      	ldr	r2, [pc, #716]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004d02:	025b      	lsls	r3, r3, #9
 8004d04:	6811      	ldr	r1, [r2, #0]
 8004d06:	430b      	orrs	r3, r1
 8004d08:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0a:	f7ff fcf5 	bl	80046f8 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004d10:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	4faf      	ldr	r7, [pc, #700]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004d14:	02b6      	lsls	r6, r6, #10
 8004d16:	e005      	b.n	8004d24 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d18:	f7ff fcee 	bl	80046f8 <HAL_GetTick>
 8004d1c:	1b40      	subs	r0, r0, r5
 8004d1e:	2864      	cmp	r0, #100	; 0x64
 8004d20:	d900      	bls.n	8004d24 <HAL_RCC_OscConfig+0x7c>
 8004d22:	e0fc      	b.n	8004f1e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	4233      	tst	r3, r6
 8004d28:	d0f6      	beq.n	8004d18 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	079a      	lsls	r2, r3, #30
 8004d2e:	d529      	bpl.n	8004d84 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d30:	220c      	movs	r2, #12
 8004d32:	49a7      	ldr	r1, [pc, #668]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004d34:	6848      	ldr	r0, [r1, #4]
 8004d36:	4202      	tst	r2, r0
 8004d38:	d100      	bne.n	8004d3c <HAL_RCC_OscConfig+0x94>
 8004d3a:	e0a6      	b.n	8004e8a <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d3c:	6848      	ldr	r0, [r1, #4]
 8004d3e:	4002      	ands	r2, r0
 8004d40:	2a08      	cmp	r2, #8
 8004d42:	d100      	bne.n	8004d46 <HAL_RCC_OscConfig+0x9e>
 8004d44:	e09d      	b.n	8004e82 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d46:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d48:	4da1      	ldr	r5, [pc, #644]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d100      	bne.n	8004d50 <HAL_RCC_OscConfig+0xa8>
 8004d4e:	e11f      	b.n	8004f90 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8004d50:	2201      	movs	r2, #1
 8004d52:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d54:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8004d56:	4313      	orrs	r3, r2
 8004d58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004d5a:	f7ff fccd 	bl	80046f8 <HAL_GetTick>
 8004d5e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d60:	e005      	b.n	8004d6e <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d62:	f7ff fcc9 	bl	80046f8 <HAL_GetTick>
 8004d66:	1b80      	subs	r0, r0, r6
 8004d68:	2802      	cmp	r0, #2
 8004d6a:	d900      	bls.n	8004d6e <HAL_RCC_OscConfig+0xc6>
 8004d6c:	e0d7      	b.n	8004f1e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6e:	682b      	ldr	r3, [r5, #0]
 8004d70:	421f      	tst	r7, r3
 8004d72:	d0f6      	beq.n	8004d62 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d74:	21f8      	movs	r1, #248	; 0xf8
 8004d76:	682a      	ldr	r2, [r5, #0]
 8004d78:	6923      	ldr	r3, [r4, #16]
 8004d7a:	438a      	bics	r2, r1
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	071a      	lsls	r2, r3, #28
 8004d86:	d42d      	bmi.n	8004de4 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d88:	075a      	lsls	r2, r3, #29
 8004d8a:	d544      	bpl.n	8004e16 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d8c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004d8e:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d90:	4b8f      	ldr	r3, [pc, #572]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004d92:	0552      	lsls	r2, r2, #21
 8004d94:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004d96:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d98:	4211      	tst	r1, r2
 8004d9a:	d108      	bne.n	8004dae <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9c:	69d9      	ldr	r1, [r3, #28]
 8004d9e:	4311      	orrs	r1, r2
 8004da0:	61d9      	str	r1, [r3, #28]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	4013      	ands	r3, r2
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004daa:	2301      	movs	r3, #1
 8004dac:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dae:	2780      	movs	r7, #128	; 0x80
 8004db0:	4e8a      	ldr	r6, [pc, #552]	; (8004fdc <HAL_RCC_OscConfig+0x334>)
 8004db2:	007f      	lsls	r7, r7, #1
 8004db4:	6833      	ldr	r3, [r6, #0]
 8004db6:	423b      	tst	r3, r7
 8004db8:	d100      	bne.n	8004dbc <HAL_RCC_OscConfig+0x114>
 8004dba:	e094      	b.n	8004ee6 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dbc:	68a3      	ldr	r3, [r4, #8]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d100      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x11c>
 8004dc2:	e0f8      	b.n	8004fb6 <HAL_RCC_OscConfig+0x30e>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d100      	bne.n	8004dca <HAL_RCC_OscConfig+0x122>
 8004dc8:	e0c4      	b.n	8004f54 <HAL_RCC_OscConfig+0x2ac>
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d100      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x128>
 8004dce:	e140      	b.n	8005052 <HAL_RCC_OscConfig+0x3aa>
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	4b7f      	ldr	r3, [pc, #508]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004dd4:	6a1a      	ldr	r2, [r3, #32]
 8004dd6:	438a      	bics	r2, r1
 8004dd8:	621a      	str	r2, [r3, #32]
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	3103      	adds	r1, #3
 8004dde:	438a      	bics	r2, r1
 8004de0:	621a      	str	r2, [r3, #32]
 8004de2:	e0ec      	b.n	8004fbe <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de4:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8004de6:	4d7a      	ldr	r5, [pc, #488]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d05b      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8004dec:	2201      	movs	r2, #1
 8004dee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8004df2:	4313      	orrs	r3, r2
 8004df4:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8004df6:	f7ff fc7f 	bl	80046f8 <HAL_GetTick>
 8004dfa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfc:	e005      	b.n	8004e0a <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dfe:	f7ff fc7b 	bl	80046f8 <HAL_GetTick>
 8004e02:	1b80      	subs	r0, r0, r6
 8004e04:	2802      	cmp	r0, #2
 8004e06:	d900      	bls.n	8004e0a <HAL_RCC_OscConfig+0x162>
 8004e08:	e089      	b.n	8004f1e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e0c:	421f      	tst	r7, r3
 8004e0e:	d0f6      	beq.n	8004dfe <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	075a      	lsls	r2, r3, #29
 8004e14:	d4ba      	bmi.n	8004d8c <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e16:	06db      	lsls	r3, r3, #27
 8004e18:	d512      	bpl.n	8004e40 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e1a:	6963      	ldr	r3, [r4, #20]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d100      	bne.n	8004e22 <HAL_RCC_OscConfig+0x17a>
 8004e20:	e13d      	b.n	800509e <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004e22:	3305      	adds	r3, #5
 8004e24:	d000      	beq.n	8004e28 <HAL_RCC_OscConfig+0x180>
 8004e26:	e0e9      	b.n	8004ffc <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004e28:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e2a:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8004e2c:	4a68      	ldr	r2, [pc, #416]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004e2e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004e30:	438b      	bics	r3, r1
 8004e32:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e34:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004e36:	69a3      	ldr	r3, [r4, #24]
 8004e38:	4381      	bics	r1, r0
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e40:	6a23      	ldr	r3, [r4, #32]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01b      	beq.n	8004e7e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e46:	220c      	movs	r2, #12
 8004e48:	4d61      	ldr	r5, [pc, #388]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004e4a:	6869      	ldr	r1, [r5, #4]
 8004e4c:	400a      	ands	r2, r1
 8004e4e:	2a08      	cmp	r2, #8
 8004e50:	d100      	bne.n	8004e54 <HAL_RCC_OscConfig+0x1ac>
 8004e52:	e108      	b.n	8005066 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d100      	bne.n	8004e5a <HAL_RCC_OscConfig+0x1b2>
 8004e58:	e13f      	b.n	80050da <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5a:	682b      	ldr	r3, [r5, #0]
 8004e5c:	4a60      	ldr	r2, [pc, #384]	; (8004fe0 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e5e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004e60:	4013      	ands	r3, r2
 8004e62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e64:	f7ff fc48 	bl	80046f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e68:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8004e6a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e6c:	e004      	b.n	8004e78 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e6e:	f7ff fc43 	bl	80046f8 <HAL_GetTick>
 8004e72:	1b00      	subs	r0, r0, r4
 8004e74:	2802      	cmp	r0, #2
 8004e76:	d852      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	4233      	tst	r3, r6
 8004e7c:	d1f7      	bne.n	8004e6e <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8004e7e:	2000      	movs	r0, #0
 8004e80:	e00b      	b.n	8004e9a <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004e82:	684a      	ldr	r2, [r1, #4]
 8004e84:	03d2      	lsls	r2, r2, #15
 8004e86:	d500      	bpl.n	8004e8a <HAL_RCC_OscConfig+0x1e2>
 8004e88:	e75d      	b.n	8004d46 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e8a:	4a51      	ldr	r2, [pc, #324]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	0792      	lsls	r2, r2, #30
 8004e90:	d539      	bpl.n	8004f06 <HAL_RCC_OscConfig+0x25e>
 8004e92:	68e2      	ldr	r2, [r4, #12]
 8004e94:	2a01      	cmp	r2, #1
 8004e96:	d036      	beq.n	8004f06 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8004e98:	2001      	movs	r0, #1
}
 8004e9a:	b003      	add	sp, #12
 8004e9c:	bcc0      	pop	{r6, r7}
 8004e9e:	46b9      	mov	r9, r7
 8004ea0:	46b0      	mov	r8, r6
 8004ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8004eaa:	4393      	bics	r3, r2
 8004eac:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8004eae:	f7ff fc23 	bl	80046f8 <HAL_GetTick>
 8004eb2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	e004      	b.n	8004ec0 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7ff fc1f 	bl	80046f8 <HAL_GetTick>
 8004eba:	1b80      	subs	r0, r0, r6
 8004ebc:	2802      	cmp	r0, #2
 8004ebe:	d82e      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ec2:	421f      	tst	r7, r3
 8004ec4:	d1f7      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	e7a3      	b.n	8004e12 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004eca:	6842      	ldr	r2, [r0, #4]
 8004ecc:	03d2      	lsls	r2, r2, #15
 8004ece:	d400      	bmi.n	8004ed2 <HAL_RCC_OscConfig+0x22a>
 8004ed0:	e702      	b.n	8004cd8 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed2:	4a3f      	ldr	r2, [pc, #252]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	0392      	lsls	r2, r2, #14
 8004ed8:	d400      	bmi.n	8004edc <HAL_RCC_OscConfig+0x234>
 8004eda:	e727      	b.n	8004d2c <HAL_RCC_OscConfig+0x84>
 8004edc:	6862      	ldr	r2, [r4, #4]
 8004ede:	2a00      	cmp	r2, #0
 8004ee0:	d000      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x23c>
 8004ee2:	e723      	b.n	8004d2c <HAL_RCC_OscConfig+0x84>
 8004ee4:	e7d8      	b.n	8004e98 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ee6:	6833      	ldr	r3, [r6, #0]
 8004ee8:	433b      	orrs	r3, r7
 8004eea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004eec:	f7ff fc04 	bl	80046f8 <HAL_GetTick>
 8004ef0:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef2:	e004      	b.n	8004efe <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef4:	f7ff fc00 	bl	80046f8 <HAL_GetTick>
 8004ef8:	1b40      	subs	r0, r0, r5
 8004efa:	2864      	cmp	r0, #100	; 0x64
 8004efc:	d80f      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efe:	6833      	ldr	r3, [r6, #0]
 8004f00:	423b      	tst	r3, r7
 8004f02:	d0f7      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x24c>
 8004f04:	e75a      	b.n	8004dbc <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f06:	25f8      	movs	r5, #248	; 0xf8
 8004f08:	4831      	ldr	r0, [pc, #196]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004f0a:	6922      	ldr	r2, [r4, #16]
 8004f0c:	6801      	ldr	r1, [r0, #0]
 8004f0e:	00d2      	lsls	r2, r2, #3
 8004f10:	43a9      	bics	r1, r5
 8004f12:	430a      	orrs	r2, r1
 8004f14:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f16:	071a      	lsls	r2, r3, #28
 8004f18:	d400      	bmi.n	8004f1c <HAL_RCC_OscConfig+0x274>
 8004f1a:	e735      	b.n	8004d88 <HAL_RCC_OscConfig+0xe0>
 8004f1c:	e762      	b.n	8004de4 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8004f1e:	2003      	movs	r0, #3
 8004f20:	e7bb      	b.n	8004e9a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f22:	4d2b      	ldr	r5, [pc, #172]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004f24:	4a2b      	ldr	r2, [pc, #172]	; (8004fd4 <HAL_RCC_OscConfig+0x32c>)
 8004f26:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f28:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	682b      	ldr	r3, [r5, #0]
 8004f30:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f32:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f34:	4013      	ands	r3, r2
 8004f36:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f38:	f7ff fbde 	bl	80046f8 <HAL_GetTick>
 8004f3c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3e:	e004      	b.n	8004f4a <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f40:	f7ff fbda 	bl	80046f8 <HAL_GetTick>
 8004f44:	1b80      	subs	r0, r0, r6
 8004f46:	2864      	cmp	r0, #100	; 0x64
 8004f48:	d8e9      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	423b      	tst	r3, r7
 8004f4e:	d1f7      	bne.n	8004f40 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	e6eb      	b.n	8004d2c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f54:	2201      	movs	r2, #1
 8004f56:	4e1e      	ldr	r6, [pc, #120]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f58:	4d22      	ldr	r5, [pc, #136]	; (8004fe4 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f5a:	6a33      	ldr	r3, [r6, #32]
 8004f5c:	4393      	bics	r3, r2
 8004f5e:	6233      	str	r3, [r6, #32]
 8004f60:	6a33      	ldr	r3, [r6, #32]
 8004f62:	3203      	adds	r2, #3
 8004f64:	4393      	bics	r3, r2
 8004f66:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8004f68:	f7ff fbc6 	bl	80046f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f6c:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8004f6e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f70:	4698      	mov	r8, r3
 8004f72:	e004      	b.n	8004f7e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f74:	f7ff fbc0 	bl	80046f8 <HAL_GetTick>
 8004f78:	1bc0      	subs	r0, r0, r7
 8004f7a:	42a8      	cmp	r0, r5
 8004f7c:	d8cf      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7e:	4642      	mov	r2, r8
 8004f80:	6a33      	ldr	r3, [r6, #32]
 8004f82:	421a      	tst	r2, r3
 8004f84:	d1f6      	bne.n	8004f74 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8004f86:	464b      	mov	r3, r9
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d04f      	beq.n	800502c <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	e742      	b.n	8004e16 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8004f90:	2201      	movs	r2, #1
 8004f92:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f94:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8004f96:	4393      	bics	r3, r2
 8004f98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f9a:	f7ff fbad 	bl	80046f8 <HAL_GetTick>
 8004f9e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa0:	e004      	b.n	8004fac <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa2:	f7ff fba9 	bl	80046f8 <HAL_GetTick>
 8004fa6:	1b80      	subs	r0, r0, r6
 8004fa8:	2802      	cmp	r0, #2
 8004faa:	d8b8      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	421f      	tst	r7, r3
 8004fb0:	d1f7      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	e6e6      	b.n	8004d84 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb6:	4906      	ldr	r1, [pc, #24]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004fb8:	6a0a      	ldr	r2, [r1, #32]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8004fbe:	f7ff fb9b 	bl	80046f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc2:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8004fc4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc6:	4698      	mov	r8, r3
 8004fc8:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fca:	4d06      	ldr	r5, [pc, #24]	; (8004fe4 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fcc:	e011      	b.n	8004ff2 <HAL_RCC_OscConfig+0x34a>
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	fffeffff 	.word	0xfffeffff
 8004fd8:	fffbffff 	.word	0xfffbffff
 8004fdc:	40007000 	.word	0x40007000
 8004fe0:	feffffff 	.word	0xfeffffff
 8004fe4:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe8:	f7ff fb86 	bl	80046f8 <HAL_GetTick>
 8004fec:	1b80      	subs	r0, r0, r6
 8004fee:	42a8      	cmp	r0, r5
 8004ff0:	d895      	bhi.n	8004f1e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff2:	4643      	mov	r3, r8
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	421f      	tst	r7, r3
 8004ff8:	d0f6      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x340>
 8004ffa:	e7c4      	b.n	8004f86 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	4d53      	ldr	r5, [pc, #332]	; (800514c <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005000:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8005002:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005004:	4313      	orrs	r3, r2
 8005006:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8005008:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800500a:	3a03      	subs	r2, #3
 800500c:	4393      	bics	r3, r2
 800500e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8005010:	f7ff fb72 	bl	80046f8 <HAL_GetTick>
 8005014:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005016:	e005      	b.n	8005024 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005018:	f7ff fb6e 	bl	80046f8 <HAL_GetTick>
 800501c:	1b80      	subs	r0, r0, r6
 800501e:	2802      	cmp	r0, #2
 8005020:	d900      	bls.n	8005024 <HAL_RCC_OscConfig+0x37c>
 8005022:	e77c      	b.n	8004f1e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005024:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005026:	421f      	tst	r7, r3
 8005028:	d1f6      	bne.n	8005018 <HAL_RCC_OscConfig+0x370>
 800502a:	e709      	b.n	8004e40 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 800502c:	4a47      	ldr	r2, [pc, #284]	; (800514c <HAL_RCC_OscConfig+0x4a4>)
 800502e:	4948      	ldr	r1, [pc, #288]	; (8005150 <HAL_RCC_OscConfig+0x4a8>)
 8005030:	69d3      	ldr	r3, [r2, #28]
 8005032:	400b      	ands	r3, r1
 8005034:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	e6ed      	b.n	8004e16 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800503a:	2280      	movs	r2, #128	; 0x80
 800503c:	4b43      	ldr	r3, [pc, #268]	; (800514c <HAL_RCC_OscConfig+0x4a4>)
 800503e:	02d2      	lsls	r2, r2, #11
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	2280      	movs	r2, #128	; 0x80
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	0252      	lsls	r2, r2, #9
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e65b      	b.n	8004d0a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005052:	2104      	movs	r1, #4
 8005054:	4b3d      	ldr	r3, [pc, #244]	; (800514c <HAL_RCC_OscConfig+0x4a4>)
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	430a      	orrs	r2, r1
 800505a:	621a      	str	r2, [r3, #32]
 800505c:	6a1a      	ldr	r2, [r3, #32]
 800505e:	3903      	subs	r1, #3
 8005060:	430a      	orrs	r2, r1
 8005062:	621a      	str	r2, [r3, #32]
 8005064:	e7ab      	b.n	8004fbe <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005066:	2b01      	cmp	r3, #1
 8005068:	d100      	bne.n	800506c <HAL_RCC_OscConfig+0x3c4>
 800506a:	e715      	b.n	8004e98 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800506c:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 800506e:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005070:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005072:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8005074:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 8005076:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005078:	4013      	ands	r3, r2
 800507a:	428b      	cmp	r3, r1
 800507c:	d000      	beq.n	8005080 <HAL_RCC_OscConfig+0x3d8>
 800507e:	e70c      	b.n	8004e9a <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005080:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005084:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005086:	428b      	cmp	r3, r1
 8005088:	d000      	beq.n	800508c <HAL_RCC_OscConfig+0x3e4>
 800508a:	e706      	b.n	8004e9a <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800508c:	23f0      	movs	r3, #240	; 0xf0
 800508e:	039b      	lsls	r3, r3, #14
 8005090:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005092:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005094:	1ad2      	subs	r2, r2, r3
 8005096:	1e53      	subs	r3, r2, #1
 8005098:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 800509a:	b2d0      	uxtb	r0, r2
 800509c:	e6fd      	b.n	8004e9a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 800509e:	2104      	movs	r1, #4
 80050a0:	4d2a      	ldr	r5, [pc, #168]	; (800514c <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050a2:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80050a4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80050a6:	430a      	orrs	r2, r1
 80050a8:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80050aa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80050ac:	4313      	orrs	r3, r2
 80050ae:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80050b0:	f7ff fb22 	bl	80046f8 <HAL_GetTick>
 80050b4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050b6:	e005      	b.n	80050c4 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80050b8:	f7ff fb1e 	bl	80046f8 <HAL_GetTick>
 80050bc:	1b80      	subs	r0, r0, r6
 80050be:	2802      	cmp	r0, #2
 80050c0:	d900      	bls.n	80050c4 <HAL_RCC_OscConfig+0x41c>
 80050c2:	e72c      	b.n	8004f1e <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80050c6:	421f      	tst	r7, r3
 80050c8:	d0f6      	beq.n	80050b8 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80050ca:	21f8      	movs	r1, #248	; 0xf8
 80050cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80050ce:	69a3      	ldr	r3, [r4, #24]
 80050d0:	438a      	bics	r2, r1
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4313      	orrs	r3, r2
 80050d6:	636b      	str	r3, [r5, #52]	; 0x34
 80050d8:	e6b2      	b.n	8004e40 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 80050da:	682b      	ldr	r3, [r5, #0]
 80050dc:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050de:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80050e0:	4013      	ands	r3, r2
 80050e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80050e4:	f7ff fb08 	bl	80046f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050e8:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80050ea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ec:	e005      	b.n	80050fa <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ee:	f7ff fb03 	bl	80046f8 <HAL_GetTick>
 80050f2:	1b80      	subs	r0, r0, r6
 80050f4:	2802      	cmp	r0, #2
 80050f6:	d900      	bls.n	80050fa <HAL_RCC_OscConfig+0x452>
 80050f8:	e711      	b.n	8004f1e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050fa:	682b      	ldr	r3, [r5, #0]
 80050fc:	423b      	tst	r3, r7
 80050fe:	d1f6      	bne.n	80050ee <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005100:	220f      	movs	r2, #15
 8005102:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005104:	4e11      	ldr	r6, [pc, #68]	; (800514c <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005106:	4393      	bics	r3, r2
 8005108:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800510a:	4313      	orrs	r3, r2
 800510c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800510e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005112:	686a      	ldr	r2, [r5, #4]
 8005114:	430b      	orrs	r3, r1
 8005116:	4910      	ldr	r1, [pc, #64]	; (8005158 <HAL_RCC_OscConfig+0x4b0>)
 8005118:	400a      	ands	r2, r1
 800511a:	4313      	orrs	r3, r2
 800511c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	682a      	ldr	r2, [r5, #0]
 8005122:	045b      	lsls	r3, r3, #17
 8005124:	4313      	orrs	r3, r2
 8005126:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005128:	f7ff fae6 	bl	80046f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800512c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800512e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005130:	04ad      	lsls	r5, r5, #18
 8005132:	e005      	b.n	8005140 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005134:	f7ff fae0 	bl	80046f8 <HAL_GetTick>
 8005138:	1b00      	subs	r0, r0, r4
 800513a:	2802      	cmp	r0, #2
 800513c:	d900      	bls.n	8005140 <HAL_RCC_OscConfig+0x498>
 800513e:	e6ee      	b.n	8004f1e <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005140:	6833      	ldr	r3, [r6, #0]
 8005142:	422b      	tst	r3, r5
 8005144:	d0f6      	beq.n	8005134 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8005146:	2000      	movs	r0, #0
 8005148:	e6a7      	b.n	8004e9a <HAL_RCC_OscConfig+0x1f2>
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	40021000 	.word	0x40021000
 8005150:	efffffff 	.word	0xefffffff
 8005154:	feffffff 	.word	0xfeffffff
 8005158:	ffc2ffff 	.word	0xffc2ffff

0800515c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	46ce      	mov	lr, r9
 8005160:	4647      	mov	r7, r8
 8005162:	0004      	movs	r4, r0
 8005164:	000d      	movs	r5, r1
 8005166:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005168:	2800      	cmp	r0, #0
 800516a:	d00d      	beq.n	8005188 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800516c:	2301      	movs	r3, #1
 800516e:	494a      	ldr	r1, [pc, #296]	; (8005298 <HAL_RCC_ClockConfig+0x13c>)
 8005170:	680a      	ldr	r2, [r1, #0]
 8005172:	401a      	ands	r2, r3
 8005174:	42aa      	cmp	r2, r5
 8005176:	d20c      	bcs.n	8005192 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005178:	680a      	ldr	r2, [r1, #0]
 800517a:	439a      	bics	r2, r3
 800517c:	432a      	orrs	r2, r5
 800517e:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005180:	680a      	ldr	r2, [r1, #0]
 8005182:	4013      	ands	r3, r2
 8005184:	42ab      	cmp	r3, r5
 8005186:	d004      	beq.n	8005192 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8005188:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 800518a:	bcc0      	pop	{r6, r7}
 800518c:	46b9      	mov	r9, r7
 800518e:	46b0      	mov	r8, r6
 8005190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	079a      	lsls	r2, r3, #30
 8005196:	d50e      	bpl.n	80051b6 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005198:	075a      	lsls	r2, r3, #29
 800519a:	d505      	bpl.n	80051a8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800519c:	22e0      	movs	r2, #224	; 0xe0
 800519e:	493f      	ldr	r1, [pc, #252]	; (800529c <HAL_RCC_ClockConfig+0x140>)
 80051a0:	00d2      	lsls	r2, r2, #3
 80051a2:	6848      	ldr	r0, [r1, #4]
 80051a4:	4302      	orrs	r2, r0
 80051a6:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a8:	20f0      	movs	r0, #240	; 0xf0
 80051aa:	493c      	ldr	r1, [pc, #240]	; (800529c <HAL_RCC_ClockConfig+0x140>)
 80051ac:	684a      	ldr	r2, [r1, #4]
 80051ae:	4382      	bics	r2, r0
 80051b0:	68a0      	ldr	r0, [r4, #8]
 80051b2:	4302      	orrs	r2, r0
 80051b4:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b6:	07db      	lsls	r3, r3, #31
 80051b8:	d522      	bpl.n	8005200 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ba:	4b38      	ldr	r3, [pc, #224]	; (800529c <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051bc:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051be:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c0:	2a01      	cmp	r2, #1
 80051c2:	d05b      	beq.n	800527c <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051c4:	2a02      	cmp	r2, #2
 80051c6:	d056      	beq.n	8005276 <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c8:	079b      	lsls	r3, r3, #30
 80051ca:	d5dd      	bpl.n	8005188 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051cc:	2103      	movs	r1, #3
 80051ce:	4e33      	ldr	r6, [pc, #204]	; (800529c <HAL_RCC_ClockConfig+0x140>)
 80051d0:	6873      	ldr	r3, [r6, #4]
 80051d2:	438b      	bics	r3, r1
 80051d4:	4313      	orrs	r3, r2
 80051d6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80051d8:	f7ff fa8e 	bl	80046f8 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051dc:	230c      	movs	r3, #12
 80051de:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 80051e2:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e4:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e6:	e004      	b.n	80051f2 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e8:	f7ff fa86 	bl	80046f8 <HAL_GetTick>
 80051ec:	1bc0      	subs	r0, r0, r7
 80051ee:	4548      	cmp	r0, r9
 80051f0:	d847      	bhi.n	8005282 <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f2:	4643      	mov	r3, r8
 80051f4:	6872      	ldr	r2, [r6, #4]
 80051f6:	401a      	ands	r2, r3
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d1f3      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005200:	2101      	movs	r1, #1
 8005202:	4a25      	ldr	r2, [pc, #148]	; (8005298 <HAL_RCC_ClockConfig+0x13c>)
 8005204:	6813      	ldr	r3, [r2, #0]
 8005206:	400b      	ands	r3, r1
 8005208:	42ab      	cmp	r3, r5
 800520a:	d905      	bls.n	8005218 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520c:	6813      	ldr	r3, [r2, #0]
 800520e:	438b      	bics	r3, r1
 8005210:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005212:	6813      	ldr	r3, [r2, #0]
 8005214:	4219      	tst	r1, r3
 8005216:	d1b7      	bne.n	8005188 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	075b      	lsls	r3, r3, #29
 800521c:	d506      	bpl.n	800522c <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800521e:	4a1f      	ldr	r2, [pc, #124]	; (800529c <HAL_RCC_ClockConfig+0x140>)
 8005220:	4920      	ldr	r1, [pc, #128]	; (80052a4 <HAL_RCC_ClockConfig+0x148>)
 8005222:	6853      	ldr	r3, [r2, #4]
 8005224:	400b      	ands	r3, r1
 8005226:	68e1      	ldr	r1, [r4, #12]
 8005228:	430b      	orrs	r3, r1
 800522a:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800522c:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800522e:	491b      	ldr	r1, [pc, #108]	; (800529c <HAL_RCC_ClockConfig+0x140>)
 8005230:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005232:	4013      	ands	r3, r2
 8005234:	2b08      	cmp	r3, #8
 8005236:	d00e      	beq.n	8005256 <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005238:	481b      	ldr	r0, [pc, #108]	; (80052a8 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800523a:	4b18      	ldr	r3, [pc, #96]	; (800529c <HAL_RCC_ClockConfig+0x140>)
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_RCC_ClockConfig+0x150>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	491b      	ldr	r1, [pc, #108]	; (80052b0 <HAL_RCC_ClockConfig+0x154>)
 8005242:	061b      	lsls	r3, r3, #24
 8005244:	0f1b      	lsrs	r3, r3, #28
 8005246:	5cd3      	ldrb	r3, [r2, r3]
 8005248:	40d8      	lsrs	r0, r3
 800524a:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800524c:	2002      	movs	r0, #2
 800524e:	f7ff fa11 	bl	8004674 <HAL_InitTick>
  return HAL_OK;
 8005252:	2000      	movs	r0, #0
 8005254:	e799      	b.n	800518a <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005256:	250f      	movs	r5, #15
 8005258:	4816      	ldr	r0, [pc, #88]	; (80052b4 <HAL_RCC_ClockConfig+0x158>)
 800525a:	0c93      	lsrs	r3, r2, #18
 800525c:	402b      	ands	r3, r5
 800525e:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005260:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005262:	03d2      	lsls	r2, r2, #15
 8005264:	d50f      	bpl.n	8005286 <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_RCC_ClockConfig+0x15c>)
 8005268:	400d      	ands	r5, r1
 800526a:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800526c:	480e      	ldr	r0, [pc, #56]	; (80052a8 <HAL_RCC_ClockConfig+0x14c>)
 800526e:	f7fa ff4b 	bl	8000108 <__udivsi3>
 8005272:	4360      	muls	r0, r4
 8005274:	e7e1      	b.n	800523a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005276:	019b      	lsls	r3, r3, #6
 8005278:	d4a8      	bmi.n	80051cc <HAL_RCC_ClockConfig+0x70>
 800527a:	e785      	b.n	8005188 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527c:	039b      	lsls	r3, r3, #14
 800527e:	d4a5      	bmi.n	80051cc <HAL_RCC_ClockConfig+0x70>
 8005280:	e782      	b.n	8005188 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8005282:	2003      	movs	r0, #3
 8005284:	e781      	b.n	800518a <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005286:	0163      	lsls	r3, r4, #5
 8005288:	1b1b      	subs	r3, r3, r4
 800528a:	0198      	lsls	r0, r3, #6
 800528c:	1ac0      	subs	r0, r0, r3
 800528e:	00c0      	lsls	r0, r0, #3
 8005290:	1900      	adds	r0, r0, r4
 8005292:	0200      	lsls	r0, r0, #8
 8005294:	e7d1      	b.n	800523a <HAL_RCC_ClockConfig+0xde>
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	40022000 	.word	0x40022000
 800529c:	40021000 	.word	0x40021000
 80052a0:	00001388 	.word	0x00001388
 80052a4:	fffff8ff 	.word	0xfffff8ff
 80052a8:	007a1200 	.word	0x007a1200
 80052ac:	08006e1c 	.word	0x08006e1c
 80052b0:	2000037c 	.word	0x2000037c
 80052b4:	08006e34 	.word	0x08006e34
 80052b8:	08006e44 	.word	0x08006e44

080052bc <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	4a03      	ldr	r2, [pc, #12]	; (80052cc <HAL_RCC_EnableCSS+0x10>)
 80052c0:	031b      	lsls	r3, r3, #12
 80052c2:	6811      	ldr	r1, [r2, #0]
 80052c4:	430b      	orrs	r3, r1
 80052c6:	6013      	str	r3, [r2, #0]
}
 80052c8:	4770      	bx	lr
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	40021000 	.word	0x40021000

080052d0 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 80052d0:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80052d2:	4910      	ldr	r1, [pc, #64]	; (8005314 <HAL_RCC_GetSysClockFreq+0x44>)
{
 80052d4:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80052d6:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80052d8:	4013      	ands	r3, r2
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d001      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 80052de:	480e      	ldr	r0, [pc, #56]	; (8005318 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80052e0:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80052e2:	250f      	movs	r5, #15
 80052e4:	480d      	ldr	r0, [pc, #52]	; (800531c <HAL_RCC_GetSysClockFreq+0x4c>)
 80052e6:	0c93      	lsrs	r3, r2, #18
 80052e8:	402b      	ands	r3, r5
 80052ea:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80052ec:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80052ee:	03d2      	lsls	r2, r2, #15
 80052f0:	d507      	bpl.n	8005302 <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_RCC_GetSysClockFreq+0x50>)
 80052f4:	400d      	ands	r5, r1
 80052f6:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80052f8:	4807      	ldr	r0, [pc, #28]	; (8005318 <HAL_RCC_GetSysClockFreq+0x48>)
 80052fa:	f7fa ff05 	bl	8000108 <__udivsi3>
 80052fe:	4360      	muls	r0, r4
 8005300:	e7ee      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005302:	0162      	lsls	r2, r4, #5
 8005304:	1b12      	subs	r2, r2, r4
 8005306:	0193      	lsls	r3, r2, #6
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	191b      	adds	r3, r3, r4
 800530e:	0218      	lsls	r0, r3, #8
 8005310:	e7e6      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x10>
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	40021000 	.word	0x40021000
 8005318:	007a1200 	.word	0x007a1200
 800531c:	08006e34 	.word	0x08006e34
 8005320:	08006e44 	.word	0x08006e44

08005324 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8005324:	4b01      	ldr	r3, [pc, #4]	; (800532c <HAL_RCC_GetHCLKFreq+0x8>)
 8005326:	6818      	ldr	r0, [r3, #0]
}
 8005328:	4770      	bx	lr
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	2000037c 	.word	0x2000037c

08005330 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8005332:	4a05      	ldr	r2, [pc, #20]	; (8005348 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4905      	ldr	r1, [pc, #20]	; (800534c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005338:	055b      	lsls	r3, r3, #21
 800533a:	0f5b      	lsrs	r3, r3, #29
 800533c:	5ccb      	ldrb	r3, [r1, r3]
 800533e:	6810      	ldr	r0, [r2, #0]
 8005340:	40d8      	lsrs	r0, r3
}    
 8005342:	4770      	bx	lr
 8005344:	40021000 	.word	0x40021000
 8005348:	2000037c 	.word	0x2000037c
 800534c:	08006e2c 	.word	0x08006e2c

08005350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005352:	46ce      	mov	lr, r9
 8005354:	4647      	mov	r7, r8
 8005356:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005358:	6803      	ldr	r3, [r0, #0]
{
 800535a:	0004      	movs	r4, r0
 800535c:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800535e:	03da      	lsls	r2, r3, #15
 8005360:	d530      	bpl.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005362:	2280      	movs	r2, #128	; 0x80
 8005364:	4b43      	ldr	r3, [pc, #268]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8005366:	0552      	lsls	r2, r2, #21
 8005368:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800536a:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800536c:	4211      	tst	r1, r2
 800536e:	d041      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005370:	2680      	movs	r6, #128	; 0x80
 8005372:	4d41      	ldr	r5, [pc, #260]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8005374:	0076      	lsls	r6, r6, #1
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	4233      	tst	r3, r6
 800537a:	d049      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800537c:	4d3d      	ldr	r5, [pc, #244]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800537e:	23c0      	movs	r3, #192	; 0xc0
 8005380:	6a2a      	ldr	r2, [r5, #32]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	0010      	movs	r0, r2
 8005386:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005388:	421a      	tst	r2, r3
 800538a:	d063      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800538c:	6861      	ldr	r1, [r4, #4]
 800538e:	400b      	ands	r3, r1
 8005390:	4283      	cmp	r3, r0
 8005392:	d00e      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005394:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005396:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8005398:	6a2e      	ldr	r6, [r5, #32]
 800539a:	0240      	lsls	r0, r0, #9
 800539c:	4330      	orrs	r0, r6
 800539e:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053a0:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053a2:	4a36      	ldr	r2, [pc, #216]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053a4:	4e36      	ldr	r6, [pc, #216]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053a6:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053a8:	4030      	ands	r0, r6
 80053aa:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053ac:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053ae:	07db      	lsls	r3, r3, #31
 80053b0:	d43f      	bmi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b2:	4a30      	ldr	r2, [pc, #192]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80053b4:	4831      	ldr	r0, [pc, #196]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80053b6:	6a13      	ldr	r3, [r2, #32]
 80053b8:	4003      	ands	r3, r0
 80053ba:	430b      	orrs	r3, r1
 80053bc:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053be:	2f01      	cmp	r7, #1
 80053c0:	d051      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	07da      	lsls	r2, r3, #31
 80053c6:	d506      	bpl.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053c8:	2003      	movs	r0, #3
 80053ca:	492a      	ldr	r1, [pc, #168]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80053cc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80053ce:	4382      	bics	r2, r0
 80053d0:	68a0      	ldr	r0, [r4, #8]
 80053d2:	4302      	orrs	r2, r0
 80053d4:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80053d6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053d8:	069b      	lsls	r3, r3, #26
 80053da:	d506      	bpl.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053dc:	2110      	movs	r1, #16
 80053de:	4a25      	ldr	r2, [pc, #148]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80053e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80053e2:	438b      	bics	r3, r1
 80053e4:	68e1      	ldr	r1, [r4, #12]
 80053e6:	430b      	orrs	r3, r1
 80053e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80053ea:	b003      	add	sp, #12
 80053ec:	bcc0      	pop	{r6, r7}
 80053ee:	46b9      	mov	r9, r7
 80053f0:	46b0      	mov	r8, r6
 80053f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f4:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f8:	4d1f      	ldr	r5, [pc, #124]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80053fa:	4311      	orrs	r1, r2
 80053fc:	61d9      	str	r1, [r3, #28]
 80053fe:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005400:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	4013      	ands	r3, r2
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005408:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 800540a:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800540c:	4233      	tst	r3, r6
 800540e:	d1b5      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	4333      	orrs	r3, r6
 8005414:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005416:	f7ff f96f 	bl	80046f8 <HAL_GetTick>
 800541a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	4233      	tst	r3, r6
 8005420:	d1ac      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005422:	f7ff f969 	bl	80046f8 <HAL_GetTick>
 8005426:	4643      	mov	r3, r8
 8005428:	1ac0      	subs	r0, r0, r3
 800542a:	2864      	cmp	r0, #100	; 0x64
 800542c:	d9f6      	bls.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 800542e:	2003      	movs	r0, #3
 8005430:	e7db      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8005432:	f7ff f961 	bl	80046f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005436:	2302      	movs	r3, #2
 8005438:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543a:	4b12      	ldr	r3, [pc, #72]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 800543c:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543e:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005440:	e004      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005442:	f7ff f959 	bl	80046f8 <HAL_GetTick>
 8005446:	1b80      	subs	r0, r0, r6
 8005448:	4548      	cmp	r0, r9
 800544a:	d8f0      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544c:	4642      	mov	r2, r8
 800544e:	6a2b      	ldr	r3, [r5, #32]
 8005450:	421a      	tst	r2, r3
 8005452:	d0f6      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005454:	4a07      	ldr	r2, [pc, #28]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8005456:	4809      	ldr	r0, [pc, #36]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8005458:	6a13      	ldr	r3, [r2, #32]
 800545a:	6861      	ldr	r1, [r4, #4]
 800545c:	4003      	ands	r3, r0
 800545e:	430b      	orrs	r3, r1
 8005460:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8005462:	2f01      	cmp	r7, #1
 8005464:	d1ad      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005466:	69d3      	ldr	r3, [r2, #28]
 8005468:	4907      	ldr	r1, [pc, #28]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800546a:	400b      	ands	r3, r1
 800546c:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	e7a8      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	40021000 	.word	0x40021000
 8005478:	40007000 	.word	0x40007000
 800547c:	fffffcff 	.word	0xfffffcff
 8005480:	fffeffff 	.word	0xfffeffff
 8005484:	00001388 	.word	0x00001388
 8005488:	efffffff 	.word	0xefffffff

0800548c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800548c:	b510      	push	{r4, lr}
 800548e:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005490:	d066      	beq.n	8005560 <HAL_TIM_PWM_Init+0xd4>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005492:	233d      	movs	r3, #61	; 0x3d
 8005494:	5cc3      	ldrb	r3, [r0, r3]
 8005496:	b2da      	uxtb	r2, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d041      	beq.n	8005520 <HAL_TIM_PWM_Init+0x94>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	233d      	movs	r3, #61	; 0x3d
 800549e:	2202      	movs	r2, #2
 80054a0:	54e2      	strb	r2, [r4, r3]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a4:	492f      	ldr	r1, [pc, #188]	; (8005564 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 80054a6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a8:	428a      	cmp	r2, r1
 80054aa:	d045      	beq.n	8005538 <HAL_TIM_PWM_Init+0xac>
 80054ac:	2180      	movs	r1, #128	; 0x80
 80054ae:	05c9      	lsls	r1, r1, #23
 80054b0:	428a      	cmp	r2, r1
 80054b2:	d02c      	beq.n	800550e <HAL_TIM_PWM_Init+0x82>
 80054b4:	492c      	ldr	r1, [pc, #176]	; (8005568 <HAL_TIM_PWM_Init+0xdc>)
 80054b6:	428a      	cmp	r2, r1
 80054b8:	d029      	beq.n	800550e <HAL_TIM_PWM_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	492c      	ldr	r1, [pc, #176]	; (800556c <HAL_TIM_PWM_Init+0xe0>)
 80054bc:	428a      	cmp	r2, r1
 80054be:	d02a      	beq.n	8005516 <HAL_TIM_PWM_Init+0x8a>
 80054c0:	492b      	ldr	r1, [pc, #172]	; (8005570 <HAL_TIM_PWM_Init+0xe4>)
 80054c2:	428a      	cmp	r2, r1
 80054c4:	d03c      	beq.n	8005540 <HAL_TIM_PWM_Init+0xb4>
 80054c6:	492b      	ldr	r1, [pc, #172]	; (8005574 <HAL_TIM_PWM_Init+0xe8>)
 80054c8:	428a      	cmp	r2, r1
 80054ca:	d039      	beq.n	8005540 <HAL_TIM_PWM_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054cc:	2180      	movs	r1, #128	; 0x80
 80054ce:	438b      	bics	r3, r1
 80054d0:	69a1      	ldr	r1, [r4, #24]
 80054d2:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 80054d4:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d6:	68e3      	ldr	r3, [r4, #12]
 80054d8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054de:	2301      	movs	r3, #1
 80054e0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e2:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80054e4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	3a08      	subs	r2, #8
 80054ea:	54a3      	strb	r3, [r4, r2]
 80054ec:	3201      	adds	r2, #1
 80054ee:	54a3      	strb	r3, [r4, r2]
 80054f0:	3201      	adds	r2, #1
 80054f2:	54a3      	strb	r3, [r4, r2]
 80054f4:	3201      	adds	r2, #1
 80054f6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	3201      	adds	r2, #1
 80054fa:	54a3      	strb	r3, [r4, r2]
 80054fc:	3201      	adds	r2, #1
 80054fe:	54a3      	strb	r3, [r4, r2]
 8005500:	3201      	adds	r2, #1
 8005502:	54a3      	strb	r3, [r4, r2]
 8005504:	3201      	adds	r2, #1
 8005506:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005508:	3a08      	subs	r2, #8
 800550a:	54a3      	strb	r3, [r4, r2]
}
 800550c:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800550e:	2170      	movs	r1, #112	; 0x70
 8005510:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8005512:	68a1      	ldr	r1, [r4, #8]
 8005514:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005516:	4918      	ldr	r1, [pc, #96]	; (8005578 <HAL_TIM_PWM_Init+0xec>)
 8005518:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551a:	6921      	ldr	r1, [r4, #16]
 800551c:	430b      	orrs	r3, r1
 800551e:	e7d5      	b.n	80054cc <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8005520:	333c      	adds	r3, #60	; 0x3c
 8005522:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8005524:	f7fe fdde 	bl	80040e4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	233d      	movs	r3, #61	; 0x3d
 800552a:	2202      	movs	r2, #2
 800552c:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005530:	490c      	ldr	r1, [pc, #48]	; (8005564 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8005532:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005534:	428a      	cmp	r2, r1
 8005536:	d1b9      	bne.n	80054ac <HAL_TIM_PWM_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005538:	2170      	movs	r1, #112	; 0x70
 800553a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800553c:	68a1      	ldr	r1, [r4, #8]
 800553e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005540:	490d      	ldr	r1, [pc, #52]	; (8005578 <HAL_TIM_PWM_Init+0xec>)
 8005542:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005544:	6921      	ldr	r1, [r4, #16]
 8005546:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005548:	2180      	movs	r1, #128	; 0x80
 800554a:	438b      	bics	r3, r1
 800554c:	69a1      	ldr	r1, [r4, #24]
 800554e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005550:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005552:	68e3      	ldr	r3, [r4, #12]
 8005554:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005556:	6863      	ldr	r3, [r4, #4]
 8005558:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800555a:	6963      	ldr	r3, [r4, #20]
 800555c:	6313      	str	r3, [r2, #48]	; 0x30
 800555e:	e7be      	b.n	80054de <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 8005560:	2001      	movs	r0, #1
 8005562:	e7d3      	b.n	800550c <HAL_TIM_PWM_Init+0x80>
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40000400 	.word	0x40000400
 800556c:	40002000 	.word	0x40002000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800
 8005578:	fffffcff 	.word	0xfffffcff

0800557c <HAL_TIM_Encoder_Init>:
{
 800557c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557e:	46c6      	mov	lr, r8
 8005580:	0004      	movs	r4, r0
 8005582:	000d      	movs	r5, r1
 8005584:	b500      	push	{lr}
  if (htim == NULL)
 8005586:	2800      	cmp	r0, #0
 8005588:	d100      	bne.n	800558c <HAL_TIM_Encoder_Init+0x10>
 800558a:	e082      	b.n	8005692 <HAL_TIM_Encoder_Init+0x116>
  if (htim->State == HAL_TIM_STATE_RESET)
 800558c:	233d      	movs	r3, #61	; 0x3d
 800558e:	5cc3      	ldrb	r3, [r0, r3]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d064      	beq.n	8005660 <HAL_TIM_Encoder_Init+0xe4>
  htim->State = HAL_TIM_STATE_BUSY;
 8005596:	233d      	movs	r3, #61	; 0x3d
 8005598:	2202      	movs	r2, #2
 800559a:	54e2      	strb	r2, [r4, r3]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	493e      	ldr	r1, [pc, #248]	; (8005698 <HAL_TIM_Encoder_Init+0x11c>)
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	400a      	ands	r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a4:	493d      	ldr	r1, [pc, #244]	; (800569c <HAL_TIM_Encoder_Init+0x120>)
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055a6:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 80055a8:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055aa:	428b      	cmp	r3, r1
 80055ac:	d05d      	beq.n	800566a <HAL_TIM_Encoder_Init+0xee>
 80055ae:	2180      	movs	r1, #128	; 0x80
 80055b0:	05c9      	lsls	r1, r1, #23
 80055b2:	428b      	cmp	r3, r1
 80055b4:	d04b      	beq.n	800564e <HAL_TIM_Encoder_Init+0xd2>
 80055b6:	493a      	ldr	r1, [pc, #232]	; (80056a0 <HAL_TIM_Encoder_Init+0x124>)
 80055b8:	428b      	cmp	r3, r1
 80055ba:	d048      	beq.n	800564e <HAL_TIM_Encoder_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055bc:	4939      	ldr	r1, [pc, #228]	; (80056a4 <HAL_TIM_Encoder_Init+0x128>)
 80055be:	428b      	cmp	r3, r1
 80055c0:	d049      	beq.n	8005656 <HAL_TIM_Encoder_Init+0xda>
 80055c2:	4939      	ldr	r1, [pc, #228]	; (80056a8 <HAL_TIM_Encoder_Init+0x12c>)
 80055c4:	428b      	cmp	r3, r1
 80055c6:	d054      	beq.n	8005672 <HAL_TIM_Encoder_Init+0xf6>
 80055c8:	4938      	ldr	r1, [pc, #224]	; (80056ac <HAL_TIM_Encoder_Init+0x130>)
 80055ca:	428b      	cmp	r3, r1
 80055cc:	d051      	beq.n	8005672 <HAL_TIM_Encoder_Init+0xf6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	438a      	bics	r2, r1
 80055d2:	69a1      	ldr	r1, [r4, #24]
 80055d4:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80055d6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d8:	68e2      	ldr	r2, [r4, #12]
 80055da:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055dc:	6862      	ldr	r2, [r4, #4]
 80055de:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80055e0:	2001      	movs	r0, #1
 80055e2:	6158      	str	r0, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 80055e4:	689e      	ldr	r6, [r3, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80055e6:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 = htim->Instance->CCMR1;
 80055e8:	699a      	ldr	r2, [r3, #24]
  tmpsmcr |= sConfig->EncoderMode;
 80055ea:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055ec:	4930      	ldr	r1, [pc, #192]	; (80056b0 <HAL_TIM_Encoder_Init+0x134>)
  tmpsmcr |= sConfig->EncoderMode;
 80055ee:	46b0      	mov	r8, r6
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055f0:	400a      	ands	r2, r1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055f2:	69a9      	ldr	r1, [r5, #24]
 80055f4:	68ae      	ldr	r6, [r5, #8]
 80055f6:	0209      	lsls	r1, r1, #8
 80055f8:	4331      	orrs	r1, r6
 80055fa:	4311      	orrs	r1, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055fc:	4a2d      	ldr	r2, [pc, #180]	; (80056b4 <HAL_TIM_Encoder_Init+0x138>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055fe:	692e      	ldr	r6, [r5, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005600:	4011      	ands	r1, r2
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005602:	69ea      	ldr	r2, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005604:	0136      	lsls	r6, r6, #4
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005606:	0212      	lsls	r2, r2, #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005608:	4332      	orrs	r2, r6
 800560a:	68ee      	ldr	r6, [r5, #12]
  tmpccer = htim->Instance->CCER;
 800560c:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800560e:	4332      	orrs	r2, r6
 8005610:	6a2e      	ldr	r6, [r5, #32]
 8005612:	0336      	lsls	r6, r6, #12
 8005614:	4332      	orrs	r2, r6
 8005616:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005618:	21aa      	movs	r1, #170	; 0xaa
 800561a:	438f      	bics	r7, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800561c:	6969      	ldr	r1, [r5, #20]
 800561e:	686d      	ldr	r5, [r5, #4]
 8005620:	0109      	lsls	r1, r1, #4
 8005622:	4329      	orrs	r1, r5
  htim->Instance->SMCR = tmpsmcr;
 8005624:	4645      	mov	r5, r8
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005626:	4339      	orrs	r1, r7
  htim->Instance->SMCR = tmpsmcr;
 8005628:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800562a:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800562c:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800562e:	2346      	movs	r3, #70	; 0x46
 8005630:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005632:	3b08      	subs	r3, #8
 8005634:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005636:	3301      	adds	r3, #1
 8005638:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800563a:	3303      	adds	r3, #3
 800563c:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800563e:	3301      	adds	r3, #1
 8005640:	54e0      	strb	r0, [r4, r3]
  htim->State = HAL_TIM_STATE_READY;
 8005642:	3b06      	subs	r3, #6
 8005644:	54e0      	strb	r0, [r4, r3]
  return HAL_OK;
 8005646:	2000      	movs	r0, #0
}
 8005648:	bc80      	pop	{r7}
 800564a:	46b8      	mov	r8, r7
 800564c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800564e:	2170      	movs	r1, #112	; 0x70
 8005650:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8005652:	68a1      	ldr	r1, [r4, #8]
 8005654:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005656:	4918      	ldr	r1, [pc, #96]	; (80056b8 <HAL_TIM_Encoder_Init+0x13c>)
 8005658:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800565a:	6921      	ldr	r1, [r4, #16]
 800565c:	430a      	orrs	r2, r1
 800565e:	e7b6      	b.n	80055ce <HAL_TIM_Encoder_Init+0x52>
    htim->Lock = HAL_UNLOCKED;
 8005660:	333c      	adds	r3, #60	; 0x3c
 8005662:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Encoder_MspInit(htim);
 8005664:	f7fe fdb8 	bl	80041d8 <HAL_TIM_Encoder_MspInit>
 8005668:	e795      	b.n	8005596 <HAL_TIM_Encoder_Init+0x1a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800566a:	2170      	movs	r1, #112	; 0x70
 800566c:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800566e:	68a1      	ldr	r1, [r4, #8]
 8005670:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005672:	4911      	ldr	r1, [pc, #68]	; (80056b8 <HAL_TIM_Encoder_Init+0x13c>)
 8005674:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005676:	6921      	ldr	r1, [r4, #16]
 8005678:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800567a:	2180      	movs	r1, #128	; 0x80
 800567c:	438a      	bics	r2, r1
 800567e:	69a1      	ldr	r1, [r4, #24]
 8005680:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005682:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005684:	68e2      	ldr	r2, [r4, #12]
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005688:	6862      	ldr	r2, [r4, #4]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800568c:	6962      	ldr	r2, [r4, #20]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
 8005690:	e7a6      	b.n	80055e0 <HAL_TIM_Encoder_Init+0x64>
    return HAL_ERROR;
 8005692:	2001      	movs	r0, #1
 8005694:	e7d8      	b.n	8005648 <HAL_TIM_Encoder_Init+0xcc>
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	ffffbff8 	.word	0xffffbff8
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40002000 	.word	0x40002000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800
 80056b0:	fffffcfc 	.word	0xfffffcfc
 80056b4:	ffff0303 	.word	0xffff0303
 80056b8:	fffffcff 	.word	0xfffffcff

080056bc <HAL_TIM_PWM_ConfigChannel>:
{
 80056bc:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80056be:	203c      	movs	r0, #60	; 0x3c
{
 80056c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80056c2:	5c1c      	ldrb	r4, [r3, r0]
 80056c4:	2c01      	cmp	r4, #1
 80056c6:	d100      	bne.n	80056ca <HAL_TIM_PWM_ConfigChannel+0xe>
 80056c8:	e0de      	b.n	8005888 <HAL_TIM_PWM_ConfigChannel+0x1cc>
 80056ca:	2401      	movs	r4, #1
 80056cc:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 80056ce:	2a08      	cmp	r2, #8
 80056d0:	d100      	bne.n	80056d4 <HAL_TIM_PWM_ConfigChannel+0x18>
 80056d2:	e0ac      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x172>
 80056d4:	d834      	bhi.n	8005740 <HAL_TIM_PWM_ConfigChannel+0x84>
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	d100      	bne.n	80056dc <HAL_TIM_PWM_ConfigChannel+0x20>
 80056da:	e07d      	b.n	80057d8 <HAL_TIM_PWM_ConfigChannel+0x11c>
 80056dc:	2a04      	cmp	r2, #4
 80056de:	d161      	bne.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0xe8>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e0:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e2:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e4:	4d77      	ldr	r5, [pc, #476]	; (80058c4 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e6:	6a10      	ldr	r0, [r2, #32]
 80056e8:	43a0      	bics	r0, r4
 80056ea:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80056ec:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80056ee:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80056f0:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056f2:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	680d      	ldr	r5, [r1, #0]
 80056f6:	022d      	lsls	r5, r5, #8
 80056f8:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056fa:	2420      	movs	r4, #32
 80056fc:	43a0      	bics	r0, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056fe:	688c      	ldr	r4, [r1, #8]
 8005700:	0124      	lsls	r4, r4, #4
 8005702:	4304      	orrs	r4, r0

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005704:	4870      	ldr	r0, [pc, #448]	; (80058c8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8005706:	4282      	cmp	r2, r0
 8005708:	d057      	beq.n	80057ba <HAL_TIM_PWM_ConfigChannel+0xfe>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570a:	4870      	ldr	r0, [pc, #448]	; (80058cc <HAL_TIM_PWM_ConfigChannel+0x210>)
 800570c:	4282      	cmp	r2, r0
 800570e:	d05b      	beq.n	80057c8 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8005710:	486f      	ldr	r0, [pc, #444]	; (80058d0 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8005712:	4282      	cmp	r2, r0
 8005714:	d058      	beq.n	80057c8 <HAL_TIM_PWM_ConfigChannel+0x10c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005716:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005718:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800571a:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800571c:	6390      	str	r0, [r2, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800571e:	2080      	movs	r0, #128	; 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005720:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005722:	6994      	ldr	r4, [r2, #24]
 8005724:	0100      	lsls	r0, r0, #4
 8005726:	4320      	orrs	r0, r4
 8005728:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800572a:	6990      	ldr	r0, [r2, #24]
 800572c:	4c69      	ldr	r4, [pc, #420]	; (80058d4 <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800572e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005730:	4020      	ands	r0, r4
 8005732:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005734:	6990      	ldr	r0, [r2, #24]
 8005736:	0209      	lsls	r1, r1, #8
 8005738:	4301      	orrs	r1, r0
 800573a:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2000      	movs	r0, #0
      break;
 800573e:	e032      	b.n	80057a6 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8005740:	2a0c      	cmp	r2, #12
 8005742:	d12f      	bne.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005744:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005746:	4c64      	ldr	r4, [pc, #400]	; (80058d8 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8005748:	6a10      	ldr	r0, [r2, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800574a:	4d5e      	ldr	r5, [pc, #376]	; (80058c4 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800574c:	4020      	ands	r0, r4
 800574e:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8005750:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005752:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005754:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005756:	4028      	ands	r0, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005758:	680d      	ldr	r5, [r1, #0]
 800575a:	022d      	lsls	r5, r5, #8
 800575c:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800575e:	485f      	ldr	r0, [pc, #380]	; (80058dc <HAL_TIM_PWM_ConfigChannel+0x220>)
 8005760:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005762:	6888      	ldr	r0, [r1, #8]
 8005764:	0300      	lsls	r0, r0, #12
 8005766:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005768:	4c57      	ldr	r4, [pc, #348]	; (80058c8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 800576a:	42a2      	cmp	r2, r4
 800576c:	d01f      	beq.n	80057ae <HAL_TIM_PWM_ConfigChannel+0xf2>
 800576e:	4c57      	ldr	r4, [pc, #348]	; (80058cc <HAL_TIM_PWM_ConfigChannel+0x210>)
 8005770:	42a2      	cmp	r2, r4
 8005772:	d01c      	beq.n	80057ae <HAL_TIM_PWM_ConfigChannel+0xf2>
 8005774:	4c56      	ldr	r4, [pc, #344]	; (80058d0 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8005776:	42a2      	cmp	r2, r4
 8005778:	d019      	beq.n	80057ae <HAL_TIM_PWM_ConfigChannel+0xf2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800577a:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800577c:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 800577e:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005780:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005782:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005784:	2080      	movs	r0, #128	; 0x80
 8005786:	69d4      	ldr	r4, [r2, #28]
 8005788:	0100      	lsls	r0, r0, #4
 800578a:	4320      	orrs	r0, r4
 800578c:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800578e:	69d0      	ldr	r0, [r2, #28]
 8005790:	4c50      	ldr	r4, [pc, #320]	; (80058d4 <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005792:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005794:	4020      	ands	r0, r4
 8005796:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005798:	69d0      	ldr	r0, [r2, #28]
 800579a:	0209      	lsls	r1, r1, #8
 800579c:	4301      	orrs	r1, r0
 800579e:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2000      	movs	r0, #0
      break;
 80057a2:	e000      	b.n	80057a6 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 80057a4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80057a6:	223c      	movs	r2, #60	; 0x3c
 80057a8:	2100      	movs	r1, #0
 80057aa:	5499      	strb	r1, [r3, r2]
}
 80057ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057ae:	4c4c      	ldr	r4, [pc, #304]	; (80058e0 <HAL_TIM_PWM_ConfigChannel+0x224>)
 80057b0:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057b2:	694e      	ldr	r6, [r1, #20]
 80057b4:	01b6      	lsls	r6, r6, #6
 80057b6:	4326      	orrs	r6, r4
 80057b8:	e7df      	b.n	800577a <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer &= ~TIM_CCER_CC2NP;
 80057ba:	2080      	movs	r0, #128	; 0x80
 80057bc:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057be:	68c8      	ldr	r0, [r1, #12]
 80057c0:	0100      	lsls	r0, r0, #4
 80057c2:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 80057c4:	2040      	movs	r0, #64	; 0x40
 80057c6:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057c8:	4846      	ldr	r0, [pc, #280]	; (80058e4 <HAL_TIM_PWM_ConfigChannel+0x228>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ca:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057cc:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057ce:	698e      	ldr	r6, [r1, #24]
 80057d0:	433e      	orrs	r6, r7
 80057d2:	00b6      	lsls	r6, r6, #2
 80057d4:	4306      	orrs	r6, r0
 80057d6:	e79e      	b.n	8005716 <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057d8:	2673      	movs	r6, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057da:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057dc:	6a10      	ldr	r0, [r2, #32]
 80057de:	43a0      	bics	r0, r4
 80057e0:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80057e2:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80057e4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80057e6:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e8:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 80057ea:	680e      	ldr	r6, [r1, #0]
 80057ec:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 80057ee:	2602      	movs	r6, #2
 80057f0:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 80057f2:	688e      	ldr	r6, [r1, #8]
 80057f4:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057f6:	4e34      	ldr	r6, [pc, #208]	; (80058c8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80057f8:	42b2      	cmp	r2, r6
 80057fa:	d047      	beq.n	800588c <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80057fc:	4e33      	ldr	r6, [pc, #204]	; (80058cc <HAL_TIM_PWM_ConfigChannel+0x210>)
 80057fe:	42b2      	cmp	r2, r6
 8005800:	d044      	beq.n	800588c <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8005802:	4e33      	ldr	r6, [pc, #204]	; (80058d0 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8005804:	42b2      	cmp	r2, r6
 8005806:	d041      	beq.n	800588c <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 8005808:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800580a:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800580c:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800580e:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8005810:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005812:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8005814:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005816:	6990      	ldr	r0, [r2, #24]
 8005818:	4320      	orrs	r0, r4
 800581a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800581c:	6990      	ldr	r0, [r2, #24]
 800581e:	3c04      	subs	r4, #4
 8005820:	43a0      	bics	r0, r4
 8005822:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005824:	6990      	ldr	r0, [r2, #24]
 8005826:	4301      	orrs	r1, r0
 8005828:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2000      	movs	r0, #0
      break;
 800582c:	e7bb      	b.n	80057a6 <HAL_TIM_PWM_ConfigChannel+0xea>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800582e:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005830:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005832:	4c2d      	ldr	r4, [pc, #180]	; (80058e8 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 8005834:	6a10      	ldr	r0, [r2, #32]
 8005836:	4020      	ands	r0, r4
 8005838:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800583a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800583c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800583e:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005840:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8005842:	680e      	ldr	r6, [r1, #0]
 8005844:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8005846:	4c29      	ldr	r4, [pc, #164]	; (80058ec <HAL_TIM_PWM_ConfigChannel+0x230>)
 8005848:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800584a:	688c      	ldr	r4, [r1, #8]
 800584c:	0224      	lsls	r4, r4, #8
 800584e:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005850:	4c1d      	ldr	r4, [pc, #116]	; (80058c8 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8005852:	42a2      	cmp	r2, r4
 8005854:	d027      	beq.n	80058a6 <HAL_TIM_PWM_ConfigChannel+0x1ea>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005856:	4c1d      	ldr	r4, [pc, #116]	; (80058cc <HAL_TIM_PWM_ConfigChannel+0x210>)
 8005858:	42a2      	cmp	r2, r4
 800585a:	d02b      	beq.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 800585c:	4c1c      	ldr	r4, [pc, #112]	; (80058d0 <HAL_TIM_PWM_ConfigChannel+0x214>)
 800585e:	42a2      	cmp	r2, r4
 8005860:	d028      	beq.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR3 = OC_Config->Pulse;
 8005862:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005864:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005866:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005868:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800586a:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 800586c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800586e:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005870:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005872:	4320      	orrs	r0, r4
 8005874:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005876:	69d0      	ldr	r0, [r2, #28]
 8005878:	3c04      	subs	r4, #4
 800587a:	43a0      	bics	r0, r4
 800587c:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800587e:	69d0      	ldr	r0, [r2, #28]
 8005880:	4301      	orrs	r1, r0
 8005882:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	2000      	movs	r0, #0
      break;
 8005886:	e78e      	b.n	80057a6 <HAL_TIM_PWM_ConfigChannel+0xea>
  __HAL_LOCK(htim);
 8005888:	2002      	movs	r0, #2
 800588a:	e78f      	b.n	80057ac <HAL_TIM_PWM_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 800588c:	2608      	movs	r6, #8
 800588e:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8005890:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8005892:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8005894:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005896:	2604      	movs	r6, #4
 8005898:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800589a:	4e15      	ldr	r6, [pc, #84]	; (80058f0 <HAL_TIM_PWM_ConfigChannel+0x234>)
 800589c:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800589e:	694d      	ldr	r5, [r1, #20]
 80058a0:	433d      	orrs	r5, r7
 80058a2:	4335      	orrs	r5, r6
 80058a4:	e7b0      	b.n	8005808 <HAL_TIM_PWM_ConfigChannel+0x14c>
    tmpccer &= ~TIM_CCER_CC3NP;
 80058a6:	4c13      	ldr	r4, [pc, #76]	; (80058f4 <HAL_TIM_PWM_ConfigChannel+0x238>)
 80058a8:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058aa:	68cc      	ldr	r4, [r1, #12]
 80058ac:	0224      	lsls	r4, r4, #8
 80058ae:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 80058b0:	4808      	ldr	r0, [pc, #32]	; (80058d4 <HAL_TIM_PWM_ConfigChannel+0x218>)
 80058b2:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058b4:	4c10      	ldr	r4, [pc, #64]	; (80058f8 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058b6:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058b8:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ba:	698d      	ldr	r5, [r1, #24]
 80058bc:	433d      	orrs	r5, r7
 80058be:	012d      	lsls	r5, r5, #4
 80058c0:	4325      	orrs	r5, r4
 80058c2:	e7ce      	b.n	8005862 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 80058c4:	ffff8cff 	.word	0xffff8cff
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40014400 	.word	0x40014400
 80058d0:	40014800 	.word	0x40014800
 80058d4:	fffffbff 	.word	0xfffffbff
 80058d8:	ffffefff 	.word	0xffffefff
 80058dc:	ffffdfff 	.word	0xffffdfff
 80058e0:	ffffbfff 	.word	0xffffbfff
 80058e4:	fffff3ff 	.word	0xfffff3ff
 80058e8:	fffffeff 	.word	0xfffffeff
 80058ec:	fffffdff 	.word	0xfffffdff
 80058f0:	fffffcff 	.word	0xfffffcff
 80058f4:	fffff7ff 	.word	0xfffff7ff
 80058f8:	ffffcfff 	.word	0xffffcfff

080058fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fc:	233c      	movs	r3, #60	; 0x3c
{
 80058fe:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8005900:	5cc3      	ldrb	r3, [r0, r3]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d021      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005906:	233d      	movs	r3, #61	; 0x3d
 8005908:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800590a:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 800590e:	6803      	ldr	r3, [r0, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005912:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005914:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005916:	680d      	ldr	r5, [r1, #0]
 8005918:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591c:	4a0c      	ldr	r2, [pc, #48]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d006      	beq.n	8005930 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	05d2      	lsls	r2, r2, #23
 8005926:	4293      	cmp	r3, r2
 8005928:	d002      	beq.n	8005930 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800592a:	4a0a      	ldr	r2, [pc, #40]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d104      	bne.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005934:	684a      	ldr	r2, [r1, #4]
 8005936:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005938:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800593a:	233d      	movs	r3, #61	; 0x3d
 800593c:	2201      	movs	r2, #1
 800593e:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8005940:	2200      	movs	r2, #0
 8005942:	3b01      	subs	r3, #1
 8005944:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005946:	2000      	movs	r0, #0
}
 8005948:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800594a:	2002      	movs	r0, #2
 800594c:	e7fc      	b.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40000400 	.word	0x40000400

08005958 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005958:	223c      	movs	r2, #60	; 0x3c
{
 800595a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800595c:	5c83      	ldrb	r3, [r0, r2]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d01e      	beq.n	80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005962:	68cb      	ldr	r3, [r1, #12]
 8005964:	4c0f      	ldr	r4, [pc, #60]	; (80059a4 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 8005966:	4023      	ands	r3, r4
 8005968:	688c      	ldr	r4, [r1, #8]
 800596a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800596c:	4c0e      	ldr	r4, [pc, #56]	; (80059a8 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 800596e:	4023      	ands	r3, r4
 8005970:	684c      	ldr	r4, [r1, #4]
 8005972:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005974:	4c0d      	ldr	r4, [pc, #52]	; (80059ac <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8005976:	4023      	ands	r3, r4
 8005978:	680c      	ldr	r4, [r1, #0]
 800597a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800597c:	4c0c      	ldr	r4, [pc, #48]	; (80059b0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 800597e:	4023      	ands	r3, r4
 8005980:	690c      	ldr	r4, [r1, #16]
 8005982:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005984:	4c0b      	ldr	r4, [pc, #44]	; (80059b4 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8005986:	4023      	ands	r3, r4
 8005988:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800598a:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800598c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800598e:	4c0a      	ldr	r4, [pc, #40]	; (80059b8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8005990:	4023      	ands	r3, r4
 8005992:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005994:	6801      	ldr	r1, [r0, #0]
 8005996:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005998:	2300      	movs	r3, #0
 800599a:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 800599c:	2000      	movs	r0, #0
}
 800599e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80059a0:	2002      	movs	r0, #2
 80059a2:	e7fc      	b.n	800599e <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 80059a4:	fffffcff 	.word	0xfffffcff
 80059a8:	fffffbff 	.word	0xfffffbff
 80059ac:	fffff7ff 	.word	0xfffff7ff
 80059b0:	ffffefff 	.word	0xffffefff
 80059b4:	ffffdfff 	.word	0xffffdfff
 80059b8:	ffffbfff 	.word	0xffffbfff

080059bc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80059be:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c0:	07da      	lsls	r2, r3, #31
 80059c2:	d506      	bpl.n	80059d2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059c4:	6801      	ldr	r1, [r0, #0]
 80059c6:	4c28      	ldr	r4, [pc, #160]	; (8005a68 <UART_AdvFeatureConfig+0xac>)
 80059c8:	684a      	ldr	r2, [r1, #4]
 80059ca:	4022      	ands	r2, r4
 80059cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80059ce:	4322      	orrs	r2, r4
 80059d0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059d2:	079a      	lsls	r2, r3, #30
 80059d4:	d506      	bpl.n	80059e4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059d6:	6801      	ldr	r1, [r0, #0]
 80059d8:	4c24      	ldr	r4, [pc, #144]	; (8005a6c <UART_AdvFeatureConfig+0xb0>)
 80059da:	684a      	ldr	r2, [r1, #4]
 80059dc:	4022      	ands	r2, r4
 80059de:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80059e0:	4322      	orrs	r2, r4
 80059e2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e4:	075a      	lsls	r2, r3, #29
 80059e6:	d506      	bpl.n	80059f6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059e8:	6801      	ldr	r1, [r0, #0]
 80059ea:	4c21      	ldr	r4, [pc, #132]	; (8005a70 <UART_AdvFeatureConfig+0xb4>)
 80059ec:	684a      	ldr	r2, [r1, #4]
 80059ee:	4022      	ands	r2, r4
 80059f0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80059f2:	4322      	orrs	r2, r4
 80059f4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059f6:	071a      	lsls	r2, r3, #28
 80059f8:	d506      	bpl.n	8005a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059fa:	6801      	ldr	r1, [r0, #0]
 80059fc:	4c1d      	ldr	r4, [pc, #116]	; (8005a74 <UART_AdvFeatureConfig+0xb8>)
 80059fe:	684a      	ldr	r2, [r1, #4]
 8005a00:	4022      	ands	r2, r4
 8005a02:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005a04:	4322      	orrs	r2, r4
 8005a06:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a08:	06da      	lsls	r2, r3, #27
 8005a0a:	d506      	bpl.n	8005a1a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a0c:	6801      	ldr	r1, [r0, #0]
 8005a0e:	4c1a      	ldr	r4, [pc, #104]	; (8005a78 <UART_AdvFeatureConfig+0xbc>)
 8005a10:	688a      	ldr	r2, [r1, #8]
 8005a12:	4022      	ands	r2, r4
 8005a14:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005a16:	4322      	orrs	r2, r4
 8005a18:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a1a:	069a      	lsls	r2, r3, #26
 8005a1c:	d506      	bpl.n	8005a2c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a1e:	6801      	ldr	r1, [r0, #0]
 8005a20:	4c16      	ldr	r4, [pc, #88]	; (8005a7c <UART_AdvFeatureConfig+0xc0>)
 8005a22:	688a      	ldr	r2, [r1, #8]
 8005a24:	4022      	ands	r2, r4
 8005a26:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005a28:	4322      	orrs	r2, r4
 8005a2a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a2c:	065a      	lsls	r2, r3, #25
 8005a2e:	d50a      	bpl.n	8005a46 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a30:	6801      	ldr	r1, [r0, #0]
 8005a32:	4d13      	ldr	r5, [pc, #76]	; (8005a80 <UART_AdvFeatureConfig+0xc4>)
 8005a34:	684a      	ldr	r2, [r1, #4]
 8005a36:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005a38:	402a      	ands	r2, r5
 8005a3a:	4322      	orrs	r2, r4
 8005a3c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a3e:	2280      	movs	r2, #128	; 0x80
 8005a40:	0352      	lsls	r2, r2, #13
 8005a42:	4294      	cmp	r4, r2
 8005a44:	d009      	beq.n	8005a5a <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a46:	061b      	lsls	r3, r3, #24
 8005a48:	d506      	bpl.n	8005a58 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a4a:	6802      	ldr	r2, [r0, #0]
 8005a4c:	490d      	ldr	r1, [pc, #52]	; (8005a84 <UART_AdvFeatureConfig+0xc8>)
 8005a4e:	6853      	ldr	r3, [r2, #4]
 8005a50:	400b      	ands	r3, r1
 8005a52:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005a54:	430b      	orrs	r3, r1
 8005a56:	6053      	str	r3, [r2, #4]
  }
}
 8005a58:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a5a:	684a      	ldr	r2, [r1, #4]
 8005a5c:	4c0a      	ldr	r4, [pc, #40]	; (8005a88 <UART_AdvFeatureConfig+0xcc>)
 8005a5e:	4022      	ands	r2, r4
 8005a60:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005a62:	4322      	orrs	r2, r4
 8005a64:	604a      	str	r2, [r1, #4]
 8005a66:	e7ee      	b.n	8005a46 <UART_AdvFeatureConfig+0x8a>
 8005a68:	fffdffff 	.word	0xfffdffff
 8005a6c:	fffeffff 	.word	0xfffeffff
 8005a70:	fffbffff 	.word	0xfffbffff
 8005a74:	ffff7fff 	.word	0xffff7fff
 8005a78:	ffffefff 	.word	0xffffefff
 8005a7c:	ffffdfff 	.word	0xffffdfff
 8005a80:	ffefffff 	.word	0xffefffff
 8005a84:	fff7ffff 	.word	0xfff7ffff
 8005a88:	ff9fffff 	.word	0xff9fffff

08005a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8e:	2384      	movs	r3, #132	; 0x84
 8005a90:	2200      	movs	r2, #0
{
 8005a92:	46c6      	mov	lr, r8
 8005a94:	0004      	movs	r4, r0
 8005a96:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a9a:	f7fe fe2d 	bl	80046f8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a9e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005aa0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	0712      	lsls	r2, r2, #28
 8005aa6:	d410      	bmi.n	8005aca <UART_CheckIdleState+0x3e>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	0752      	lsls	r2, r2, #29
 8005aac:	d43c      	bmi.n	8005b28 <UART_CheckIdleState+0x9c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aae:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8005ab2:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab6:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8005ab8:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aba:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005abc:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8005abe:	2378      	movs	r3, #120	; 0x78
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	54e2      	strb	r2, [r4, r3]
}
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	46b8      	mov	r8, r7
 8005ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	0292      	lsls	r2, r2, #10
 8005ace:	d4eb      	bmi.n	8005aa8 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad0:	2680      	movs	r6, #128	; 0x80
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ad2:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ad4:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ad6:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad8:	04b6      	lsls	r6, r6, #18
 8005ada:	e010      	b.n	8005afe <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	4217      	tst	r7, r2
 8005ae2:	d009      	beq.n	8005af8 <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	4211      	tst	r1, r2
 8005aea:	d158      	bne.n	8005b9e <UART_CheckIdleState+0x112>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aec:	2280      	movs	r2, #128	; 0x80
 8005aee:	69d9      	ldr	r1, [r3, #28]
 8005af0:	0112      	lsls	r2, r2, #4
 8005af2:	4211      	tst	r1, r2
 8005af4:	d000      	beq.n	8005af8 <UART_CheckIdleState+0x6c>
 8005af6:	e083      	b.n	8005c00 <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	0292      	lsls	r2, r2, #10
 8005afc:	d4d4      	bmi.n	8005aa8 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afe:	f7fe fdfb 	bl	80046f8 <HAL_GetTick>
 8005b02:	1b40      	subs	r0, r0, r5
 8005b04:	42b0      	cmp	r0, r6
 8005b06:	d3e9      	bcc.n	8005adc <UART_CheckIdleState+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b08:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b12:	2080      	movs	r0, #128	; 0x80
 8005b14:	6822      	ldr	r2, [r4, #0]
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	4383      	bics	r3, r0
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8005b20:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8005b22:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 8005b24:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8005b26:	e7ca      	b.n	8005abe <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	025b      	lsls	r3, r3, #9
 8005b2c:	d4bf      	bmi.n	8005aae <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b30:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b32:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b34:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b36:	04b6      	lsls	r6, r6, #18
 8005b38:	e011      	b.n	8005b5e <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4217      	tst	r7, r2
 8005b40:	d00a      	beq.n	8005b58 <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b42:	4641      	mov	r1, r8
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	4211      	tst	r1, r2
 8005b48:	d000      	beq.n	8005b4c <UART_CheckIdleState+0xc0>
 8005b4a:	e089      	b.n	8005c60 <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b4c:	2280      	movs	r2, #128	; 0x80
 8005b4e:	69d9      	ldr	r1, [r3, #28]
 8005b50:	0112      	lsls	r2, r2, #4
 8005b52:	4211      	tst	r1, r2
 8005b54:	d000      	beq.n	8005b58 <UART_CheckIdleState+0xcc>
 8005b56:	e0b4      	b.n	8005cc2 <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	025b      	lsls	r3, r3, #9
 8005b5c:	d4a7      	bmi.n	8005aae <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5e:	f7fe fdcb 	bl	80046f8 <HAL_GetTick>
 8005b62:	1b40      	subs	r0, r0, r5
 8005b64:	42b0      	cmp	r0, r6
 8005b66:	d3e8      	bcc.n	8005b3a <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b68:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b72:	6821      	ldr	r1, [r4, #0]
 8005b74:	4d6b      	ldr	r5, [pc, #428]	; (8005d24 <UART_CheckIdleState+0x298>)
 8005b76:	680b      	ldr	r3, [r1, #0]
 8005b78:	402b      	ands	r3, r5
 8005b7a:	600b      	str	r3, [r1, #0]
 8005b7c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b80:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b84:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b88:	6821      	ldr	r1, [r4, #0]
 8005b8a:	688b      	ldr	r3, [r1, #8]
 8005b8c:	4393      	bics	r3, r2
 8005b8e:	608b      	str	r3, [r1, #8]
 8005b90:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8005b98:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8005b9a:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8005b9c:	e78f      	b.n	8005abe <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b9e:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005baa:	6821      	ldr	r1, [r4, #0]
 8005bac:	4d5d      	ldr	r5, [pc, #372]	; (8005d24 <UART_CheckIdleState+0x298>)
 8005bae:	680b      	ldr	r3, [r1, #0]
 8005bb0:	402b      	ands	r3, r5
 8005bb2:	600b      	str	r3, [r1, #0]
 8005bb4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbc:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc0:	6821      	ldr	r1, [r4, #0]
 8005bc2:	688b      	ldr	r3, [r1, #8]
 8005bc4:	4393      	bics	r3, r2
 8005bc6:	608b      	str	r3, [r1, #8]
 8005bc8:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bcc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10a      	bne.n	8005be8 <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd6:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bda:	2010      	movs	r0, #16
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	4383      	bics	r3, r0
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bec:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005bee:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf0:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bf2:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf4:	6623      	str	r3, [r4, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bf6:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bf8:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8005bfa:	3a0c      	subs	r2, #12
 8005bfc:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8005bfe:	e783      	b.n	8005b08 <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c02:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c06:	2201      	movs	r2, #1
 8005c08:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0c:	6821      	ldr	r1, [r4, #0]
 8005c0e:	4d45      	ldr	r5, [pc, #276]	; (8005d24 <UART_CheckIdleState+0x298>)
 8005c10:	680b      	ldr	r3, [r1, #0]
 8005c12:	402b      	ands	r3, r5
 8005c14:	600b      	str	r3, [r1, #0]
 8005c16:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c22:	6821      	ldr	r1, [r4, #0]
 8005c24:	688b      	ldr	r3, [r1, #8]
 8005c26:	4393      	bics	r3, r2
 8005c28:	608b      	str	r3, [r1, #8]
 8005c2a:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d10a      	bne.n	8005c4a <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c34:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3c:	2010      	movs	r0, #16
 8005c3e:	6822      	ldr	r2, [r4, #0]
 8005c40:	6813      	ldr	r3, [r2, #0]
 8005c42:	4383      	bics	r3, r0
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c4e:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c50:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c52:	2300      	movs	r3, #0
 8005c54:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8005c56:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c58:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8005c5a:	3258      	adds	r2, #88	; 0x58
 8005c5c:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8005c5e:	e753      	b.n	8005b08 <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c60:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c62:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c66:	2201      	movs	r2, #1
 8005c68:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c6c:	6821      	ldr	r1, [r4, #0]
 8005c6e:	4d2d      	ldr	r5, [pc, #180]	; (8005d24 <UART_CheckIdleState+0x298>)
 8005c70:	680b      	ldr	r3, [r1, #0]
 8005c72:	402b      	ands	r3, r5
 8005c74:	600b      	str	r3, [r1, #0]
 8005c76:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c7a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c82:	6821      	ldr	r1, [r4, #0]
 8005c84:	688b      	ldr	r3, [r1, #8]
 8005c86:	4393      	bics	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]
 8005c8a:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10a      	bne.n	8005caa <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c94:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c98:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9c:	2010      	movs	r0, #16
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	6813      	ldr	r3, [r2, #0]
 8005ca2:	4383      	bics	r3, r0
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cae:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb2:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cb4:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8005cb8:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cba:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8005cbc:	3a0c      	subs	r2, #12
 8005cbe:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8005cc0:	e752      	b.n	8005b68 <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cce:	6821      	ldr	r1, [r4, #0]
 8005cd0:	4d14      	ldr	r5, [pc, #80]	; (8005d24 <UART_CheckIdleState+0x298>)
 8005cd2:	680b      	ldr	r3, [r1, #0]
 8005cd4:	402b      	ands	r3, r5
 8005cd6:	600b      	str	r3, [r1, #0]
 8005cd8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cdc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce4:	6821      	ldr	r1, [r4, #0]
 8005ce6:	688b      	ldr	r3, [r1, #8]
 8005ce8:	4393      	bics	r3, r2
 8005cea:	608b      	str	r3, [r1, #8]
 8005cec:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d10a      	bne.n	8005d0c <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cfa:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfe:	2010      	movs	r0, #16
 8005d00:	6822      	ldr	r2, [r4, #0]
 8005d02:	6813      	ldr	r3, [r2, #0]
 8005d04:	4383      	bics	r3, r0
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d10:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d12:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d14:	2300      	movs	r3, #0
 8005d16:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8005d18:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d1a:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8005d1c:	3258      	adds	r2, #88	; 0x58
 8005d1e:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8005d20:	e722      	b.n	8005b68 <UART_CheckIdleState+0xdc>
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	fffffedf 	.word	0xfffffedf

08005d28 <HAL_UART_Init>:
{
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005d2c:	d100      	bne.n	8005d30 <HAL_UART_Init+0x8>
 8005d2e:	e076      	b.n	8005e1e <HAL_UART_Init+0xf6>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005d30:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d067      	beq.n	8005e06 <HAL_UART_Init+0xde>
  huart->gState = HAL_UART_STATE_BUSY;
 8005d36:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005d38:	2101      	movs	r1, #1
 8005d3a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005d3c:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8005d3e:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d40:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8005d42:	438b      	bics	r3, r1
 8005d44:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d46:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d48:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d4a:	432b      	orrs	r3, r5
 8005d4c:	6965      	ldr	r5, [r4, #20]
 8005d4e:	69e1      	ldr	r1, [r4, #28]
 8005d50:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d52:	4d49      	ldr	r5, [pc, #292]	; (8005e78 <HAL_UART_Init+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d54:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d56:	4028      	ands	r0, r5
 8005d58:	4303      	orrs	r3, r0
 8005d5a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d5c:	6853      	ldr	r3, [r2, #4]
 8005d5e:	4847      	ldr	r0, [pc, #284]	; (8005e7c <HAL_UART_Init+0x154>)
  tmpreg |= huart->Init.OneBitSampling;
 8005d60:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d62:	4003      	ands	r3, r0
 8005d64:	68e0      	ldr	r0, [r4, #12]
 8005d66:	4303      	orrs	r3, r0
 8005d68:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d6a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d6c:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8005d6e:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d70:	4d43      	ldr	r5, [pc, #268]	; (8005e80 <HAL_UART_Init+0x158>)
 8005d72:	4028      	ands	r0, r5
 8005d74:	4303      	orrs	r3, r0
 8005d76:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d78:	4b42      	ldr	r3, [pc, #264]	; (8005e84 <HAL_UART_Init+0x15c>)
 8005d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	4013      	ands	r3, r2
 8005d80:	3b01      	subs	r3, #1
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d91f      	bls.n	8005dc6 <HAL_UART_Init+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	4299      	cmp	r1, r3
 8005d8c:	d100      	bne.n	8005d90 <HAL_UART_Init+0x68>
 8005d8e:	e070      	b.n	8005e72 <HAL_UART_Init+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7ff face 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d124      	bne.n	8005de2 <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005d9c:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d135      	bne.n	8005e10 <HAL_UART_Init+0xe8>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	4938      	ldr	r1, [pc, #224]	; (8005e88 <HAL_UART_Init+0x160>)
 8005da8:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005daa:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dac:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dae:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	438a      	bics	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	3929      	subs	r1, #41	; 0x29
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005dc0:	f7ff fe64 	bl	8005a8c <UART_CheckIdleState>
 8005dc4:	e01b      	b.n	8005dfe <HAL_UART_Init+0xd6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc6:	2080      	movs	r0, #128	; 0x80
 8005dc8:	4a30      	ldr	r2, [pc, #192]	; (8005e8c <HAL_UART_Init+0x164>)
 8005dca:	0200      	lsls	r0, r0, #8
 8005dcc:	5cd3      	ldrb	r3, [r2, r3]
 8005dce:	4281      	cmp	r1, r0
 8005dd0:	d027      	beq.n	8005e22 <HAL_UART_Init+0xfa>
    switch (clocksource)
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d044      	beq.n	8005e60 <HAL_UART_Init+0x138>
 8005dd6:	d813      	bhi.n	8005e00 <HAL_UART_Init+0xd8>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0d9      	beq.n	8005d90 <HAL_UART_Init+0x68>
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d10a      	bne.n	8005df6 <HAL_UART_Init+0xce>
        pclk = (uint32_t) HSI_VALUE;
 8005de0:	482b      	ldr	r0, [pc, #172]	; (8005e90 <HAL_UART_Init+0x168>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005de2:	6861      	ldr	r1, [r4, #4]
 8005de4:	084b      	lsrs	r3, r1, #1
 8005de6:	1818      	adds	r0, r3, r0
 8005de8:	f7fa f98e 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dec:	0002      	movs	r2, r0
 8005dee:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <HAL_UART_Init+0x16c>)
 8005df0:	3a10      	subs	r2, #16
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d910      	bls.n	8005e18 <HAL_UART_Init+0xf0>
  huart->RxISR = NULL;
 8005df6:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005df8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005dfa:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005dfc:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
    switch (clocksource)
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d0ee      	beq.n	8005de2 <HAL_UART_Init+0xba>
 8005e04:	e7f7      	b.n	8005df6 <HAL_UART_Init+0xce>
    huart->Lock = HAL_UNLOCKED;
 8005e06:	2278      	movs	r2, #120	; 0x78
 8005e08:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8005e0a:	f7fe fa59 	bl	80042c0 <HAL_UART_MspInit>
 8005e0e:	e792      	b.n	8005d36 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8005e10:	0020      	movs	r0, r4
 8005e12:	f7ff fdd3 	bl	80059bc <UART_AdvFeatureConfig>
 8005e16:	e7c5      	b.n	8005da4 <HAL_UART_Init+0x7c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	60d8      	str	r0, [r3, #12]
  return ret;
 8005e1c:	e7bc      	b.n	8005d98 <HAL_UART_Init+0x70>
    return HAL_ERROR;
 8005e1e:	2001      	movs	r0, #1
 8005e20:	e7ed      	b.n	8005dfe <HAL_UART_Init+0xd6>
    switch (clocksource)
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d01f      	beq.n	8005e66 <HAL_UART_Init+0x13e>
 8005e26:	d816      	bhi.n	8005e56 <HAL_UART_Init+0x12e>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d022      	beq.n	8005e72 <HAL_UART_Init+0x14a>
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d1e2      	bne.n	8005df6 <HAL_UART_Init+0xce>
 8005e30:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <HAL_UART_Init+0x170>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e32:	6861      	ldr	r1, [r4, #4]
 8005e34:	0848      	lsrs	r0, r1, #1
 8005e36:	18c0      	adds	r0, r0, r3
 8005e38:	f7fa f966 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e3c:	0002      	movs	r2, r0
 8005e3e:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <HAL_UART_Init+0x16c>)
 8005e40:	3a10      	subs	r2, #16
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d8d7      	bhi.n	8005df6 <HAL_UART_Init+0xce>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e46:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <HAL_UART_Init+0x174>)
        huart->Instance->BRR = brrtemp;
 8005e48:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e4a:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e4c:	0700      	lsls	r0, r0, #28
 8005e4e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8005e50:	4303      	orrs	r3, r0
 8005e52:	60d3      	str	r3, [r2, #12]
  return ret;
 8005e54:	e7a0      	b.n	8005d98 <HAL_UART_Init+0x70>
    switch (clocksource)
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d1cd      	bne.n	8005df6 <HAL_UART_Init+0xce>
 8005e5a:	2380      	movs	r3, #128	; 0x80
 8005e5c:	025b      	lsls	r3, r3, #9
 8005e5e:	e7e8      	b.n	8005e32 <HAL_UART_Init+0x10a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e60:	f7ff fa36 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
        break;
 8005e64:	e796      	b.n	8005d94 <HAL_UART_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e66:	f7ff fa33 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e6a:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1e0      	bne.n	8005e32 <HAL_UART_Init+0x10a>
 8005e70:	e792      	b.n	8005d98 <HAL_UART_Init+0x70>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e72:	f7ff fa5d 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
        break;
 8005e76:	e7f8      	b.n	8005e6a <HAL_UART_Init+0x142>
 8005e78:	ffff69f3 	.word	0xffff69f3
 8005e7c:	ffffcfff 	.word	0xffffcfff
 8005e80:	fffff4ff 	.word	0xfffff4ff
 8005e84:	40021000 	.word	0x40021000
 8005e88:	ffffb7ff 	.word	0xffffb7ff
 8005e8c:	08006e54 	.word	0x08006e54
 8005e90:	007a1200 	.word	0x007a1200
 8005e94:	0000ffef 	.word	0x0000ffef
 8005e98:	00f42400 	.word	0x00f42400
 8005e9c:	0000fff0 	.word	0x0000fff0

08005ea0 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volt format
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volt format
  */
__weak uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle)
{
 8005ea0:	0003      	movs	r3, r0
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8005ea2:	88c0      	ldrh	r0, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005ea4:	885b      	ldrh	r3, [r3, #2]
 8005ea6:	4358      	muls	r0, r3
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
 8005ea8:	0c00      	lsrs	r0, r0, #16
}
 8005eaa:	4770      	bx	lr

08005eac <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8005eac:	b530      	push	{r4, r5, lr}
 8005eae:	b20b      	sxth	r3, r1
 8005eb0:	1409      	asrs	r1, r1, #16
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8005eb2:	8802      	ldrh	r2, [r0, #0]

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005eb4:	000c      	movs	r4, r1
    square_limit = maxModule * maxModule;
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005eb6:	8845      	ldrh	r5, [r0, #2]
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8005eb8:	0018      	movs	r0, r3
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005eba:	434c      	muls	r4, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8005ebc:	4358      	muls	r0, r3
    square_limit = maxModule * maxModule;
 8005ebe:	4352      	muls	r2, r2
    square_sum = square_q + square_d;
 8005ec0:	1900      	adds	r0, r0, r4
{
 8005ec2:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 8005ec4:	4282      	cmp	r2, r0
 8005ec6:	da0f      	bge.n	8005ee8 <Circle_Limitation+0x3c>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005ec8:	0028      	movs	r0, r5
 8005eca:	436d      	muls	r5, r5
    {
      if (square_d <= vd_square_limit)
 8005ecc:	42ac      	cmp	r4, r5
 8005ece:	dc11      	bgt.n	8005ef4 <Circle_Limitation+0x48>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 8005ed0:	1b12      	subs	r2, r2, r4
 8005ed2:	17d4      	asrs	r4, r2, #31
 8005ed4:	0324      	lsls	r4, r4, #12
 8005ed6:	0b24      	lsrs	r4, r4, #12
 8005ed8:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8005eda:	4812      	ldr	r0, [pc, #72]	; (8005f24 <Circle_Limitation+0x78>)
        square_temp = (square_limit - square_d) / 1048576;
 8005edc:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8005ede:	0052      	lsls	r2, r2, #1
 8005ee0:	5a12      	ldrh	r2, [r2, r0]
#else
        square_temp = square_limit - square_d;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	db19      	blt.n	8005f1a <Circle_Limitation+0x6e>
        else
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
 8005ee6:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8005ee8:	0418      	lsls	r0, r3, #16
 8005eea:	0409      	lsls	r1, r1, #16
 8005eec:	0c00      	lsrs	r0, r0, #16
 8005eee:	4308      	orrs	r0, r1
}
 8005ef0:	b005      	add	sp, #20
 8005ef2:	bd30      	pop	{r4, r5, pc}
        if (Vqd.d < 0)
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	db13      	blt.n	8005f20 <Circle_Limitation+0x74>
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8005ef8:	1b52      	subs	r2, r2, r5
 8005efa:	17d4      	asrs	r4, r2, #31
 8005efc:	0324      	lsls	r4, r4, #12
 8005efe:	0b24      	lsrs	r4, r4, #12
 8005f00:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8005f02:	4908      	ldr	r1, [pc, #32]	; (8005f24 <Circle_Limitation+0x78>)
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8005f04:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8005f06:	0052      	lsls	r2, r2, #1
 8005f08:	5a52      	ldrh	r2, [r2, r1]
        if (Vqd.q < 0)
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	db02      	blt.n	8005f14 <Circle_Limitation+0x68>
      local_vqd.d = (int16_t)new_d;
 8005f0e:	b201      	sxth	r1, r0
      local_vqd.q = (int16_t)new_q;
 8005f10:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
 8005f12:	e7e9      	b.n	8005ee8 <Circle_Limitation+0x3c>
          new_q = - new_q;
 8005f14:	4252      	negs	r2, r2
      local_vqd.d = (int16_t)new_d;
 8005f16:	b201      	sxth	r1, r0
 8005f18:	e7fa      	b.n	8005f10 <Circle_Limitation+0x64>
          new_q = -new_q;
 8005f1a:	4252      	negs	r2, r2
      local_vqd.q = (int16_t)new_q;
 8005f1c:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
 8005f1e:	e7e3      	b.n	8005ee8 <Circle_Limitation+0x3c>
          new_d = -new_d;
 8005f20:	4240      	negs	r0, r0
 8005f22:	e7e9      	b.n	8005ef8 <Circle_Limitation+0x4c>
 8005f24:	08006e58 	.word	0x08006e58

08005f28 <EAC_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
 8005f28:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 8005f2a:	2300      	movs	r3, #0
    pHandle->pSTC = pSTC;
 8005f2c:	6001      	str	r1, [r0, #0]
    pHandle->pVSS = pVSS;
 8005f2e:	6042      	str	r2, [r0, #4]
    pHandle->EncAligned = false;
 8005f30:	81c3      	strh	r3, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8005f32:	4770      	bx	lr

08005f34 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 8005f34:	b510      	push	{r4, lr}
 8005f36:	0004      	movs	r4, r0
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	6840      	ldr	r0, [r0, #4]
 8005f3e:	f000 fbf5 	bl	800672c <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 8005f42:	2314      	movs	r3, #20
 8005f44:	5ee1      	ldrsh	r1, [r4, r3]
 8005f46:	6860      	ldr	r0, [r4, #4]
 8005f48:	f000 fbe4 	bl	8006714 <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	2104      	movs	r1, #4
 8005f50:	f000 fb46 	bl	80065e0 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 8005f54:	2200      	movs	r2, #0
 8005f56:	2100      	movs	r1, #0
 8005f58:	6820      	ldr	r0, [r4, #0]
 8005f5a:	f000 fb45 	bl	80065e8 <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8005f5e:	2312      	movs	r3, #18
 8005f60:	5ee1      	ldrsh	r1, [r4, r3]
 8005f62:	8ae2      	ldrh	r2, [r4, #22]
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	f000 fb3f 	bl	80065e8 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
    wAux /= 1000U;
 8005f6a:	21fa      	movs	r1, #250	; 0xfa
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8005f6c:	8ae3      	ldrh	r3, [r4, #22]
 8005f6e:	8a20      	ldrh	r0, [r4, #16]
    wAux /= 1000U;
 8005f70:	0089      	lsls	r1, r1, #2
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8005f72:	4358      	muls	r0, r3
    wAux /= 1000U;
 8005f74:	f7fa f8c8 	bl	8000108 <__udivsi3>
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8005f78:	3001      	adds	r0, #1
 8005f7a:	81a0      	strh	r0, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	46c0      	nop			; (mov r8, r8)

08005f80 <EAC_Exec>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval bool It returns true when the programmed alignment has been
  *         completed.
  */
__weak bool EAC_Exec(EncAlign_Handle_t *pHandle)
{
 8005f80:	b510      	push	{r4, lr}
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8005f82:	8983      	ldrh	r3, [r0, #12]
{
 8005f84:	0004      	movs	r4, r0
  bool retVal = true;
 8005f86:	2001      	movs	r0, #1
    if (pHandle->hRemainingTicks > 0U)
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <EAC_Exec+0x18>
    {
      pHandle->hRemainingTicks--;
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29b      	uxth	r3, r3
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 8005f90:	2000      	movs	r0, #0
      pHandle->hRemainingTicks--;
 8005f92:	81a3      	strh	r3, [r4, #12]
      if (0U == pHandle->hRemainingTicks)
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d000      	beq.n	8005f9a <EAC_Exec+0x1a>
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8005f98:	bd10      	pop	{r4, pc}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8005f9a:	2314      	movs	r3, #20
 8005f9c:	5ee0      	ldrsh	r0, [r4, r3]
 8005f9e:	7e21      	ldrb	r1, [r4, #24]
 8005fa0:	f7fa f93c 	bl	800021c <__divsi3>
 8005fa4:	b201      	sxth	r1, r0
 8005fa6:	68a0      	ldr	r0, [r4, #8]
 8005fa8:	f000 f93e 	bl	8006228 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8005fac:	2301      	movs	r3, #1
        retVal = true;
 8005fae:	2001      	movs	r0, #1
        pHandle->EncAligned = true;
 8005fb0:	73a3      	strb	r3, [r4, #14]
        retVal = true;
 8005fb2:	e7f1      	b.n	8005f98 <EAC_Exec+0x18>

08005fb4 <EAC_IsAligned>:
__weak bool EAC_IsAligned(EncAlign_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
 8005fb4:	7b80      	ldrb	r0, [r0, #14]
#endif
}
 8005fb6:	4770      	bx	lr

08005fb8 <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8005fb8:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8005fba:	4770      	bx	lr

08005fbc <ENC_Init>:
  WRITE_REG(TIMx->CNT, Counter);
 8005fbc:	2300      	movs	r3, #0
            required for the speed position sensor management using ENCODER
            sensors.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Init(ENCODER_Handle_t *pHandle)
{
 8005fbe:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8005fc0:	6a05      	ldr	r5, [r0, #32]
{
 8005fc2:	0004      	movs	r4, r0
 8005fc4:	626b      	str	r3, [r5, #36]	; 0x24
#endif
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8005fc6:	336e      	adds	r3, #110	; 0x6e
 8005fc8:	5ac1      	ldrh	r1, [r0, r3]
 8005fca:	2001      	movs	r0, #1
 8005fcc:	4240      	negs	r0, r0
 8005fce:	f7fa f89b 	bl	8000108 <__udivsi3>
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005fd2:	236c      	movs	r3, #108	; 0x6c
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005fd4:	21f0      	movs	r1, #240	; 0xf0
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8005fd6:	66a0      	str	r0, [r4, #104]	; 0x68
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005fd8:	5ae2      	ldrh	r2, [r4, r3]
 8005fda:	0093      	lsls	r3, r2, #2
 8005fdc:	189b      	adds	r3, r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8005fe2:	69aa      	ldr	r2, [r5, #24]
 8005fe4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005fe6:	438a      	bics	r2, r1
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	4313      	orrs	r3, r2
 8005fec:	61ab      	str	r3, [r5, #24]
 8005fee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005ff0:	69aa      	ldr	r2, [r5, #24]
 8005ff2:	490d      	ldr	r1, [pc, #52]	; (8006028 <ENC_Init+0x6c>)
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	400a      	ands	r2, r1
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	61ab      	str	r3, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005ffe:	2302      	movs	r3, #2
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006000:	2201      	movs	r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006002:	425b      	negs	r3, r3
 8006004:	612b      	str	r3, [r5, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006006:	68eb      	ldr	r3, [r5, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	4313      	orrs	r3, r2
 8006010:	602b      	str	r3, [r5, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8006012:	2374      	movs	r3, #116	; 0x74
 8006014:	5ce2      	ldrb	r2, [r4, r3]

    for (index = 0U; index < bufferSize; index++)
 8006016:	2a00      	cmp	r2, #0
 8006018:	d005      	beq.n	8006026 <ENC_Init+0x6a>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 800601a:	0020      	movs	r0, r4
 800601c:	2100      	movs	r1, #0
 800601e:	0092      	lsls	r2, r2, #2
 8006020:	3028      	adds	r0, #40	; 0x28
 8006022:	f000 fbd1 	bl	80067c8 <memset>
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	ffff0fff 	.word	0xffff0fff

0800602c <ENC_Clear>:
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 800602c:	2374      	movs	r3, #116	; 0x74
{
 800602e:	b510      	push	{r4, lr}
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8006030:	5cc2      	ldrb	r2, [r0, r3]
{
 8006032:	0004      	movs	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8006034:	2a00      	cmp	r2, #0
 8006036:	d004      	beq.n	8006042 <ENC_Clear+0x16>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8006038:	2100      	movs	r1, #0
 800603a:	0092      	lsls	r2, r2, #2
 800603c:	3028      	adds	r0, #40	; 0x28
 800603e:	f000 fbc3 	bl	80067c8 <memset>
    }
    pHandle->SensorIsReliable = true;
 8006042:	2375      	movs	r3, #117	; 0x75
 8006044:	2201      	movs	r2, #1
 8006046:	54e2      	strb	r2, [r4, r3]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006048:	bd10      	pop	{r4, pc}
 800604a:	46c0      	nop			; (mov r8, r8)

0800604c <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 800604c:	0002      	movs	r2, r0
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 800604e:	6a03      	ldr	r3, [r0, #32]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006050:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006052:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006054:	0409      	lsls	r1, r1, #16
 8006056:	0c09      	lsrs	r1, r1, #16
 8006058:	434b      	muls	r3, r1
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 800605a:	2006      	movs	r0, #6
 800605c:	5e11      	ldrsh	r1, [r2, r0]
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800605e:	141b      	asrs	r3, r3, #16

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006060:	7850      	ldrb	r0, [r2, #1]
    pHandle->_Super.hMecAngle = mecAngle;
 8006062:	80d3      	strh	r3, [r2, #6]
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006064:	b29b      	uxth	r3, r3
 8006066:	4358      	muls	r0, r3

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8006068:	1a5b      	subs	r3, r3, r1
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 800606a:	6891      	ldr	r1, [r2, #8]
 800606c:	b21b      	sxth	r3, r3
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 800606e:	b200      	sxth	r0, r0
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006070:	18cb      	adds	r3, r1, r3
    pHandle->_Super.hElAngle = elAngle;
 8006072:	8090      	strh	r0, [r2, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006074:	6093      	str	r3, [r2, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8006076:	4770      	bx	lr

08006078 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	4647      	mov	r7, r8
 800607c:	46ce      	mov	lr, r9
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 800607e:	2274      	movs	r2, #116	; 0x74
{
 8006080:	b580      	push	{r7, lr}
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006082:	6a03      	ldr	r3, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8006084:	5c85      	ldrb	r5, [r0, r2]
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 8006086:	3a04      	subs	r2, #4
 8006088:	6a5e      	ldr	r6, [r3, #36]	; 0x24
{
 800608a:	0004      	movs	r4, r0
 800608c:	000f      	movs	r7, r1
    OverflowCntSample = pHandle->TimerOverflowNb;
 800608e:	5a81      	ldrh	r1, [r0, r2]
    pHandle->TimerOverflowNb = 0;
 8006090:	2000      	movs	r0, #0
 8006092:	52a0      	strh	r0, [r4, r2]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	2310      	movs	r3, #16
 8006098:	4013      	ands	r3, r2
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
    {
      pHandle->TimerOverflowError = true;
 800609a:	227d      	movs	r2, #125	; 0x7d
    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 800609c:	2901      	cmp	r1, #1
 800609e:	d800      	bhi.n	80060a2 <ENC_CalcAvrgMecSpeedUnit+0x2a>
 80060a0:	e0b6      	b.n	8006210 <ENC_CalcAvrgMecSpeedUnit+0x198>
      pHandle->TimerOverflowError = true;
 80060a2:	2101      	movs	r1, #1
 80060a4:	54a1      	strb	r1, [r4, r2]
 80060a6:	3a7c      	subs	r2, #124	; 0x7c
 80060a8:	4690      	mov	r8, r2
    {
      /* Nothing to do */
    }

    /* Calculation of delta angle */
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d100      	bne.n	80060b0 <ENC_CalcAvrgMecSpeedUnit+0x38>
 80060ae:	e091      	b.n	80061d4 <ENC_CalcAvrgMecSpeedUnit+0x15c>
    {
      /* Encoder timer down-counting */
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 80060b0:	2372      	movs	r3, #114	; 0x72
 80060b2:	5ae0      	ldrh	r0, [r4, r3]
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80060b4:	3b04      	subs	r3, #4
 80060b6:	5ae1      	ldrh	r1, [r4, r3]
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80060b8:	330e      	adds	r3, #14
 80060ba:	5ce3      	ldrb	r3, [r4, r3]
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 80060bc:	1a32      	subs	r2, r6, r0
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80060be:	330a      	adds	r3, #10
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4699      	mov	r9, r3
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80060c4:	2300      	movs	r3, #0
 80060c6:	469c      	mov	ip, r3
 80060c8:	42b0      	cmp	r0, r6
 80060ca:	d200      	bcs.n	80060ce <ENC_CalcAvrgMecSpeedUnit+0x56>
 80060cc:	e099      	b.n	8006202 <ENC_CalcAvrgMecSpeedUnit+0x18a>
 80060ce:	4663      	mov	r3, ip
 80060d0:	1ad2      	subs	r2, r2, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80060d2:	464b      	mov	r3, r9
 80060d4:	511a      	str	r2, [r3, r4]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
    }


    /* Computes & returns average mechanical speed */
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	d100      	bne.n	80060dc <ENC_CalcAvrgMecSpeedUnit+0x64>
 80060da:	e08f      	b.n	80061fc <ENC_CalcAvrgMecSpeedUnit+0x184>
    {
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80060dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80060de:	2d01      	cmp	r5, #1
 80060e0:	d039      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80060e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80060e4:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80060e6:	2d02      	cmp	r5, #2
 80060e8:	d035      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80060ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80060ec:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80060ee:	2d03      	cmp	r5, #3
 80060f0:	d031      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80060f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80060f4:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80060f6:	2d04      	cmp	r5, #4
 80060f8:	d02d      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80060fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060fc:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80060fe:	2d05      	cmp	r5, #5
 8006100:	d029      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006102:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006104:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006106:	2d06      	cmp	r5, #6
 8006108:	d025      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800610a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800610c:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800610e:	2d07      	cmp	r5, #7
 8006110:	d021      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006112:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006114:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006116:	2d08      	cmp	r5, #8
 8006118:	d01d      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800611a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800611c:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800611e:	2d09      	cmp	r5, #9
 8006120:	d019      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006122:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006124:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006126:	2d0a      	cmp	r5, #10
 8006128:	d015      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800612a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800612c:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800612e:	2d0b      	cmp	r5, #11
 8006130:	d011      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006132:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006134:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006136:	2d0c      	cmp	r5, #12
 8006138:	d00d      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800613a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800613c:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800613e:	2d0d      	cmp	r5, #13
 8006140:	d009      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006142:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006144:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006146:	2d0e      	cmp	r5, #14
 8006148:	d005      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800614a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800614c:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800614e:	2d0f      	cmp	r5, #15
 8006150:	d001      	beq.n	8006156 <ENC_CalcAvrgMecSpeedUnit+0xde>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006154:	189b      	adds	r3, r3, r2
    }
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8006156:	4369      	muls	r1, r5
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8006158:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800615a:	4358      	muls	r0, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 800615c:	2900      	cmp	r1, #0
 800615e:	d001      	beq.n	8006164 <ENC_CalcAvrgMecSpeedUnit+0xec>
 8006160:	f7fa f85c 	bl	800021c <__divsi3>

    *pMecSpeedUnit = (int16_t)wtemp1;
 8006164:	b203      	sxth	r3, r0

    /* Computes & stores average mechanical acceleration */
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8006166:	b280      	uxth	r0, r0
    *pMecSpeedUnit = (int16_t)wtemp1;
 8006168:	803b      	strh	r3, [r7, #0]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 800616a:	89a2      	ldrh	r2, [r4, #12]

    /* Stores average mechanical speed */
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 800616c:	81a3      	strh	r3, [r4, #12]

    /* Computes & stores the instantaneous electrical speed [dpp], var wtemp1 */
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800616e:	237c      	movs	r3, #124	; 0x7c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8006170:	1a80      	subs	r0, r0, r2
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006172:	226c      	movs	r2, #108	; 0x6c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8006174:	8260      	strh	r0, [r4, #18]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006176:	5ce3      	ldrb	r3, [r4, r3]
 8006178:	5aa2      	ldrh	r2, [r4, r2]
 800617a:	330a      	adds	r3, #10
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	591b      	ldr	r3, [r3, r4]
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8006180:	7860      	ldrb	r0, [r4, #1]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006182:	4353      	muls	r3, r2
 8006184:	4358      	muls	r0, r3
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8006186:	236e      	movs	r3, #110	; 0x6e
 8006188:	5ae1      	ldrh	r1, [r4, r3]
 800618a:	f7fa f847 	bl	800021c <__divsi3>
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 800618e:	69e3      	ldr	r3, [r4, #28]
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8006190:	8b61      	ldrh	r1, [r4, #26]
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8006192:	4358      	muls	r0, r3
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8006194:	f7fa f842 	bl	800021c <__divsi3>

    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;

    /* Last captured value update */
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8006198:	4b21      	ldr	r3, [pc, #132]	; (8006220 <ENC_CalcAvrgMecSpeedUnit+0x1a8>)
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 800619a:	81e0      	strh	r0, [r4, #14]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 800619c:	429e      	cmp	r6, r3
 800619e:	d900      	bls.n	80061a2 <ENC_CalcAvrgMecSpeedUnit+0x12a>
 80061a0:	4e20      	ldr	r6, [pc, #128]	; (8006224 <ENC_CalcAvrgMecSpeedUnit+0x1ac>)
 80061a2:	2372      	movs	r3, #114	; 0x72
    /*Buffer index update*/
    pHandle->DeltaCapturesIndex++;
 80061a4:	227c      	movs	r2, #124	; 0x7c
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 80061a6:	52e6      	strh	r6, [r4, r3]
    pHandle->DeltaCapturesIndex++;
 80061a8:	5ca3      	ldrb	r3, [r4, r2]
 80061aa:	3301      	adds	r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	54a3      	strb	r3, [r4, r2]

    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 80061b0:	5ca3      	ldrb	r3, [r4, r2]
 80061b2:	42ab      	cmp	r3, r5
 80061b4:	d301      	bcc.n	80061ba <ENC_CalcAvrgMecSpeedUnit+0x142>
    {
      pHandle->DeltaCapturesIndex = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	54a3      	strb	r3, [r4, r2]
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 80061ba:	4643      	mov	r3, r8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d02a      	beq.n	8006216 <ENC_CalcAvrgMecSpeedUnit+0x19e>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
 80061c0:	2375      	movs	r3, #117	; 0x75
 80061c2:	2200      	movs	r2, #0
      bReliability = false;
 80061c4:	2000      	movs	r0, #0
      pHandle->SensorIsReliable = false;
 80061c6:	54e2      	strb	r2, [r4, r3]
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80061c8:	78e3      	ldrb	r3, [r4, #3]
 80061ca:	7023      	strb	r3, [r4, #0]
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 80061cc:	bcc0      	pop	{r6, r7}
 80061ce:	46b9      	mov	r9, r7
 80061d0:	46b0      	mov	r8, r6
 80061d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      OverflowCntSample = (CntCapture < pHandle->PreviousCapture) ? 1 : 0;
 80061d4:	2372      	movs	r3, #114	; 0x72
 80061d6:	5ae0      	ldrh	r0, [r4, r3]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80061d8:	3b04      	subs	r3, #4
 80061da:	5ae1      	ldrh	r1, [r4, r3]
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80061dc:	330e      	adds	r3, #14
 80061de:	5ce3      	ldrb	r3, [r4, r3]
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 80061e0:	1a32      	subs	r2, r6, r0
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80061e2:	330a      	adds	r3, #10
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4699      	mov	r9, r3
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80061e8:	2300      	movs	r3, #0
 80061ea:	469c      	mov	ip, r3
 80061ec:	42b0      	cmp	r0, r6
 80061ee:	d80a      	bhi.n	8006206 <ENC_CalcAvrgMecSpeedUnit+0x18e>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80061f0:	464b      	mov	r3, r9
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80061f2:	4462      	add	r2, ip
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80061f4:	511a      	str	r2, [r3, r4]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80061f6:	2d00      	cmp	r5, #0
 80061f8:	d000      	beq.n	80061fc <ENC_CalcAvrgMecSpeedUnit+0x184>
 80061fa:	e76f      	b.n	80060dc <ENC_CalcAvrgMecSpeedUnit+0x64>
 80061fc:	2000      	movs	r0, #0
 80061fe:	2300      	movs	r3, #0
 8006200:	e7b2      	b.n	8006168 <ENC_CalcAvrgMecSpeedUnit+0xf0>
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8006202:	468c      	mov	ip, r1
 8006204:	e763      	b.n	80060ce <ENC_CalcAvrgMecSpeedUnit+0x56>
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8006206:	468c      	mov	ip, r1
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006208:	464b      	mov	r3, r9
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800620a:	4462      	add	r2, ip
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800620c:	511a      	str	r2, [r3, r4]
 800620e:	e7f2      	b.n	80061f6 <ENC_CalcAvrgMecSpeedUnit+0x17e>
    if (pHandle->TimerOverflowError)
 8006210:	5ca2      	ldrb	r2, [r4, r2]
 8006212:	4690      	mov	r8, r2
 8006214:	e749      	b.n	80060aa <ENC_CalcAvrgMecSpeedUnit+0x32>
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8006216:	0039      	movs	r1, r7
 8006218:	0020      	movs	r0, r4
 800621a:	f000 f97d 	bl	8006518 <SPD_IsMecSpeedReliable>
 800621e:	e7d5      	b.n	80061cc <ENC_CalcAvrgMecSpeedUnit+0x154>
 8006220:	0000fffe 	.word	0x0000fffe
 8006224:	0000ffff 	.word	0x0000ffff

08006228 <ENC_SetMecAngle>:
  *         As a consequence, timer counter is computed and updated.
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  hMecAngle new value of rotor mechanical angle in [s16degree](measurement_units.md) format.
  */
__weak void ENC_SetMecAngle(ENCODER_Handle_t *pHandle, int16_t hMecAngle)
{
 8006228:	0003      	movs	r3, r0
 800622a:	b510      	push	{r4, lr}

    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
 800622c:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 800622e:	785a      	ldrb	r2, [r3, #1]
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006230:	6a04      	ldr	r4, [r0, #32]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8006232:	b288      	uxth	r0, r1
 8006234:	4342      	muls	r2, r0
 8006236:	809a      	strh	r2, [r3, #4]
    if (localhMecAngle < 0)
 8006238:	2900      	cmp	r1, #0
 800623a:	da01      	bge.n	8006240 <ENC_SetMecAngle+0x18>
    {
      localhMecAngle *= -1;
      hMecAngleuint = ((uint16_t)65535 - ((uint16_t)localhMecAngle));
 800623c:	3801      	subs	r0, #1
 800623e:	b280      	uxth	r0, r0
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8006240:	226e      	movs	r2, #110	; 0x6e
 8006242:	5a9b      	ldrh	r3, [r3, r2]
 8006244:	4902      	ldr	r1, [pc, #8]	; (8006250 <ENC_SetMecAngle+0x28>)
 8006246:	4358      	muls	r0, r3
 8006248:	f7f9 ff5e 	bl	8000108 <__udivsi3>

    TIMx->CNT = (uint16_t)hAngleCounts;
 800624c:	6260      	str	r0, [r4, #36]	; 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 800624e:	bd10      	pop	{r4, pc}
 8006250:	0000ffff 	.word	0x0000ffff

08006254 <ENC_IRQHandler>:
{
  ENCODER_Handle_t *pHandle = (ENCODER_Handle_t *)pHandleVoid; //cstat !MISRAC2012-Rule-11.5

  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;
 8006254:	2270      	movs	r2, #112	; 0x70
 8006256:	5a83      	ldrh	r3, [r0, r2]
 8006258:	3301      	adds	r3, #1
 800625a:	b29b      	uxth	r3, r3
 800625c:	5283      	strh	r3, [r0, r2]

  return (MC_NULL);
}
 800625e:	2000      	movs	r0, #0
 8006260:	4770      	bx	lr
 8006262:	46c0      	nop			; (mov r8, r8)

08006264 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8006268:	4770      	bx	lr
 800626a:	46c0      	nop			; (mov r8, r8)

0800626c <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 800626c:	7803      	ldrb	r3, [r0, #0]
{
 800626e:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <NTC_Init+0x12>
      pHandle->hFaultState = MC_NO_ERROR;
 8006274:	2300      	movs	r3, #0
 8006276:	8103      	strh	r3, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006278:	8883      	ldrh	r3, [r0, #4]
 800627a:	8043      	strh	r3, [r0, #2]
}
 800627c:	bd10      	pop	{r4, pc}
      NTC_Clear(pHandle);
 800627e:	f7ff fff1 	bl	8006264 <NTC_Clear>
 8006282:	e7fb      	b.n	800627c <NTC_Init+0x10>

08006284 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8006284:	7803      	ldrb	r3, [r0, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
      wTemp -= ((int32_t)pHandle->wV0);
 800628a:	6942      	ldr	r2, [r0, #20]
      wTemp = (int32_t)pHandle->hAvTemp_d;
 800628c:	8843      	ldrh	r3, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 800628e:	1a9b      	subs	r3, r3, r2
      wTemp *= pHandle->hSensitivity;
 8006290:	2110      	movs	r1, #16
 8006292:	5e42      	ldrsh	r2, [r0, r1]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8006294:	8b00      	ldrh	r0, [r0, #24]
      wTemp *= pHandle->hSensitivity;
 8006296:	4353      	muls	r3, r2
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8006298:	141b      	asrs	r3, r3, #16
 800629a:	18c0      	adds	r0, r0, r3
    }
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
 800629c:	b200      	sxth	r0, r0
}
 800629e:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80062a0:	88c0      	ldrh	r0, [r0, #6]
 80062a2:	e7fb      	b.n	800629c <NTC_GetAvTemp_C+0x18>

080062a4 <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80062a4:	6803      	ldr	r3, [r0, #0]
 80062a6:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80062a8:	8c03      	ldrh	r3, [r0, #32]
 80062aa:	8443      	strh	r3, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80062b0:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80062b2:	4770      	bx	lr

080062b4 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80062b4:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80062b6:	4770      	bx	lr

080062b8 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80062b8:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80062ba:	4770      	bx	lr

080062bc <PID_GetKP>:
__weak int16_t PID_GetKP(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
 80062bc:	2304      	movs	r3, #4
 80062be:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80062c0:	4770      	bx	lr
 80062c2:	46c0      	nop			; (mov r8, r8)

080062c4 <PID_GetKI>:
__weak int16_t PID_GetKI(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
 80062c4:	2306      	movs	r3, #6
 80062c6:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80062c8:	4770      	bx	lr
 80062ca:	46c0      	nop			; (mov r8, r8)

080062cc <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80062cc:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80062ce:	4770      	bx	lr

080062d0 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 80062d0:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80062d2:	4770      	bx	lr

080062d4 <PID_GetKD>:
__weak int16_t PID_GetKD(PID_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
 80062d4:	2322      	movs	r3, #34	; 0x22
 80062d6:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80062d8:	4770      	bx	lr
 80062da:	46c0      	nop			; (mov r8, r8)

080062dc <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 80062dc:	0003      	movs	r3, r0
 80062de:	b570      	push	{r4, r5, r6, lr}
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80062e0:	2216      	movs	r2, #22
 80062e2:	5e9e      	ldrsh	r6, [r3, r2]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80062e4:	2214      	movs	r2, #20
 80062e6:	5e80      	ldrsh	r0, [r0, r2]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 80062e8:	2406      	movs	r4, #6
 80062ea:	5f1d      	ldrsh	r5, [r3, r4]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80062ec:	2404      	movs	r4, #4
 80062ee:	5f1a      	ldrsh	r2, [r3, r4]
 80062f0:	2400      	movs	r4, #0
 80062f2:	434a      	muls	r2, r1
    if (0 == pHandle->hKiGain)
 80062f4:	2d00      	cmp	r5, #0
 80062f6:	d00b      	beq.n	8006310 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80062f8:	4369      	muls	r1, r5
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 80062fa:	689c      	ldr	r4, [r3, #8]

      if (wIntegral_sum_temp < 0)
 80062fc:	1865      	adds	r5, r4, r1
 80062fe:	d41b      	bmi.n	8006338 <PI_Controller+0x5c>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8006300:	4021      	ands	r1, r4
 8006302:	d424      	bmi.n	800634e <PI_Controller+0x72>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006304:	68dc      	ldr	r4, [r3, #12]
 8006306:	42ac      	cmp	r4, r5
 8006308:	db02      	blt.n	8006310 <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800630a:	691c      	ldr	r4, [r3, #16]
 800630c:	42ac      	cmp	r4, r5
 800630e:	dd1c      	ble.n	800634a <PI_Controller+0x6e>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8006310:	0025      	movs	r5, r4
 8006312:	8b99      	ldrh	r1, [r3, #28]
 8006314:	410a      	asrs	r2, r1
 8006316:	8bd9      	ldrh	r1, [r3, #30]
 8006318:	410d      	asrs	r5, r1
 800631a:	1952      	adds	r2, r2, r5
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 800631c:	4290      	cmp	r0, r2
 800631e:	da03      	bge.n	8006328 <PI_Controller+0x4c>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8006320:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8006322:	18a4      	adds	r4, r4, r2
 8006324:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8006326:	bd70      	pop	{r4, r5, r6, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8006328:	4296      	cmp	r6, r2
 800632a:	dd03      	ble.n	8006334 <PI_Controller+0x58>
      wDischarge = hLowerOutputLimit - wOutput_32;
 800632c:	1ab2      	subs	r2, r6, r2
 800632e:	0030      	movs	r0, r6
    pHandle->wIntegralTerm += wDischarge;
 8006330:	18a4      	adds	r4, r4, r2
 8006332:	e7f7      	b.n	8006324 <PI_Controller+0x48>
    returnValue = (int16_t)wOutput_32;
 8006334:	b210      	sxth	r0, r2
 8006336:	e7f5      	b.n	8006324 <PI_Controller+0x48>
        if (pHandle->wIntegralTerm > 0)
 8006338:	2c00      	cmp	r4, #0
 800633a:	dde3      	ble.n	8006304 <PI_Controller+0x28>
          if (wIntegral_Term > 0)
 800633c:	2900      	cmp	r1, #0
 800633e:	dde1      	ble.n	8006304 <PI_Controller+0x28>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006340:	68dc      	ldr	r4, [r3, #12]
 8006342:	4904      	ldr	r1, [pc, #16]	; (8006354 <PI_Controller+0x78>)
            wIntegral_sum_temp = INT32_MAX;
 8006344:	0025      	movs	r5, r4
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006346:	428c      	cmp	r4, r1
 8006348:	d1e2      	bne.n	8006310 <PI_Controller+0x34>
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800634a:	002c      	movs	r4, r5
 800634c:	e7e0      	b.n	8006310 <PI_Controller+0x34>
            wIntegral_sum_temp = -INT32_MAX;
 800634e:	4d02      	ldr	r5, [pc, #8]	; (8006358 <PI_Controller+0x7c>)
 8006350:	e7d8      	b.n	8006304 <PI_Controller+0x28>
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	7fffffff 	.word	0x7fffffff
 8006358:	80000001 	.word	0x80000001

0800635c <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 800635c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800635e:	6883      	ldr	r3, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8006360:	220c      	movs	r2, #12
 8006362:	5e99      	ldrsh	r1, [r3, r2]
 8006364:	2416      	movs	r4, #22
 8006366:	5f1a      	ldrsh	r2, [r3, r4]
 8006368:	434a      	muls	r2, r1
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800636a:	240e      	movs	r4, #14
 800636c:	5f19      	ldrsh	r1, [r3, r4]
 800636e:	2418      	movs	r4, #24
 8006370:	5f1b      	ldrsh	r3, [r3, r4]
 8006372:	434b      	muls	r3, r1
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8006374:	18d2      	adds	r2, r2, r3
    wAux /= 65536;

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006376:	2300      	movs	r3, #0
 8006378:	5ec1      	ldrsh	r1, [r0, r3]
    wAux /= 65536;
 800637a:	17d3      	asrs	r3, r2, #31
 800637c:	041b      	lsls	r3, r3, #16
 800637e:	0c1b      	lsrs	r3, r3, #16
 8006380:	189b      	adds	r3, r3, r2
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006382:	220f      	movs	r2, #15
    wAux /= 65536;
 8006384:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006386:	1a5b      	subs	r3, r3, r1
 8006388:	17dc      	asrs	r4, r3, #31
 800638a:	4022      	ands	r2, r4
 800638c:	18d3      	adds	r3, r2, r3
 800638e:	111b      	asrs	r3, r3, #4
 8006390:	185b      	adds	r3, r3, r1
 8006392:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8006394:	bd10      	pop	{r4, pc}
 8006396:	46c0      	nop			; (mov r8, r8)

08006398 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 800639c:	4770      	bx	lr
 800639e:	46c0      	nop			; (mov r8, r8)

080063a0 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 80063a0:	b570      	push	{r4, r5, r6, lr}
 80063a2:	0004      	movs	r4, r0
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80063a4:	2300      	movs	r3, #0
 80063a6:	5ec0      	ldrsh	r0, [r0, r3]
 80063a8:	f7fa f972 	bl	8000690 <__aeabi_i2f>
 80063ac:	1c06      	adds	r6, r0, #0
 80063ae:	68e0      	ldr	r0, [r4, #12]
 80063b0:	f7ff fd76 	bl	8005ea0 <VBS_GetAvBusVoltage_V>
 80063b4:	6861      	ldr	r1, [r4, #4]
 80063b6:	0005      	movs	r5, r0
 80063b8:	1c30      	adds	r0, r6, #0
 80063ba:	f7fa f81b 	bl	80003f4 <__aeabi_fmul>
 80063be:	1c04      	adds	r4, r0, #0
 80063c0:	0028      	movs	r0, r5
 80063c2:	f7fa f9b7 	bl	8000734 <__aeabi_ui2f>
 80063c6:	1c01      	adds	r1, r0, #0
 80063c8:	1c20      	adds	r0, r4, #0
 80063ca:	f7fa f813 	bl	80003f4 <__aeabi_fmul>

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 80063ce:	bd70      	pop	{r4, r5, r6, pc}

080063d0 <waitForPolarizationEnd>:
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
//cstat !MISRAC2012-Rule-8.13
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 80063d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80063d2:	2703      	movs	r7, #3
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80063d4:	3201      	adds	r2, #1
 80063d6:	0856      	lsrs	r6, r2, #1
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80063d8:	2502      	movs	r5, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80063da:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80063dc:	427f      	negs	r7, r7
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80063de:	0176      	lsls	r6, r6, #5
 80063e0:	6107      	str	r7, [r0, #16]
    while (*cnt < NB_CONVERSIONS)
 80063e2:	781c      	ldrb	r4, [r3, #0]
 80063e4:	2c0f      	cmp	r4, #15
 80063e6:	d80c      	bhi.n	8006402 <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80063e8:	6904      	ldr	r4, [r0, #16]
 80063ea:	4225      	tst	r5, r4
 80063ec:	d0f9      	beq.n	80063e2 <waitForPolarizationEnd+0x12>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80063ee:	3201      	adds	r2, #1
 80063f0:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80063f2:	6107      	str	r7, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80063f4:	4296      	cmp	r6, r2
 80063f6:	d8f4      	bhi.n	80063e2 <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 80063f8:	781c      	ldrb	r4, [r3, #0]
 80063fa:	2c0f      	cmp	r4, #15
 80063fc:	d8f1      	bhi.n	80063e2 <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 80063fe:	2301      	movs	r3, #1
 8006400:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8006402:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006404 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006404:	8a43      	ldrh	r3, [r0, #18]
 8006406:	8981      	ldrh	r1, [r0, #12]
{
 8006408:	b530      	push	{r4, r5, lr}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800640a:	18c9      	adds	r1, r1, r3
 800640c:	0849      	lsrs	r1, r1, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800640e:	8943      	ldrh	r3, [r0, #10]
 8006410:	040d      	lsls	r5, r1, #16
 8006412:	430d      	orrs	r5, r1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <RVBS_Clear+0x26>
 8006418:	2300      	movs	r3, #0
    {
      pHandle->aBuffer[index] = aux;
 800641a:	6944      	ldr	r4, [r0, #20]
 800641c:	005a      	lsls	r2, r3, #1
 800641e:	5311      	strh	r1, [r2, r4]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006420:	3301      	adds	r3, #1
 8006422:	8942      	ldrh	r2, [r0, #10]
 8006424:	b29b      	uxth	r3, r3
 8006426:	429a      	cmp	r2, r3
 8006428:	d8f8      	bhi.n	800641c <RVBS_Clear+0x18>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800642a:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800642c:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 800642e:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8006430:	bd30      	pop	{r4, r5, pc}
 8006432:	46c0      	nop			; (mov r8, r8)

08006434 <RVBS_Init>:
{
 8006434:	b510      	push	{r4, lr}
    RVBS_Clear(pHandle);
 8006436:	f7ff ffe5 	bl	8006404 <RVBS_Clear>
}
 800643a:	bd10      	pop	{r4, pc}

0800643c <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 800643c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800643e:	8982      	ldrh	r2, [r0, #12]
 8006440:	89c1      	ldrh	r1, [r0, #14]
{
 8006442:	0003      	movs	r3, r0
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006444:	428a      	cmp	r2, r1
 8006446:	d00d      	beq.n	8006464 <RVBS_CheckFaultState+0x28>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006448:	88c4      	ldrh	r4, [r0, #6]
 800644a:	8a40      	ldrh	r0, [r0, #18]
 800644c:	42a0      	cmp	r0, r4
 800644e:	d807      	bhi.n	8006460 <RVBS_CheckFaultState+0x24>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8006450:	7c18      	ldrb	r0, [r3, #16]
 8006452:	2800      	cmp	r0, #0
 8006454:	d10f      	bne.n	8006476 <RVBS_CheckFaultState+0x3a>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8006456:	42a1      	cmp	r1, r4
 8006458:	d913      	bls.n	8006482 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800645a:	2201      	movs	r2, #1
 800645c:	741a      	strb	r2, [r3, #16]
          fault = MC_NO_ERROR;
 800645e:	e000      	b.n	8006462 <RVBS_CheckFaultState+0x26>
        fault = MC_UNDER_VOLT;
 8006460:	2004      	movs	r0, #4
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8006462:	bd10      	pop	{r4, pc}
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006464:	88c0      	ldrh	r0, [r0, #6]
 8006466:	4282      	cmp	r2, r0
 8006468:	d30b      	bcc.n	8006482 <RVBS_CheckFaultState+0x46>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800646a:	8a5b      	ldrh	r3, [r3, #18]
 800646c:	4298      	cmp	r0, r3
 800646e:	4180      	sbcs	r0, r0
 8006470:	4240      	negs	r0, r0
 8006472:	0080      	lsls	r0, r0, #2
 8006474:	e7f5      	b.n	8006462 <RVBS_CheckFaultState+0x26>
          fault = MC_NO_ERROR;
 8006476:	2000      	movs	r0, #0
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006478:	42a2      	cmp	r2, r4
 800647a:	d2f2      	bcs.n	8006462 <RVBS_CheckFaultState+0x26>
          pHandle->OverVoltageHysteresisUpDir = false;
 800647c:	7418      	strb	r0, [r3, #16]
          fault = MC_OVER_VOLT;
 800647e:	3002      	adds	r0, #2
 8006480:	e7ef      	b.n	8006462 <RVBS_CheckFaultState+0x26>
        fault = MC_OVER_VOLT;
 8006482:	2002      	movs	r0, #2
 8006484:	e7ed      	b.n	8006462 <RVBS_CheckFaultState+0x26>
 8006486:	46c0      	nop			; (mov r8, r8)

08006488 <RVBS_CalcAvVbus>:
{
 8006488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648a:	46c6      	mov	lr, r8
    if (0xFFFFU == hAux)
 800648c:	4b17      	ldr	r3, [pc, #92]	; (80064ec <RVBS_CalcAvVbus+0x64>)
{
 800648e:	0004      	movs	r4, r0
 8006490:	000d      	movs	r5, r1
 8006492:	b500      	push	{lr}
    if (0xFFFFU == hAux)
 8006494:	4299      	cmp	r1, r3
 8006496:	d01d      	beq.n	80064d4 <RVBS_CalcAvVbus+0x4c>
      pHandle->aBuffer[pHandle->index] = hAux;
 8006498:	7e43      	ldrb	r3, [r0, #25]
 800649a:	6942      	ldr	r2, [r0, #20]
 800649c:	4698      	mov	r8, r3
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	5299      	strh	r1, [r3, r2]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80064a2:	7a87      	ldrb	r7, [r0, #10]
 80064a4:	8946      	ldrh	r6, [r0, #10]
 80064a6:	2f00      	cmp	r7, #0
 80064a8:	d01e      	beq.n	80064e8 <RVBS_CalcAvVbus+0x60>
 80064aa:	2300      	movs	r3, #0
      wtemp = 0u;
 80064ac:	2000      	movs	r0, #0
        wtemp += pHandle->aBuffer[i];
 80064ae:	8811      	ldrh	r1, [r2, #0]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80064b0:	3301      	adds	r3, #1
 80064b2:	b2db      	uxtb	r3, r3
        wtemp += pHandle->aBuffer[i];
 80064b4:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80064b6:	3202      	adds	r2, #2
 80064b8:	42bb      	cmp	r3, r7
 80064ba:	d1f8      	bne.n	80064ae <RVBS_CalcAvVbus+0x26>
      wtemp /= pHandle->LowPassFilterBW;
 80064bc:	0031      	movs	r1, r6
 80064be:	f7f9 fe23 	bl	8000108 <__udivsi3>
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80064c2:	b280      	uxth	r0, r0
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80064c4:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80064c6:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80064c8:	80a5      	strh	r5, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80064ca:	45b0      	cmp	r8, r6
 80064cc:	d209      	bcs.n	80064e2 <RVBS_CalcAvVbus+0x5a>
        pHandle->index++;
 80064ce:	4647      	mov	r7, r8
 80064d0:	3701      	adds	r7, #1
 80064d2:	7667      	strb	r7, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 80064d4:	0020      	movs	r0, r4
 80064d6:	f7ff ffb1 	bl	800643c <RVBS_CheckFaultState>
 80064da:	8120      	strh	r0, [r4, #8]
}
 80064dc:	bc80      	pop	{r7}
 80064de:	46b8      	mov	r8, r7
 80064e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->index = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	7663      	strb	r3, [r4, #25]
 80064e6:	e7f5      	b.n	80064d4 <RVBS_CalcAvVbus+0x4c>
      wtemp /= pHandle->LowPassFilterBW;
 80064e8:	2000      	movs	r0, #0
 80064ea:	e7eb      	b.n	80064c4 <RVBS_CalcAvVbus+0x3c>
 80064ec:	0000ffff 	.word	0x0000ffff

080064f0 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 80064f4:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 80064f6:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80064f8:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 80064fa:	3301      	adds	r3, #1
 80064fc:	6143      	str	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 80064fe:	4770      	bx	lr

08006500 <SPD_GetElAngle>:
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8006500:	2304      	movs	r3, #4
 8006502:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8006504:	4770      	bx	lr
 8006506:	46c0      	nop			; (mov r8, r8)

08006508 <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 8006508:	230c      	movs	r3, #12
 800650a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800650c:	4770      	bx	lr
 800650e:	46c0      	nop			; (mov r8, r8)

08006510 <SPD_GetInstElSpeedDpp>:
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 8006510:	2310      	movs	r3, #16
 8006512:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8006514:	4770      	bx	lr
 8006516:	46c0      	nop			; (mov r8, r8)

08006518 <SPD_IsMecSpeedReliable>:
  * - Called at least with the same periodicity on which speed control is executed.
  *         -

  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 8006518:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800651a:	2200      	movs	r2, #0
 800651c:	5e8a      	ldrsh	r2, [r1, r2]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800651e:	78c4      	ldrb	r4, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006520:	7803      	ldrb	r3, [r0, #0]
    if (*pMecSpeedUnit < 0)
 8006522:	2a00      	cmp	r2, #0
 8006524:	db24      	blt.n	8006570 <SPD_IsMecSpeedReliable+0x58>
      hAux = -(*pMecSpeedUnit);
      hAbsMecSpeedUnit = (uint16_t)hAux;
    }
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8006526:	b292      	uxth	r2, r2
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006528:	8ac6      	ldrh	r6, [r0, #22]
    {
      SpeedError = true;
 800652a:	2101      	movs	r1, #1
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800652c:	8a85      	ldrh	r5, [r0, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800652e:	4296      	cmp	r6, r2
 8006530:	d802      	bhi.n	8006538 <SPD_IsMecSpeedReliable+0x20>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8006532:	4295      	cmp	r5, r2
 8006534:	41ad      	sbcs	r5, r5
 8006536:	4269      	negs	r1, r5
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8006538:	2512      	movs	r5, #18
 800653a:	5f42      	ldrsh	r2, [r0, r5]
 800653c:	2a00      	cmp	r2, #0
 800653e:	db14      	blt.n	800656a <SPD_IsMecSpeedReliable+0x52>
      hAux = -(pHandle->hMecAccelUnitP);
      hAbsMecAccelUnitP = (uint16_t)hAux;
    }
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8006540:	b292      	uxth	r2, r2
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8006542:	8b05      	ldrh	r5, [r0, #24]
 8006544:	4295      	cmp	r5, r2
 8006546:	d301      	bcc.n	800654c <SPD_IsMecSpeedReliable+0x34>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8006548:	2900      	cmp	r1, #0
 800654a:	d009      	beq.n	8006560 <SPD_IsMecSpeedReliable+0x48>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800654c:	429c      	cmp	r4, r3
 800654e:	d901      	bls.n	8006554 <SPD_IsMecSpeedReliable+0x3c>
      {
        bSpeedErrorNumber++;
 8006550:	3301      	adds	r3, #1
 8006552:	b2db      	uxtb	r3, r3
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006554:	7003      	strb	r3, [r0, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8006556:	1b18      	subs	r0, r3, r4
 8006558:	1e42      	subs	r2, r0, #1
 800655a:	4190      	sbcs	r0, r2
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
 800655c:	b2c0      	uxtb	r0, r0
}
 800655e:	bd70      	pop	{r4, r5, r6, pc}
        bSpeedErrorNumber = 0u;
 8006560:	42a3      	cmp	r3, r4
 8006562:	4149      	adcs	r1, r1
 8006564:	4249      	negs	r1, r1
 8006566:	400b      	ands	r3, r1
 8006568:	e7f4      	b.n	8006554 <SPD_IsMecSpeedReliable+0x3c>
      hAux = -(pHandle->hMecAccelUnitP);
 800656a:	4252      	negs	r2, r2
 800656c:	b292      	uxth	r2, r2
      hAbsMecAccelUnitP = (uint16_t)hAux;
 800656e:	e7e8      	b.n	8006542 <SPD_IsMecSpeedReliable+0x2a>
      hAux = -(*pMecSpeedUnit);
 8006570:	4252      	negs	r2, r2
 8006572:	b292      	uxth	r2, r2
      hAbsMecSpeedUnit = (uint16_t)hAux;
 8006574:	e7d8      	b.n	8006528 <SPD_IsMecSpeedReliable+0x10>
 8006576:	46c0      	nop			; (mov r8, r8)

08006578 <SPD_GetS16Speed>:
  * -- INT16_MAX when the average mechanical speed is equal to
  * @ref SpeednPosFdbk_Handle_t::hMaxReliableMecSpeedUnit "hMaxReliableMecSpeedUnit" ,\n
  * - Called for speed monitoring through MotorPilote.
  */
__weak int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle)
{
 8006578:	0003      	movs	r3, r0
 800657a:	b510      	push	{r4, lr}
    tempValue = 0;
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
 800657c:	210c      	movs	r1, #12
 800657e:	5e42      	ldrsh	r2, [r0, r1]
    wAux *= INT16_MAX;
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8006580:	2114      	movs	r1, #20
 8006582:	5e59      	ldrsh	r1, [r3, r1]
    wAux *= INT16_MAX;
 8006584:	03d0      	lsls	r0, r2, #15
 8006586:	1a80      	subs	r0, r0, r2
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8006588:	f7f9 fe48 	bl	800021c <__divsi3>
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
 800658c:	b200      	sxth	r0, r0
}
 800658e:	bd10      	pop	{r4, pc}

08006590 <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8006590:	232a      	movs	r3, #42	; 0x2a
    pHandle->SPD = SPD_Handle;
 8006592:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8006594:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 8006596:	5cc3      	ldrb	r3, [r0, r3]
 8006598:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800659a:	222c      	movs	r2, #44	; 0x2c
 800659c:	5e83      	ldrsh	r3, [r0, r2]
 800659e:	041b      	lsls	r3, r3, #16
 80065a0:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80065a2:	222e      	movs	r2, #46	; 0x2e
 80065a4:	5e83      	ldrsh	r3, [r0, r2]
 80065a6:	041b      	lsls	r3, r3, #16
 80065a8:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 80065ae:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80065b0:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80065b2:	4770      	bx	lr

080065b4 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 80065b4:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80065b6:	4770      	bx	lr

080065b8 <STC_GetSpeedSensor>:
__weak SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 80065b8:	6940      	ldr	r0, [r0, #20]
#endif
}
 80065ba:	4770      	bx	lr

080065bc <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 80065bc:	7803      	ldrb	r3, [r0, #0]
{
 80065be:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d000      	beq.n	80065c6 <STC_Clear+0xa>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80065c4:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 80065c6:	2100      	movs	r1, #0
 80065c8:	6900      	ldr	r0, [r0, #16]
 80065ca:	f7ff fe7f 	bl	80062cc <PID_SetIntegralTerm>
}
 80065ce:	e7f9      	b.n	80065c4 <STC_Clear+0x8>

080065d0 <STC_GetMecSpeedRefUnit>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt >> 16));
 80065d0:	2306      	movs	r3, #6
 80065d2:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 80065d4:	4770      	bx	lr
 80065d6:	46c0      	nop			; (mov r8, r8)

080065d8 <STC_GetTorqueRef>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef >> 16));
#else
  return ((int16_t)(pHandle->TorqueRef >> 16));
 80065d8:	230a      	movs	r3, #10
 80065da:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 80065dc:	4770      	bx	lr
 80065de:	46c0      	nop			; (mov r8, r8)

080065e0 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 80065e0:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 80065e2:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 80065e4:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80065e6:	4770      	bx	lr

080065e8 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80065ea:	7803      	ldrb	r3, [r0, #0]
{
 80065ec:	0004      	movs	r4, r0
 80065ee:	000d      	movs	r5, r1
 80065f0:	0016      	movs	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d012      	beq.n	800661c <STC_ExecRamp+0x34>
    }
    else
    {
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80065f6:	2306      	movs	r3, #6
 80065f8:	5ec7      	ldrsh	r7, [r0, r3]
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80065fa:	8bc3      	ldrh	r3, [r0, #30]
 80065fc:	4299      	cmp	r1, r3
 80065fe:	dd01      	ble.n	8006604 <STC_ExecRamp+0x1c>
        allowedRange = false;
 8006600:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8006602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8006604:	2224      	movs	r2, #36	; 0x24
 8006606:	5e83      	ldrsh	r3, [r0, r2]
 8006608:	428b      	cmp	r3, r1
 800660a:	dcf9      	bgt.n	8006600 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800660c:	8c03      	ldrh	r3, [r0, #32]
 800660e:	4299      	cmp	r1, r3
 8006610:	da0e      	bge.n	8006630 <STC_ExecRamp+0x48>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8006612:	2222      	movs	r2, #34	; 0x22
 8006614:	5e83      	ldrsh	r3, [r0, r2]
 8006616:	428b      	cmp	r3, r1
 8006618:	dbf2      	blt.n	8006600 <STC_ExecRamp+0x18>
 800661a:	e009      	b.n	8006630 <STC_ExecRamp+0x48>
      hCurrentReference = STC_GetTorqueRef(pHandle);
 800661c:	f7ff ffdc 	bl	80065d8 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8006620:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8006622:	0007      	movs	r7, r0
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8006624:	429d      	cmp	r5, r3
 8006626:	dceb      	bgt.n	8006600 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8006628:	2228      	movs	r2, #40	; 0x28
 800662a:	5ea3      	ldrsh	r3, [r4, r2]
 800662c:	42ab      	cmp	r3, r5
 800662e:	dce7      	bgt.n	8006600 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8006630:	2e00      	cmp	r6, #0
 8006632:	d109      	bne.n	8006648 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8006634:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8006636:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8006638:	2b03      	cmp	r3, #3
 800663a:	d015      	beq.n	8006668 <STC_ExecRamp+0x80>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800663c:	60a5      	str	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	2001      	movs	r0, #1
 8006642:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8006644:	61a3      	str	r3, [r4, #24]
 8006646:	e7dc      	b.n	8006602 <STC_ExecRamp+0x1a>
        wAux /= 1000U;
 8006648:	21fa      	movs	r1, #250	; 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800664a:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 800664c:	8065      	strh	r5, [r4, #2]
        wAux /= 1000U;
 800664e:	0089      	lsls	r1, r1, #2
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8006650:	4370      	muls	r0, r6
        wAux /= 1000U;
 8006652:	f7f9 fd59 	bl	8000108 <__udivsi3>
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8006656:	1bed      	subs	r5, r5, r7
        pHandle->RampRemainingStep++;
 8006658:	1c41      	adds	r1, r0, #1
 800665a:	60e1      	str	r1, [r4, #12]
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800665c:	0428      	lsls	r0, r5, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800665e:	f7f9 fddd 	bl	800021c <__divsi3>
        pHandle->IncDecAmount = wAux1;
 8006662:	61a0      	str	r0, [r4, #24]
 8006664:	2001      	movs	r0, #1
 8006666:	e7cc      	b.n	8006602 <STC_ExecRamp+0x1a>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8006668:	6065      	str	r5, [r4, #4]
 800666a:	e7e8      	b.n	800663e <STC_ExecRamp+0x56>

0800666c <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006670:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006672:	4770      	bx	lr

08006674 <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006674:	7802      	ldrb	r2, [r0, #0]
{
 8006676:	b570      	push	{r4, r5, r6, lr}
 8006678:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800667a:	2a04      	cmp	r2, #4
 800667c:	d022      	beq.n	80066c4 <STC_CalcTorqueReference+0x50>
    {
      wCurrentReference = pHandle->TorqueRef;
    }
    else
    {
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800667e:	6845      	ldr	r5, [r0, #4]
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8006680:	68e3      	ldr	r3, [r4, #12]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d908      	bls.n	8006698 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8006686:	69a1      	ldr	r1, [r4, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8006688:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800668a:	186d      	adds	r5, r5, r1
      pHandle->RampRemainingStep--;
 800668c:	60e3      	str	r3, [r4, #12]
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800668e:	1428      	asrs	r0, r5, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006690:	2a03      	cmp	r2, #3
 8006692:	d00b      	beq.n	80066ac <STC_CalcTorqueReference+0x38>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8006694:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8006696:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8006698:	2b01      	cmp	r3, #1
 800669a:	d1f8      	bne.n	800668e <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800669c:	2302      	movs	r3, #2
 800669e:	5ee5      	ldrsh	r5, [r4, r3]
      pHandle->RampRemainingStep = 0U;
 80066a0:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80066a2:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 80066a4:	60e3      	str	r3, [r4, #12]
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 80066a6:	1428      	asrs	r0, r5, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 80066a8:	2a03      	cmp	r2, #3
 80066aa:	d1f3      	bne.n	8006694 <STC_CalcTorqueReference+0x20>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80066ac:	6960      	ldr	r0, [r4, #20]
 80066ae:	f7ff ff2b 	bl	8006508 <SPD_GetAvrgMecSpeedUnit>
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 80066b2:	1429      	asrs	r1, r5, #16
      hError = hTargetSpeed - hMeasuredSpeed;
 80066b4:	1a09      	subs	r1, r1, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80066b6:	b209      	sxth	r1, r1
 80066b8:	6920      	ldr	r0, [r4, #16]
 80066ba:	f7ff fe0f 	bl	80062dc <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 80066be:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80066c0:	0405      	lsls	r5, r0, #16
 80066c2:	e7e7      	b.n	8006694 <STC_CalcTorqueReference+0x20>
      wCurrentReference = pHandle->TorqueRef;
 80066c4:	6885      	ldr	r5, [r0, #8]
 80066c6:	e7db      	b.n	8006680 <STC_CalcTorqueReference+0xc>

080066c8 <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 80066c8:	232c      	movs	r3, #44	; 0x2c
 80066ca:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80066cc:	4770      	bx	lr
 80066ce:	46c0      	nop			; (mov r8, r8)

080066d0 <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 80066d0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80066d2:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 80066d4:	041b      	lsls	r3, r3, #16
{
 80066d6:	b082      	sub	sp, #8
  return (IqdRefDefault);
 80066d8:	4318      	orrs	r0, r3
}
 80066da:	b002      	add	sp, #8
 80066dc:	4770      	bx	lr
 80066de:	46c0      	nop			; (mov r8, r8)

080066e0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 80066e0:	b510      	push	{r4, lr}
 80066e2:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 80066e4:	6940      	ldr	r0, [r0, #20]
 80066e6:	f7ff ff0f 	bl	8006508 <SPD_GetAvrgMecSpeedUnit>
 80066ea:	0400      	lsls	r0, r0, #16
 80066ec:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80066ee:	bd10      	pop	{r4, pc}

080066f0 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80066f0:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80066f2:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80066f4:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 80066f6:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80066f8:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80066fa:	8243      	strh	r3, [r0, #18]
    pHandle->wElAccDppP32 = 0;
 80066fc:	6203      	str	r3, [r0, #32]
    pHandle->wElSpeedDpp32 = 0;
 80066fe:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->hRemainingStep = 0U;
 8006700:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 8006702:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8006704:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 8006706:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8006708:	4770      	bx	lr
 800670a:	46c0      	nop			; (mov r8, r8)

0800670c <VSS_Init>:
{
 800670c:	b510      	push	{r4, lr}
  VSS_Clear(pHandle);
 800670e:	f7ff ffef 	bl	80066f0 <VSS_Clear>
}
 8006712:	bd10      	pop	{r4, pc}

08006714 <VSS_SetMecAngle>:
  *
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void VSS_SetMecAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t hMecAngle)
{
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	000d      	movs	r5, r1
 8006718:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 800671a:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800671c:	7841      	ldrb	r1, [r0, #1]
 800671e:	0028      	movs	r0, r5
 8006720:	f7f9 fd7c 	bl	800021c <__divsi3>
    pHandle->_Super.hElAngle = hMecAngle;
 8006724:	80a5      	strh	r5, [r4, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006726:	80e0      	strh	r0, [r4, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8006728:	bd70      	pop	{r4, r5, r6, pc}
 800672a:	46c0      	nop			; (mov r8, r8)

0800672c <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	46ce      	mov	lr, r9
 8006730:	4647      	mov	r7, r8
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8006732:	232c      	movs	r3, #44	; 0x2c
{
 8006734:	b580      	push	{r7, lr}
    if (false == pHandle->bTransitionStarted)
 8006736:	5cc3      	ldrb	r3, [r0, r3]
{
 8006738:	0004      	movs	r4, r0
 800673a:	000e      	movs	r6, r1
 800673c:	0015      	movs	r5, r2
    if (false == pHandle->bTransitionStarted)
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10f      	bne.n	8006762 <VSS_SetMecAcceleration+0x36>
    {
      if (0U == hDurationms)
 8006742:	2a00      	cmp	r2, #0
 8006744:	d111      	bne.n	800676a <VSS_SetMecAcceleration+0x3e>
      {
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8006746:	8181      	strh	r1, [r0, #12]

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006748:	8b63      	ldrh	r3, [r4, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800674a:	69c0      	ldr	r0, [r0, #28]
 800674c:	4348      	muls	r0, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800674e:	0099      	lsls	r1, r3, #2
 8006750:	18c9      	adds	r1, r1, r3
 8006752:	0049      	lsls	r1, r1, #1
                                              / (((int32_t)SPEED_UNIT)
 8006754:	f7f9 fd62 	bl	800021c <__divsi3>

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006758:	7863      	ldrb	r3, [r4, #1]

        pHandle->hRemainingStep = 0U;
 800675a:	8525      	strh	r5, [r4, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800675c:	4343      	muls	r3, r0

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800675e:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8006760:	81e3      	strh	r3, [r4, #14]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8006762:	bcc0      	pop	{r6, r7}
 8006764:	46b9      	mov	r9, r7
 8006766:	46b0      	mov	r8, r6
 8006768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800676a:	21fa      	movs	r1, #250	; 0xfa
 800676c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 800676e:	0089      	lsls	r1, r1, #2
 8006770:	4350      	muls	r0, r2
 8006772:	f7f9 fcc9 	bl	8000108 <__udivsi3>
        hNbrStep++;
 8006776:	3001      	adds	r0, #1
 8006778:	b285      	uxth	r5, r0
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800677a:	230e      	movs	r3, #14
 800677c:	5ee7      	ldrsh	r7, [r4, r3]
        pHandle->hRemainingStep = hNbrStep;
 800677e:	8525      	strh	r5, [r4, #40]	; 0x28
        if (0U == hNbrStep)
 8006780:	2d00      	cmp	r5, #0
 8006782:	d103      	bne.n	800678c <VSS_SetMecAcceleration+0x60>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8006784:	043f      	lsls	r7, r7, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006786:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8006788:	6267      	str	r7, [r4, #36]	; 0x24
}
 800678a:	e7ea      	b.n	8006762 <VSS_SetMecAcceleration+0x36>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800678c:	7863      	ldrb	r3, [r4, #1]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800678e:	69e0      	ldr	r0, [r4, #28]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006790:	4699      	mov	r9, r3
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006792:	8b63      	ldrh	r3, [r4, #26]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8006794:	4370      	muls	r0, r6
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8006796:	0099      	lsls	r1, r3, #2
 8006798:	18c9      	adds	r1, r1, r3
 800679a:	0049      	lsls	r1, r1, #1
 800679c:	f7f9 fd3e 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80067a0:	b203      	sxth	r3, r0
 80067a2:	4698      	mov	r8, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80067a4:	4649      	mov	r1, r9
 80067a6:	0038      	movs	r0, r7
 80067a8:	f7f9 fd38 	bl	800021c <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80067ac:	4643      	mov	r3, r8
 80067ae:	1a18      	subs	r0, r3, r0
 80067b0:	0029      	movs	r1, r5
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80067b2:	0400      	lsls	r0, r0, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80067b4:	f7f9 fd32 	bl	800021c <__divsi3>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80067b8:	464b      	mov	r3, r9
 80067ba:	4358      	muls	r0, r3
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80067bc:	043f      	lsls	r7, r7, #16
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80067be:	6220      	str	r0, [r4, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80067c0:	8566      	strh	r6, [r4, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80067c2:	6267      	str	r7, [r4, #36]	; 0x24
    }
 80067c4:	e7cd      	b.n	8006762 <VSS_SetMecAcceleration+0x36>
 80067c6:	46c0      	nop			; (mov r8, r8)

080067c8 <memset>:
 80067c8:	0003      	movs	r3, r0
 80067ca:	1882      	adds	r2, r0, r2
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d100      	bne.n	80067d2 <memset+0xa>
 80067d0:	4770      	bx	lr
 80067d2:	7019      	strb	r1, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	e7f9      	b.n	80067cc <memset+0x4>

080067d8 <__libc_init_array>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	2600      	movs	r6, #0
 80067dc:	4c0c      	ldr	r4, [pc, #48]	; (8006810 <__libc_init_array+0x38>)
 80067de:	4d0d      	ldr	r5, [pc, #52]	; (8006814 <__libc_init_array+0x3c>)
 80067e0:	1b64      	subs	r4, r4, r5
 80067e2:	10a4      	asrs	r4, r4, #2
 80067e4:	42a6      	cmp	r6, r4
 80067e6:	d109      	bne.n	80067fc <__libc_init_array+0x24>
 80067e8:	2600      	movs	r6, #0
 80067ea:	f000 f823 	bl	8006834 <_init>
 80067ee:	4c0a      	ldr	r4, [pc, #40]	; (8006818 <__libc_init_array+0x40>)
 80067f0:	4d0a      	ldr	r5, [pc, #40]	; (800681c <__libc_init_array+0x44>)
 80067f2:	1b64      	subs	r4, r4, r5
 80067f4:	10a4      	asrs	r4, r4, #2
 80067f6:	42a6      	cmp	r6, r4
 80067f8:	d105      	bne.n	8006806 <__libc_init_array+0x2e>
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	00b3      	lsls	r3, r6, #2
 80067fe:	58eb      	ldr	r3, [r5, r3]
 8006800:	4798      	blx	r3
 8006802:	3601      	adds	r6, #1
 8006804:	e7ee      	b.n	80067e4 <__libc_init_array+0xc>
 8006806:	00b3      	lsls	r3, r6, #2
 8006808:	58eb      	ldr	r3, [r5, r3]
 800680a:	4798      	blx	r3
 800680c:	3601      	adds	r6, #1
 800680e:	e7f2      	b.n	80067f6 <__libc_init_array+0x1e>
 8006810:	0800765c 	.word	0x0800765c
 8006814:	0800765c 	.word	0x0800765c
 8006818:	08007660 	.word	0x08007660
 800681c:	0800765c 	.word	0x0800765c

08006820 <memcpy>:
 8006820:	2300      	movs	r3, #0
 8006822:	b510      	push	{r4, lr}
 8006824:	429a      	cmp	r2, r3
 8006826:	d100      	bne.n	800682a <memcpy+0xa>
 8006828:	bd10      	pop	{r4, pc}
 800682a:	5ccc      	ldrb	r4, [r1, r3]
 800682c:	54c4      	strb	r4, [r0, r3]
 800682e:	3301      	adds	r3, #1
 8006830:	e7f8      	b.n	8006824 <memcpy+0x4>
	...

08006834 <_init>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr

08006840 <_fini>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr
